To architect a scalable and secure WordPress website with a MySQL backend in Kubernetes, the following resources and configurations would be employed:

### Components:
1. **Wordpress Deployment** - Scalable with auto-scaling configuration.
2. **MySQL StatefulSet** - For stable, consistent naming and data persistence.
3. **Persistent Volumes** - For data storage needs of MySQL.
4. **Secrets** - To securely store and manage sensitive information like database credentials.
5. **Services** - To expose deployments within the cluster and potentially to the outside world.

### Wordpress Configuration for High Traffic:
- **Horizontal Pod Autoscaler (HPA)** to dynamically scale WordPress pods based on CPU or memory usage.
- **Load Balancer Service** to distribute traffic among pods and ensure low latency and high availability.

### MySQL Configuration for Data Consistency and Security:
- **Replication** in MySQL to ensure data consistency.
- **PersistentVolumeClaims (PVC)** with access mode set to 'ReadWriteOnce' for each replica to ensure data persistence.
- **TLS/SSL encryption** for secure data transmission.

### YAML Manifests:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-namespace
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
  namespace: wordpress-namespace
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
      volumeClaimTemplates:
      - metadata:
          name: mysql-pv-claim
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "standard"
          resources:
            requests:
              storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```
### Trade-offs and Challenges:
- **Cost**: Auto-scaling and data replication can lead to increased resource consumption and costs.
- **Complexity in Management**: Managing stateful applications like databases in Kubernetes is complex, especially concerning data consistency and replication strategies.
- **Performance Overhead**: TLS/SSL encryption might introduce latency in the database connections.
- **Backup and Recovery**: Implementing robust backup and recovery strategies in a dynamic environment like Kubernetes can be challenging.

This solution aims to balance scalability, availability, security, and maintainability within the Kubernetes ecosystem. Adjustments may be needed based on specific operational requirements and environments.