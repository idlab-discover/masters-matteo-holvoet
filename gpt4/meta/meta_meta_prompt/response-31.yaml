Given the complexity and multifaceted approach required for the prompt, the YAML configuration will be designed in a segmented manner, focusing firstly on establishing the basic setup, and then incorporating various elements like scalability, resilience, security, integration, and environmental considerations.

Here's a basic Kubernetes YAML configuration for a scalable, resilient WordPress application using a MySQL database:

```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-deployment
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  replicas: 3  # Horizontal scaling: start with 3 instances
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim 
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-deployment
type: Opaque
data:
  password: <!-- MYSQL PASSWORD BASE64 ENCODED -->
```

### Explanation of the Setup:

1. **Scalability**:
   - **Horizontal Scaling**: Multiple replicas of the WordPress pod are used, enabling the handling of increased traffic.
   - **Vertical Scaling**: Resource requests and limits can be specified for both WordPress and MySQL containers to scale vertically.

2. **Resilience**:
   - High availability is achieved through multiple replicas of the WordPress pods.
   - Persistent volumes ensure that the data isnâ€™t lost if the pod crashes.
   - For MySQL, it can be further improved using a StatefulSet to manage stateful deployment and scaling.

3. **Security**:
   - The MySQL password is stored in a Kubernetes Secret to protect sensitive data.
   - Additional security measures could include Network Policies to restrict traffic between pods.

4. **Integration**:
   - Services of type LoadBalancer and ClusterIP are used for integrating with external traffic and internal communication, respectively.
   - ConfigMap can be used to manage WordPress configurations.

5. **Environmental Impact**:
   - Efficiencies can be optimized by scaling down during low traffic periods, effectively reducing resource usage.

### Future-proofing:
- Keeping the images up to date with Kubernetes rolling updates.
- Monitoring and logging setups such as Prometheus and Fluentd can help in predictive scaling and performance tuning.
- Vertical pod autoscaling and usage of scalable resources like node pools in cloud environments will adapt to changing demands without manual interference.