```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: bXlzcWwtc2VjcmV0LXBhc3N3b3JkCg==
  mysql-password: bXlzcWwtc2VjcmV0LXBhc3N3b3JkCg==

---
apiVersion: v1
kind: ConfigMap
metadata:
 name: mysql-configmap
data:
  my.cnf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: mysql-root-password
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: config-volume
          mountPath: /etc/mysql/my.cnf
      volumes:
        - name: config-volume
          configMap:
            name: mysql-configmap
            items:
            - key: my.cnf
              path: my.cnf
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        ports:
        - containerPort: 80
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```
### Explanations and Justifications:

1. **StatefulSet for MySQL**: MySQL requires persistent storage to manage stateful data. Using StatefulSets ensures that each pod gets its own persistent volume that follows the pod, supporting stable, unique network identifiers and ordered, graceful deployment and scaling.

2. **Secret Management**: Secrets are used to manage MySQL credentials securely. Storing password details in Kubernetes Secrets and referencing them in deployment configurations avoids plain text credential storage and helps in automating password utilization.

3. **Scaling and Load Balancing for WordPress**: The deployment of WordPress as a scalable set of replicas with a frontend LoadBalancer ensures efficient distribution of incoming traffic and user requests across multiple instances, ensuring high availability and fault tolerance.

4. **Secure Communication**: By isolating services within the Kubernetes cluster and using internal service names (like `mysql` for database connections from WordPress), network communications remain confined to the cluster's internal network, enhancing security.

5. **Environmental Impact and Optimization**: Using cloud-native features like rolling updates minimizes downtime and resource consumption. Efficient use of replicas and load balancers optimizes resource allocation and reduces unnecessary carbon emissions through optimized resource utilization.

This configuration utilizes Kubernetes' orchestration strengths to deploy and manage a scalable, highly available WordPress application backed by a robust MySQL database, addressing security, persistence, and optimal resource use within an eco-friendly approach.
