Sure, let's create a Kubernetes YAML manifest following the detailed considerations outlined above for deploying a WordPress site with a MySQL backend.

### 1. Choice of WordPress and MySQL Images
For the WordPress image, we'll use `wordpress:latest` to ensure we have the newest features and security patches. The MySQL container will use `mysql:5.7`, which is widely used and supports most existing plugins while being stable and receiving regular updates for security vulnerabilities.

### 2. Persistent Storage Configuration
For data durability, we'll use Persistent Volumes (PV) and Persistent Volume Claims (PVC). This ensures that data persists across pod restarts and node failures. WordPress content and MySQL data will be stored on respective persistent volumes.

### 3. Automating Database Backups
To automate backups, we can set up a cron job that uses `mysqldump` to backup the MySQL database at regular intervals. We'll store backups on a separate persistent volume or external storage to safeguard against data loss.

### 4. Security Risks and Mitigation
Security contexts will be applied to run containers with minimum privileges. Network policies will restrict communication between pods to only necessary traffic, minimizing the attack surface. Using Secrets to store sensitive information like database credentials will further enhance security.

### 5. Scaling Strategy
We'll use Horizontal Pod Autoscalers (HPA) for scaling WordPress based on CPU and memory usage thresholds. MySQL will use a replication controller for read scalability. A headless service for MySQL and a LoadBalancer service for WordPress will manage the load distribution.

### 6. Potential Issues and Solutions
Issues like resource limits, network latency, and single-point failures can be mitigated by setting appropriate resource requests/limits, using quality of service (QoS) for network traffic, and deploying in a highly available Kubernetes cluster setup.

Now, let's create the YAML manifest:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-system
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-system
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-system
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: mysql
```

This YAML manifest sets up a WordPress website and MySQL database with considerations for high availability, scalability, security, and data durability. Automated backups and recovery plans can be further detailed in administrative scripts or additional Kubernetes cron jobs.