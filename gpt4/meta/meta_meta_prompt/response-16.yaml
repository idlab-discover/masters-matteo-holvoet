### Kubernetes YAML Manifest for WordPress and MySQL

Here is the initial YAML manifest setup for deploying a WordPress website with a MySQL backend.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-persistent-storage
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Scalability in Surges of Traffic
To handle unexpected surges in traffic, you would use the Horizontal Pod Autoscaler which can automatically scale the number of WordPress pods based on observed CPU utilization or other select metrics:

```yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
  namespace: wordpress-namespace
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
```

### Security Enhancements
1. **Container Communication**: To secure the communication between the WordPress and MySQL containers, use network policies that restrict traffic between the two services so only the WordPress service can access MySQL.

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-access-policy
  namespace: wordpress-namespace
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: wordpress
    ports:
    - protocol: TCP
      port: 3306
```

2. **Data Encryption**: For data at rest, ensure that MySQL is configured to use encrypted storage. For data in transit, use SSL/TLS for connections between WordPress and MySQL by configuring MySQL and WordPress configurations to use secure connections.

### Data Persistence Plans
Ensure persistent volumes are backed up regularly. Implement snapshot and backup strategies using volume snapshots or a third-party tool that integrates with Kubernetes.

### Integrating CDN and SSL/TLS
To further improve content delivery and security:
- **CDN**: Integrate a CDN to cache static assets; this offloads requests from the servers and improves load times globally.
- **SSL/TLS**: Use certificates managed by cert-manager in Kubernetes for automating the management and issuance of SSL/TLS certificates ensuring secure HTTPS traffic.

This plan provides a detailed and robust approach to deploying a scalable, secure, and resilient WordPress site on Kubernetes.