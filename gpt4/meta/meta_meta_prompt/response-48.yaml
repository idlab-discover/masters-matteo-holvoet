To address the requirements of deploying a high-traffic WordPress site with MySQL as the database, we'll design a Kubernetes configuration that leverages specific resources and considerations for robustness, scalability, and security. Since the prompt requests the YAML manifest directly, we'll layout the YAML configurations for each component and briefly explain the choices inline.

### Kubernetes Controllers

1. **WordPress (Deployment)**: We use a Deployment for WordPress because it is stateless and benefits from rolling updates and easy scaling.
2. **MySQL (StatefulSet)**: For the database, a StatefulSet is appropriate because it is a stateful application which needs stable, persistent storage and unique network identifiers.

### High Traffic Challenges and Resilience Strategy

- **Load Balancing**: Implemented through a Service of type `LoadBalancer` for WordPress to distribute incoming traffic efficiently.
- **Scaling**: Horizontal Pod Autoscalers (HPAs) are configured for WordPress to automatically scale the number of pods based on CPU usage.
- **Data Persistence**: Persistent Volume Claims (PVCs) for MySQL to ensure data is not lost when pods are restarted or rescheduled.

### Security

- **Network Policies**: To control the traffic between pods and ensure that only WordPress can access MySQL.
- **Secrets**: Used to store sensitive information such as database credentials, which are passed as environment variables to the deployments.

### Monitoring and Logging

- **Readiness and Liveness Probes**: For health monitoring of applications.
- **Logging**: Utilization of sidecar containers or integration with a log aggregation system like ELK or Fluentd could be configured outside of this YAML but is crucial for troubleshooting.

### Additional Kubernetes Resources

- **ConfigMap**: Used to store WordPress configuration settings.
- **Secrets**: Already mentioned for storing confidential data securely.

Here is the complete YAML configuration which includes the necessary components:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-system
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-system
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: <base64-encoded-password>
  MYSQL_DATABASE: <base64-encoded-database-name>
  MYSQL_USER: <base64-encoded-username>
  MYSQL_PASSWORD: <base64-encoded-password>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: wordpress-system
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-system
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-system
spec:
  replicas: 5
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-system
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
  namespace: wordpress-system
spec:
  scaleTargetRef:
    kind: Deployment
    name: wordpress
  minReplicas: 5
  maxReplicas: 50
  targetCPUUtilizationPercentage: 50
```
This configuration sets up a high-availability WordPress site with scale based on traffic, secure access to a replicated MySQL database, and persistent storage for database resilience. For advanced monitoring and logging, integration with external systems should be considered.