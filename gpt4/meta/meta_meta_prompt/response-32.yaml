To address your comprehensive orchestrations for a WordPress site associated with a MySQL database in Kubernetes, let's design the YAML manifests which include all the necessary components like Deployments, Services, PersistentVolumes, and ConfigMaps, among other resources along with security measures and scaling configurations.

### Kubernetes YAML Manifest for WordPress and MySQL

Hereâ€™s the structure:

1. **Deployment and Service for WordPress** - Includes scalability settings.
2. **Deployment and Service for MySQL** - Configured for data persistence and scalability.
3. **Persistent Volume and Persistent Volume Claim** - Ensures data persistence.
4. **ConfigMap and Secrets** - Handles configuration and sensitive data.
5. **Network Policies** - Implements security by restricting traffic flow.

Each section includes annotations describing rationale choices based on Kubernetes best practices.

### Detailed YAML Configuration:

```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-site
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-site
type: Opaque
data:
  password: <<BASE64_ENCODED_PASSWORD>>
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  namespace: wordpress-site
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-site
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-site
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        resources:
          requests:
            memory: "500Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-site
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-site
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        resources:
          requests:
            memory: "200Mi"
            cpu: "200m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-site
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wordpress-network-policy
  namespace: wordpress-site
spec:
  podSelector:
    matchLabels:
      app: wordpress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
```

### Explanation and Rationale:

1. **Scalability and Resilience:**
   - WordPress is made scalable with 3 replicas. MySQL doesn't use replication in this setup because of complexity considerations; however, high availability can be achieved using advanced configurations like MySQL clustering.
   
2. **Security Measures:**
   - Network policies restrict communication between WordPress and MySQL to only the necessary ports, enhancing security.
   - Secrets are used to manage sensitive data like MySQL passwords.

3. **Resource Management:**
   - Resource requests and limits are defined to ensure that containers have enough resources during high load, but not hog too many resources under normal conditions, preserving cluster efficiency.

4. **Multi-environment Deployment:**
   - `ConfigMap` for environment-specific configurations (not shown here due to length constraints), and different `storageClass` might be used based on the environment.
   - Resource limits and requests might differ by environment based on expected load.

5. **Error Handling and Recovery:**
   - Persistent Volumes ensure data is not lost during pod failures.
   - A replication strategy for WordPress ensures that if a pod crashes, others can still handle the load.

This configuration provides a robust foundation for a scalable, secure, and resilient WordPress deployment in Kubernetes. Adjustments might be necessary based on actual deployment scenarios and environmental specifics.