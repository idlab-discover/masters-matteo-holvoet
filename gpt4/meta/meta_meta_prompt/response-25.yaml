To meet the requirements for setting up a WordPress website with a MySQL backend in Kubernetes, the solution includes several components: secrets to manage sensitive data, persistent volumes for data storage, a scaling strategy for WordPress, and consideration for using StatefulSets for the MySQL database. Below, I describe the configuration and reasoning behind each component followed by the actual YAML manifests.

### 1. Kubernetes Secret Management
Sensitive data, such as MySQL credentials, should not be hard-coded directly in the deployment configurations. Kubernetes Secrets provide a mechanism to store and manage sensitive information. Utilizing secrets helps in avoiding exposure of sensitive data in your application code or Docker image configuration.

### 2. Persistent Volumes (PVs) and Persistent Volume Claims (PVCs)
PVs and PVCs are vital for managing storage in Kubernetes and ensuring that data is not lost when containers are restarted. For MySQL, a PV will store database files persistently. For WordPress, another PV will store web content persistently. Using persistent storage ensures that your data survives even when pods are terminated or recreated.

### 3. Horizontal Pod Autoscaler (HPA)
HPA automatically scales the number of pod replicas based on observed CPU utilization. For a WordPress application that might experience varying levels of traffic, HPA ensures that resources are utilized efficiently, scaling up during high traffic and scaling down during low traffic periods.

### 4. StatefulSets vs Deployments
For the MySQL database, StatefulSets are more suitable than Deployments. This is because StatefulSets provide stable, unique network identifiers and persistent storage across pod (re)scheduling, which are critical for stateful applications like MySQL that require stable storage and network identity. Deployments do not guarantee this as they treat all instances as interchangeable.

### YAML Implementation

Here are the YAML manifests describing each component:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD_HERE

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 50
```

The use of a `StatefulSet` for MySQL ensures stability and data persistence, critical for databases, while the `Deployment` of WordPress with HPA allows dynamic scaling based on load, optimizing resource use. Secrets help protect sensitive information, and PVs/PVCs ensure data persistence across Pod restarts.

This configuration would be a robust starting point for a scalable, secure WordPress site deployment in a production Kubernetes environment.