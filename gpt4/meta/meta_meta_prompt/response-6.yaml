To create a scalable and secure WordPress application using Kubernetes, various components including deployments, services, volume management, secrets, and potentially an Ingress controller for traffic management will be necessary. The design will focus on achieving high availability, security best practices, data persistence, and cost-efficiency.

### 1. Kubernetes Resources Architecture

- **Deployments**: For WordPress and MySQL, it is critical to use deployments which manage the creation and scaling of pods.
- **Services**: Each Deployment (WordPress, MySQL) will have a corresponding Service of type ClusterIP to manage intra-cluster communication.
- **PersistentVolume (PV) and PersistentVolumeClaim (PVC)**: For MySQL data persistence, using a PV and a PVC ensures that the database data remains intact across pod restarts and failures.
- **Secrets**: MySQL credentials will be stored in Kubernetes Secrets and mounted into the MySQL and WordPress pods for secure access.
- **Ingress**: To manage external access to the WordPress frontend, an Ingress resource can direct traffic to the WordPress service.
- **Horizontal Pod Autoscaler (HPA)**: An HPA resource will help manage scaling the number of WordPress pod replicas based on the observed CPU or memory usage, addressing traffic spikes.

### 2. Securing Sensitive Data with Kubernetes Secrets

Secrets are Kubernetes resources that store sensitive data, such as usernames and passwords, which helps avoid putting confidential data into your Podâ€™s specification or in a Docker image. Using Secrets is vital for keeping the deployment secure.

### 3. Persistent Data Handling for MySQL 

A PersistentVolume (PV) backed by durable storage (e.g., SSDs in a cloud environment) coupled with a PersistentVolumeClaim (PVC) used by the MySQL deployment ensures that the data stored in the database remains intact even if the MySQL pod fails or is restarted. This setup minimizes downtime and ensures data persistence.

### 4. Dynamic Scaling Configuration

The Horizontal Pod Autoscaler (HPA) automatically adjusts the number of pod replicas of the WordPress deployment based on observed CPU usage or other selected metrics to handle changing load patterns efficiently.

### 5. Network Policies

Implementing Kubernetes network policies restricts the communication between the WordPress and MySQL pods, enhancing the security by ensuring that only authorized traffic can flow between them. This control is crucial in a multi-application cluster to prevent potential security breaches from affecting interconnected services.

### YAML Manifest for Deployment

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress
            port:
              number: 80

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
```

### Explanation

- **Secrets**: Base64 encoding is used for the MySQL password. The secret is then referenced in both the MySQL and WordPress deployments.
- **Persistent Volumes**: Ensures that MySQL data survives pod failure.
- **Deployments and Services**: Defined for both MySQL (with a restart strategy of `Recreate` to handle storage consistently) and WordPress.
- **Ingress**: Manages external access.
- **HPA**: Allows WordPress to scale based on CPU utilization, which is crucial during traffic spikes.

This configuration provides a robust foundation for a production-ready WordPress site on Kubernetes, balancing performance, cost, security, and scalability.