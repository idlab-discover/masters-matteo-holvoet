To create a scalable WordPress website with a MySQL database in Kubernetes, we need to design a set of manifests that will cater to the requirements of high availability, security, and scalability. Given the needs for persisting data, database update mechanisms, and failure recovery, we will opt for a `StatefulSet` for MySQL. For WordPress, a `Deployment` would be appropriate since it's stateless and scales horizontally without special considerations for data persistence.

**MySQL as a StatefulSet:**
MySQL is sensitive to how data is handled, requires persistent storage, and we need a guarantee that the same PersistentVolume is reattached to the pod in case of failure, which makes `StatefulSet` the ideal choice. `StatefulSets` also provide stable, unique network identifiers, and maintain an ordered, graceful deployment and scaling.

**WordPress as a Deployment:**
WordPress stores its state largely in the database and thus can be deployed as a highly available service using a `Deployment`, which facilitates rolling updates and easy scaling.

**Security Concerns:**
Both applications need to manage sensitive data (e.g., database credentials), which should be handled via Kubernetes Secrets. Network policies should be in place to restrict traffic flow between the pods to only what's necessary, mitigating the risk from potential attacks.

**Networking:**
For inter-container communication, typically within a cluster, the pods communicate over a private internal network. WordPress will need to communicate with MySQL, and this can be managed by Kubernetes Services. External access for users to WordPress should be managed by an Ingress controller, which routes external HTTP/S requests to the service.

Here are the YAML manifests required for deploying such an application:

```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-namespace
type: Opaque
data:
  mysql-password: [base64-encoded-password]
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  rules:
  - host: wordpress.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress
            port:
              number: 80
```

### Explanation of choices and potential security enhancements:
- **`StatefulSet` for MySQL** ensures that each replica is deployed sequentially which is essential for a MySQL master-slave configuration.
- **Using Secrets** to manage MySQL passwords to avoid hardcoding sensitive information.
- **Deployments for WordPress** allow us to utilize rolling updates, minimizing downtime.
- **Network Policies** can be added to further restrict traffic between different parts of the application to those strictly required for operation.
- **Using an Ingress Controller** enables external HTTP/S traffic to be routed to the internal WordPress service while also allowing for more sophisticated traffic management and potentially layering additional security measures such as TLS.

For production readiness, additional considerations such as resource limits, more sophisticated volume handling, and logging/monitoring are necessary.