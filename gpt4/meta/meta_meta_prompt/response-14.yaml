```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-namespace
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  replicas: 2  # Start with two replicas
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
  namespace: wordpress-namespace
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
```

This YAML file set accomplishes the tasks as outlined:

1. **Scalability**: The Horizontal Pod Autoscaler (HPA) allows WordPress container scaling from 2 to 10 instances based on CPU utilization, ensuring that the system can handle increased loads by automating the scaling process.

2. **Security**: MySQL password is managed using Kubernetes secrets which keeps the sensitive data out of the deployment spec and minimizes risk. Also, MySQL service is configured without an external IP, allowing only internal cluster communication.

3. **Data Persistence**: Both MySQL and WordPress data are stored on Persistent Volumes which are retained across pod restarts and failures, ensuring data persistence. A persistent volume claim (PVC) is used to dynamically provision storage as needed.

4. **Cost Optimization**: The use of dynamically scalable resources ensures cost effectiveness. Initially deploying a minimal viable number of pods reduces costs, while allowing for scaling up based on actual demand. Configuring PVC provides a balance between cost and the flexibility to select a storage option that matches speed and redundancy requirements.

The scenario simulation and troubleshooting part would involve monitoring tools such as Prometheus, along with Kubernetesâ€™ own metrics-server to watch the system under different loads, tuning the HPA thresholds, and resource limits based on the observed performance bottlenecks.