Here is a YAML manifest that contains the basic components required for a high-availability WordPress setup using MySQL for the database. This configuration includes deployment specifications for WordPress and MySQL, a service to allow traffic to WordPress, persistent volume claims, and configurations intended to maintain high availability and data consistency:

```yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "standard"
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "standard"
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: password
          - name: MYSQL_DATABASE
            value: wordpress
        ports:
          - containerPort: 3306
        volumeMounts:
          - name: mysql-storage
            mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
          - name: WORDPRESS_DB_HOST
            value: mysql
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: password
        ports:
          - containerPort: 80
        volumeMounts:
          - name: wordpress-storage
            mountPath: /var/www/html
      volumes:
        - name: wordpress-storage
          persistentVolumeClaim:
            claimName: wordpress-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress

```

### Design Choices Explained:

**Network Resources**: Using a LoadBalancer type service makes the WordPress accessible via the internet and load balances the incoming traffic across the pods.

**Data Consistency**: MySQL deployment uses persistent volumes mounted as storage to ensure that data is not lost on pod failure or restart. Using 2 replicas enables redundancy, although true replication and failover must be managed by additional configurations or operators in Kubernetes.

**Handling Database Failures**: The lack of automatic failover in this simple setup means manual intervention might be required for database consistency or to promote a replica to primary. Automating this can be achieved by using an operator like the Percona XtraDB Cluster operator or similar.

**Scaling**: Scaling automatically based on traffic can be managed by implementing Horizontal Pod Autoscalers for both WordPress and MySQL (though scaling MySQL correctly is non-trivial and might often require additional clustering software or a Kubernetes Operator).

**Security**: The use of secrets to manage database passwords helps mitigate risks of accidental exposure. The specifics of the secret creation are not detailed here and should be handled using secure practices.

### Security Implications:
- Network security should be reinforced by additional rules, possibly Network Policies in Kubernetes.
- Volumes should be encrypted at rest to ensure data protection.
- Regular updates and security scanning for container images should be instituted.

This configuration should be adjusted based on specific requirements and after a security and performance analysis, including cloud provider specifics if applicable.