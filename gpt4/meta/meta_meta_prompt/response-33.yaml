Here is a Kubernetes YAML manifest designed for deploying a WordPress website with a MySQL database, considering scalability, security, resource efficiency, maintenance, monitoring, and disaster recovery.

```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-deployment
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-deployment
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  namespace: wordpress-deployment
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  replicas: 1 # Consider increasing replicas for redundancy.
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  replicas: 3  # Initial replica count, autoscale based on metrics.
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
        resources:
          requests:
            cpu: 300m
            memory: 500Mi
          limits:
            cpu: 500m
            memory: 1Gi
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
    tier: frontend
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  ports:
  - port: 3306
  selector:
    app: wordpress
    tier: mysql
  type: ClusterIP
```

### Explanation:

1. **Scalability**:
   - Horizontal scaling is managed by increasing the number of replicas for the WordPress deployment based on traffic. MySQL uses a single replica due to its stateful nature but can be configured to use a master-slave replication for scalability.
   - Vertical scaling is handled through resource limits and requests that are defined for each container.

2. **Security**:
   - Sensitive data like the MySQL password is managed using Kubernetes Secrets.
   - Network policies would be necessary to restrict traffic between the pods and external sources, though not included in this YAML for brevity.
   - Employing encryption at rest using Kubernetes Secrets and PV encryption, and TLS for data in transit.

3. **Resource Efficiency**:
   - Resource requests and limits are set to ensure that the containers have enough resources under normal conditions but are also restricted from using excessive resources.

4. **Maintenance and Monitoring**:
   - Health checks (readiness and liveness probes) would be used but are omitted here for brevity.
   - Monitoring could be set up using Prometheus to collect metrics and Grafana for visualization.
   - Autoscaling based on CPU usage or other metrics can be managed by Horizontal Pod Autoscalers.

5. **Disaster Recovery**:
   - Persistent Volumes (PVs) and Persistent Volume Claims (PVCs) are used to ensure data persistence across pod recreation.
   - In case of node failure, Kubernetes' controller will reschedule the MySQL pod to a healthy node, and data will persist through the PVCs.

This YAML configuration provides a fundamental, illustrative setup that you can extend and modify according to the specific requirements and environmental considerations of your deployment scenario.