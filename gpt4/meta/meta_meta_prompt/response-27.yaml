```yaml
# WordPress Deployment and MySQL with High Availability and Security
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-deployment
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Discussion on Key Aspects of the Configuration:

1. **Multi-region Deployment:**
   - This manifest can be combined with Kubernetes federation to manage deployments across multiple regions. 
   - By selecting geographically distributed regions, the service can benefit from improved latency for users close to each region and ensure data redundancy and disaster recovery.

2. **Security Best Practices:**
   - Usage of Kubernetes secrets to handle sensitive data (like database passwords).
   - Implementing network policies (not defined in this YAML for simplicity but should be considered) to restrict traffic flow to only necessary communications between WordPress and MySQL.
   - Pod Security Policies could be configured to restrict running pods as non-root users.

3. **Resource Optimization:**
   - Defining CPU and memory requests ensures the scheduler places the pods on nodes that can cater to their needs, while limits ensure that each pod doesn't consume more than its fair share, preserving node stability.
   - Autoscaling wasn't explicitly shown but can be managed through Horizontal Pod Autoscaler based on metrics like CPU and memory utilization.

4. **Persistent Volume Considerations:**
   - `PersistentVolumeClaim` for MySQL ensures data persistence across pod restarts.
   - Choice of storage type affects performance. For production, use high performance SSDs based Cloud Volumes.

5. **Monitoring & Logging Strategy:**
   - Deploy monitoring solutions like Prometheus to capture metrics and Grafana for visualization.
   - Integrate fluentd or a similar tool for log aggregation.

This configuration introduces extensive opportunities for scalability and resilience improvements in global high availability scenarios. Adjust according to specific compliance and performance needs.