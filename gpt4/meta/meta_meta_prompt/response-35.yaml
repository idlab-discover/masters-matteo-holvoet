```yaml
# This Kubernetes manifest file defines a scalable WordPress site with a MySQL backend, incorporating support for multiple environments, data persistence, security best practices, and probes for health checking.

apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 
kind: StatefulSet
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 15
          periodSeconds: 20
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 3
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 20
          periodSeconds: 30
      volumes:
      - name: wordpress-pv-storage
        persistentVolumeClaim:
           claimName: wordpress-pvc

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wordpress-network-policy
  namespace: wordpress
spec:
  podSelector:
    matchLabels:
      app: wordpress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: wordpress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql

# Note: This manifest assumes previously created PVCs for WordPress Storage and predefined values for secret management using environment specific values.
```

### Configuration Choices Justification:

- **StatefulSet for MySQL**: Ensures that there is a stable identifier for the MySQL instance, helping with persistent data management. Using a PVC ensures that deletes on the StatefulSet do not affect data.

- **Secrets Management**: Securely manages the MySQL password, encrypting it within Kubernetes and providing controlled access to containers.

- **Liveness and Readiness Probes**: 
  - WordPress: Probes help ensure the application is alive and ready to serve traffic, improving reliability.
  - MySQL: Validates that the service is capable of accepting connections, enhancing robustness.

- **Network Policies**: Restricts communication within the application, limiting potential attack vectors.

- **Scalability and Environment Differentiation**: Could be enhanced by varying the replicas and resources according to the environment (set via CI/CD based on parameters).

### Continuous Integration and Deployment:
Using CI/CD pipelines such as Jenkins or GitHub Actions, updates to the YAML files or application code can trigger deployments across the multiple environments. Configuration parameters (like replica count and resources) can be handled differently for each environment by substituting these values during the deployment process.

Environmental impact considerations include using efficient resource requests to minimize unnecessary costs and environmental impact.