```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-system

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-system
type: Opaque
data:
  password: YWRtaW4=  # Base64 encoding of 'admin'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-system
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_USER: root
  WORDPRESS_DB_PASSWORD: password
  WORDPRESS_DB_NAME: wordpress

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard # Considered for general use. For production, consider high-performance options like 'pd-ssd' in GCP.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-system
spec:
  replicas: 3  # Initial replica set to 3, consider AutoScaler for dynamic scaling based on traffic.
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: wordpress-config
        env:
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-system
spec:
  replicas: 1  # Fixed to 1 for simplicity; in production consider using StatefulSet for replication.
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-system
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-system
spec:
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app: mysql
```

Explanation:
1. **Namespace**: 'wordpress-system' to isolate the resources.
2. **Secret** and **ConfigMap**: Used to manage sensitive configurations and application configurations separately.
3. **PersistentVolumeClaim**: Utilized for MySQL for data persistence. 'standard' storage class is the default; high-performance classes might be considered based on the need.
4. **Deployments** and **Services**:
   - WordPress: Deployment with scalability in mind. Service is exposed via LoadBalancer to receive traffic from the Internet.
   - MySQL: Uses a basic deployment, best handled by StatefulSets in real-world scenarios for better handling of state and identity.
5. **Environment Variables**: Managed via ConfigMap and Secrets are injected directly to safeguard sensitive data.
6. **MySQL**: Secured root password via Secret.

This approach incorporates best practices of scalability, security, and maintainability within a Kubernetes environment.