```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-deployment
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-deployment
data:
  # Configuration details can be added here.
  WORDPRESS_DB_HOST: mysql-service:3306
  WORDPRESS_DB_CHARSET: utf8mb4
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-deployment
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: base64_encoded_password # You should replace `base64_encoded_password` with actual base64 encoded password value
  MYSQL_USER: base64_encoded_user
  MYSQL_PASSWORD: base64_encoded_password
  MYSQL_DATABASE: base64_encoded_database_name
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  namespace: wordpress-deployment
spec:
  replicas: 3 # Scalability: Start with three replicas
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest # Ensure to use the latest stable tag/version
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: wordpress-deployment
spec:
  replicas: 2 # High availability
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7 # Use a specific MySQL version known for stability and performance
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-deployment
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-deployment
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
```

The configuration above:
- Sets up a namespace for organization and clear resource grouping.
- Uses ConfigMaps and Secrets for configuration data management.
- Deploys WordPress and MySQL with multiple replicas for reliability and better load distribution.
- Persistent storage is utilized for MySQL to prevent data loss.
- Exposes WordPress via a LoadBalancer to distribute incoming traffic efficiently.
- Incorporates both horizontal scaling (via the number of replicas) and possible vertical scaling (not directly shown but can be adjusted by tuning resources for each pod).
- Implements security best practices such as secrets management and the use of specific, stable container versions.