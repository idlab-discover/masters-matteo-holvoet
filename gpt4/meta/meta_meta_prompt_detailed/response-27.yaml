```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-ns
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-config
  namespace: wordpress-ns
data:
  # Generic MySQL service configuration
  MYSQL_DATABASE: wordpressdb
  MYSQL_USER: wpuser
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-ns
type: Opaque
data:
  mysql-password: c2VjdXJlcGFzc3dvcmQ=  # Encoded value: securepassword
  mysql-root-password: dWx0cmFzZWN1cmVwYXNzd29yZA==  # Encoded value: ultrasecurepassword
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: wordpress-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 45
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-ns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-ns
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  namespace: wordpress-ns
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:php7.4-fpm-alpine
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql-service
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: MYSQL_DATABASE
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /wp-admin/install.php
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /wp-admin/install.php
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-ns
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This YAML configuration includes a Namespace to encapsulate all resources, a ConfigMap for non-sensitive configurations, and Secrets for sensitive values. MYSQL and WordPress Deployments use these configurations for interconnection. The deployment configures health checks to ensure service reliability. PersistentVolumeClaims ensure data preservation across MySQL restarts. Services provide internal cluster access for MySQL and external access for WordPress. This configuration aims at operational efficiency, security, and scalability, examining alternatives like using StatefulSets for MySQL for possibly better data consistency capabilities, and considering more advanced CI/CD practices for schema updates on deployments.