```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace

---
# ConfigMap for WordPress
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-namespace
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_USER: wordpressuser

---
# Secret for MySQL and WordPress
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-namespace
type: Opaque
data:
  mysql-password: "cGFzc3dvcmQ=" # base64 of 'password'
  mysql-root-password: "cm9vdHBhc3N3b3Jk" # base64 of 'rootpassword'
  wordpress-db-password: "d29yZHByZXNzcGFzcw==" # base64 of 'wordpresspass'

---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_USER
          value: wordpressuser
        - name: MYSQL_DATABASE
          value: wordpress
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-namespace
spec:
  type: ClusterIP
  ports:
  - port: 3306
  selector:
    app: mysql

---
# PersistentVolumeClaim for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
# WordPress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: wordpress-db-password
        ports:
        - containerPort: 80

---
# WordPress Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress

---
# Role for Secret and ConfigMap Management
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-config-manager
  namespace: wordpress-namespace
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# RoleBinding for Secret and ConfigMap Management
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-config-manager-binding
  namespace: wordpress-namespace
subjects:
- kind: ServiceAccount
  name: default
  namespace: wordpress-namespace
roleRef:
  kind: Role
  name: secret-config-manager
  apiGroup: rbac.authorization.k8s.io
```

This manifest enforces best practices in security and manages application configurations and secrets for a WordPress site connected to a MySQL backend. It includes persistence for the MySQL database and roles and role bindings to manage access to critical Kubernetes resources securely.