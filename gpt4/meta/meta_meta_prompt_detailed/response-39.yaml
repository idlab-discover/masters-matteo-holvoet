```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-site
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-site
type: Opaque
data:
  password: d3JkUHIxc3Mh # base64 encoded password (example: wrdPr1ss!)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: wordpress-site
data:
  my.cnf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-site
spec:
  replicas: 3 # Scalability: Manage load effectively
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.8-php7.4-apache
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql-service
        - name: WORDPRESS_DB_USER
          value: wp_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          value: wordpressDB
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-site
spec:
  strategy:
    type: Recreate
  replicas: 2 # High availability
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          value: wordpressDB
        - name: MYSQL_USER
          value: wp_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-site
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-site
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-site
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
```
This Kubernetes YAML setup leverages best practices for scalability, manageability, and security. Each component is crafted with a specific role in optimizing performance and ensuring data security through various aspects.

1. **Namespace**: A dedicated namespace `wordpress-site` isolates the environment to facilitate management and security.
2. **Secrets and ConfigMaps**: Usage of Secrets for sensitive information like the database password, and ConfigMaps for MySQL configuration, mitigates risk and enhances manageability. Secrets are key to security for sensitive data handling.
3. **Deployments**:
   - For **WordPress**, multiple replicas (scalability) and environment variables linking to the database via Secrets (security).
   - For **MySQL**, High availability with the use of multiple replicas and strategy type "Recreate" to ensure proper sequence during updates or failures.
4. **PersistentVolumeClaim** is used for MySQL to ensure data persistence and durability even if the pod goes down, configured for a high volume storing large sets of data over a sustained period.
5. **Services**:
   - **WordPress** exposed through a LoadBalancer for external traffic, optimizing accessibility.
   - **MySQL** internally accessed with ClusterIP, focusing on security by not exposing the database to external traffic.

This architecture provides a resilient platform, balancing loads thoughtfully and attuned to the demands of maintaining a secure and consistent online presence.