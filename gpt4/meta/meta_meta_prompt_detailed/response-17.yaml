```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_PORT: "3306"
  WORDPRESS_DB_NAME: wordpressdb
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWxQYXNz
  MYSQL_USER: d29yZHByZXNz
  MYSQL_PASSWORD: d29yZHByZXNzUGFzcw==
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:5.7-php7.4-apache
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
```

This YAML setup outlines a Kubernetes configuration for deploying a WordPress site with a MySQL backend tailored for high availability and scalability:

1. **ConfigMap and Secrets**: Security is boosted by using Kubernetes Secrets for sensitive information, encrypting at rest as part of default Kubernetes handling and utilizing ConfigMaps for non-sensitive data.

2. **MySQL Backing**: Utilizing a StatefulSet for MySQL ensures stable persistent storage and predictable naming conventions useful for scaling and management operations.

3. **Persistent Volume Claim**: Is essential for data persistence across pod re-creations, crucial for databases like MySQL.

4. **WordPress Deployment**: High availability is achieved through multiple replicas, wherein traffic is distributed across multiple instances, aiding during high load.

5. **Services**: The MySQL service uses a ClusterIP to facilitate discovery within cluster. The WordPress service, on the other hand, uses a LoadBalancer to distribute external traffic to multiple replicas.

6. **Scaling and High Availability**: The scenario assumes a future need for scaling MySQL by adjusting the StatefulSet's replicas and similarly scaling WordPress by modifying the number of deployment replicas. Monitoring and autoscaling can be facilitated by integrating Kubernetes metrics.

This not only improves resilience against failures but also maximizes uptime during various operation challenges. The design anticipates the use of Kubernetes native strategies and other methodologies to ensure a secure, scalable, and robust deployment.