```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-deployment

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-deployment
type: Opaque
data:
  password: <base64-encoded-password>

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-deployment
data:
  WP_DB_HOST: mysql:3306
  WP_DB_USER: wordpress

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WP_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WP_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-deployment
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-deployment
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-deployment
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
  clusterIP: None

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wordpress-network-policy
  namespace: wordpress-deployment
spec:
  podSelector:
    matchLabels:
      app: wordpress
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
```

This setup balances requirements for a resilient, secure, and scalable WordPress deployment. It uses Kubernetes' native constructs like ConfigMaps, Secrets, and NetworkPolicies to enhance security and manageability. The deployment strategies for WordPress and MySQL are chosen to optimize uptime and data integrity. Rolling updates minimize downtime for WordPress, while recreating strategy in MySQL ensures a consistent database state following any updates.