Certainly! Here's a single, consolidated YAML file containing the entire Kubernetes setup to deploy a WordPress website backed by a MySQL database:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-password: YOUR_BASE64_ENCODED_PASSWORD # Replace YOUR_BASE64_ENCODED_PASSWORD with your base64-encoded password

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
  - nodePort: 30080
    port: 80
    targetPort: 80
  selector:
    app: wordpress
```

This YAML file is structured to follow the best practices and includes secret management, persistent storage, and a deployment strategy for both MySQL and WordPress. Make sure to replace `YOUR_BASE64_ENCODED_PASSWORD` with your actual base64-encoded password for MySQL. This setup assumes your Kubernetes cluster has the default storage class configured to dynamically provision storage, or that appropriate PVs are available for binding to the specified PVCs. 

Please ensure all YAML indentation is correct when deploying. You can apply this configuration file using a command such as:

```bash
kubectl apply -f wordpress-mysql.yaml
```

This should deploy everything you need to get a WordPress site up and running on your Kubernetes cluster.