Certainly! Below is the complete YAML configuration in a single file to deploy a WordPress website with a MySQL backend on Kubernetes. This entire setup includes Persistent Volume Claims, a Secret for passwords, Deployments for both MySQL and WordPress, and Services to expose both applications.

```yaml
apiVersion: v1
kind: List
items:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: mysql-pv-claim
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: wp-pv-claim
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  - apiVersion: v1
    kind: Secret
    metadata:
      name: mysql-pass
    type: Opaque
    data:
      password: cGFzc3dvcmQ=  # "password" base64-encoded; please replace with your actual password encoded in Base64

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: mysql
    spec:
      selector:
        matchLabels:
          app: mysql
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: mysql
        spec:
          containers:
            - image: mysql:5.7
              name: mysql
              env:
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-pass
                      key: password
              ports:
                - containerPort: 3306
                  name: mysql
              volumeMounts:
                - name: mysql-persistent-storage
                  mountPath: /var/lib/mysql
          volumes:
            - name: mysql-persistent-storage
              persistentVolumeClaim:
                claimName: mysql-pv-claim

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: wordpress
    spec:
      selector:
        matchLabels:
          app: wordpress
      template:
        metadata:
          labels:
            app: wordpress
        spec:
          containers:
            - image: wordpress:latest
              name: wordpress
              env:
                - name: WORDPRESS_DB_HOST
                  value: mysql
                - name: WORDPRESS_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-pass
                      key: password
              ports:
                - containerPort: 80
                  name: wordpress
              volumeMounts:
                - name: wordpress-persistent-storage
                  mountPath: /var/www/html
          volumes:
            - name: wordpress-persistent-storage
              persistentVolumeClaim:
                claimName: wp-pv-claim

  - apiVersion: v1
    kind: Service
    metadata:
      name: mysql
    spec:
      ports:
        - port: 3306
      selector:
        app: mysql

  - apiVersion: v1
    kind: Service
    metadata:
      name: wordpress
    spec:
      ports:
        - port: 80
      selector:
        app: wordpress
      type: LoadBalancer
```

### Instructions:
1. **Create the Manifest**: Copy this complete configuration into a file, e.g., `wordpress-mysql-deployment.yml`.
2. **Deploy**: Use the command `kubectl apply -f wordpress-mysql-deployment.yml` to apply this configuration to your Kubernetes cluster.
3. **Verification**: Check the deployment status via `kubectl get all` to ensure everything is up and running properly. Access WordPress on the external IP provided if using a LoadBalancer in a cloud setup.

Remember, the password used in the secret should be base64 encoded and securely generated. Replace `cGFzc3dvcmQ=` with your own secret in production environments.