Here is the complete Kubernetes YAML file put together, ensuring it adheres to YAML syntax and including your requirements for deploying WordPress with a MySQL backend. Make sure to replace `YOUR_BASE64_ENCODED_PASSWORD` with a Base64 encoded password before applying the YAML.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD  # Replace this with an actual base64-encoded password
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Key Points in the Configuration:
- **Secrets**: Securely stores the MySQL database password.
- **Persistent Volume Claims**: Manages disk storage space for MySQL and WordPress.
- **Deployments**: Defines the deployment strategy, Docker containers to use, and environmental setup for both MySQL and WordPress.
- **Services**: MySQL service is set to `ClusterIP: None` making it accessible only within the cluster. WordPress is exposed on port 80 using a `LoadBalancer`, making it accessible from the internet.

### Usage:
Before applying this file with `kubectl`, replace the placeholder `YOUR_BASE64_ENCODED_PASSWORD` with your password encoded in base64 format:

```bash
echo -n 'yourpassword' | base64
```

Then, deploy using:

```bash
kubectl apply -f your_file_name.yaml
```

Ensure your cluster supports LoadBalancer-type services, often provided by cloud-based Kubernetes services like GKE, AKS, or EKS.