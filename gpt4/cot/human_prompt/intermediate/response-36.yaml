To deploy a WordPress website with MySQL as its backend on Kubernetes, we need to first create several resources:
1. **Secrets** – to safely store sensitive information like the database password.
2. **Persistent Volumes (PVs) and Persistent Volume Claims (PVCs)** – to ensure data persists even if the pods are destroyed.
3. **Deployments** – for both MySQL and WordPress, including correctly linking them.
4. **Services** – to expose and load balance the applications.

Here is a step-by-step breakdown of the YAML configurations for each of these resources:

### Step 1: Define Secrets

Secrets are used to store and manage sensitive data. For this setup, we will store the MySQL root password and WordPress database password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-user-password: <base64-encoded-password>
```
Replace `<base64-encoded-password>` with your actual base64 encoded passwords. You can generate a base64-encoded password using: `echo -n 'yourpassword' | base64`.

### Step 2: Persistent Volume Claims

We need persistent storage for MySQL and WordPress. Here, we'll create PVCs assuming that the PVs exist or that dynamic provisioning will fulfill our claim.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Deployments

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-user-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 4: Services

Finally, we define services to expose the MySQL and WordPress pods.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Deploying the Configuration

1. Save these configurations in a YAML file, such as `wordpress-mysql-deployment.yaml`.
2. Apply the configuration using Kubernetes command line tool (kubectl):
   ```sh
   kubectl apply -f wordpress-mysql-deployment.yaml
   ```
3. Monitor the deployment and ensure all pods are running:
   ```sh
   kubectl get pods
   ```

These steps cover a basic scenario for deploying WordPress with MySQL on Kubernetes. For a production environment, consider additional aspects such as more robust storage solutions, better database configuration, and tighter security practices.