Creating a Kubernetes YAML manifest for a WordPress website with a MySQL database can be approached by defining several key components: PersistentVolumes, PersistentVolumeClaims, Deployments, Services, and Secrets (for sensitive data like database credentials). Below, I'll guide you through setting up each component step by step. 

### Step 1: Create a Secret
To start, we'll create a Kubernetes Secret to handle the MySQL database credentials. This helps in keeping the sensitive data secure.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
```
Replace `YOUR_BASE64_ENCODED_PASSWORD` with your actual MySQL password encoded in Base64.

### Step 2: Persistent Volumes (Optional for local setups)
For data persistence, you'll need persistent storage. This can be skipped in learning environments. If skipped, remove the volume claims in the deployments.

### Step 3: MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 4: MySQL Service
This service will expose MySQL inside the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: WordPress Deployment
Here, we set up the WordPress deployment which connects to the MySQL database created earlier.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

### Step 6: WordPress Service
This service exposes WordPress to the internet or local network.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### PersistentVolumeClaim (PVC) example:
For data persistence, we need to define PVCs for both MySQL and WordPress:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
```

These basic resources will set up a WordPress website using MySQL as its database in Kubernetes. Deploy them in the same namespace, and ensure your Kubernetes cluster has volume provisioning supported if you include PVCs. Adjust memory, CPU limits, and storage volumes based on your environment needs.