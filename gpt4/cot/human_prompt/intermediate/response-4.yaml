To create a WordPress website with a MySQL database in Kubernetes, we will use a persistent volume for storage requirements, secret management for secure credentials storage, a deployment configuration for MySQL, a service to expose MySQL within the cluster, a deployment configuration for WordPress, and a service to expose WordPress externally. Below, I will guide you through creating these components using YAML manifests. 

1. **Persistent Volume Claim (PVC):** We need persistent storage for MySQL and WordPress to ensure data persists across pod restarts. Here, I'll create two PVCs.

2. **Secrets:** Securely store the database credentials.

3. **MySQL Deployment:** This will set up the MySQL database.

4. **MySQL Service:** A service to allow communication between the WordPress and MySQL pods.

5. **WordPress Deployment:** This configures and runs the WordPress application.

6. **WordPress Service:** This exposes WordPress to the outside world using a LoadBalancer or NodePort.

Let's go step-by-step for each component, including necessary configurations.

### Step 1: Persistent Volume Claims

Create two separate PVCs, one for MySQL and one for WordPress.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 2: Secrets

Store the MySQL root password and the WordPress database password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-password: "dG9wLXNlY3JldA==" # base64 encoded password, e.g., "top-secret"
```

### Step 3: MySQL Deployment

Set up MySQL with the secret for the password.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 4: MySQL Service

Expose MySQL within the Kubernetes cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: WordPress Deployment

Deploy WordPress configured to connect to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 6: WordPress Service

Expose WordPress to the outside world.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Final Notes

- The `mysql-password` should be replaced with a base64 encoded actual password you wish to use.
- The `image` values used for MySQL and WordPress should correspond to your specific version needs or use the latest, as I have exemplified.
- Before applying these YAML resources, make sure your Kubernetes cluster supports the type of persistent volumes and LoadBalancer services. If using a cloud provider, these might automatically handle provisioning.

Deploy these resources by saving each configuration block into a separate `.yaml` file and using `kubectl apply -f <filename>.yaml` for each file, or combine them all into one file separated by `---` and apply it at once.