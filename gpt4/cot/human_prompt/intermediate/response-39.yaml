Creating a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database involves several steps and resources. You will need to:

1. Create a Persistent Volume (PV) or use a StorageClass for dynamic provisioning.
2. Set up a Persistent Volume Claim (PVC) for both WordPress and MySQL for persistent storage.
3. Deploy MySQL as a StatefulSet or Deployment with a Service.
4. Deploy WordPress as a Deployment with a Service.
5. Configure environment variables such as database access credentials securely, typically using Secrets.

Below, I'll provide a basic example YAML file that creates these components step by step.

### Step 1: Create Secrets for MySQL password
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
```
*Note: You must replace `YOUR_BASE64_ENCODED_PASSWORD` with your actual password, base64 encoded.*

### Step 2: MySQL Deployment and Service
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 3: MySQL PersistentVolumeClaim
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: WordPress Deployment and Service
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Step 5: WordPress PersistentVolumeClaim
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

This setup defines the basic single-instance MySQL and WordPress with persistent storage and a standard password-as-a-secret approach. It's crucial to adjust access controls and resource allocations based on the specific requirements and constraints of your environment, especially for production use. For instance, you might want to add readiness probes, liveness probes, and maybe even a custom `StorageClass` depending on your cloud or bare-metal setup.