To successfully deploy a WordPress website with a MySQL database backend on Kubernetes, you'll need several components, including Persistent Volume Claims (PVCs) for storage, Deployments for running the WordPress and MySQL applications, and a Service to expose WordPress to users. Below, I will break down the process step-by-step and provide a YAML manifest for each component.

### 1. Persistent Volume Claims

Persistent volume claims are used to manage storage resources. For MySQL and WordPress, youâ€™d typically want separate PVCs.

**MySQL PVC:**
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

**WordPress PVC:**
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### 2. MySQL Deployment

We will deploy MySQL using a Kubernetes Deployment. Make sure to replace `yourpassword` with a strong password.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: yourpassword
        - name: MYSQL_DATABASE
          value: wordpress
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### 3. MySQL Service

To allow WordPress to connect to MySQL using its DNS name within the cluster, create a service for MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

### 4. WordPress Deployment

Now for deploying WordPress and linking it to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          value: yourpassword
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### 5. WordPress Service

Finally, expose WordPress on HTTP port 80 using a LoadBalancer to make it accessible from the internet.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Complete Setup

All these components (YAML files) should be placed in sequence or combined into one multi-document YAML file to deploy WordPress and MySQL on a Kubernetes cluster. Apply these configurations using `kubectl apply -f <filename>.yaml`.

This workflow sets up minimal WordPress and MySQL setups. For production, consider factors like secrets management, more resilient storage, resource limits, scaling, and security hardening.