Hereâ€™s the complete Kubernetes YAML configuration file that defines the necessary resources to deploy a WordPress website with a MySQL backend:

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-password: "YOUR_BASE64_ENCODED_PASSWORD"  # Update this with your base64 encoded password

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Usage Instructions:
1. **Base64 Encoding**: Replace `"YOUR_BASE64_ENCODED_PASSWORD"` with the Base64-encoded password for MySQL. Ensure you encode your plain text password using `echo -n 'yourpassword' | base64`.
2. **File Deployment**: Once you've replaced the password, save this YAML file (e.g., `wordpress-mysql.yml`) and deploy it to your Kubernetes cluster using `kubectl apply -f wordpress-mysql.yml`.
3. **Service Exposure**: The WordPress service is set up with a type of `LoadBalancer`, which makes it accessible through an external IP on supported Kubernetes environments (like cloud providers). Check the service status using `kubectl get svc wordpress` to find the external IP if applicable.

This configuration separates concerns effectively (secret management, storage persistence, and stable networking) and facilitates a straightforward maintenance process. Adjustments may be necessary depending on your specific cloud or on-premises environment configurations.