Certainly! Below is a neatly formatted comprehensive YAML file that sets up WordPress along with a MySQL backend, fulfilling the requirements mentioned:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: verysecret
        - name: MYSQL_DATABASE
          value: wordpress
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          value: verysecret
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  type: LoadBalancer
  selector:
    app: wordpress
```

### Detailed Explanation:

1. **Persistent Volume Claims (PVCs)**: There are two PVCs declared, one for each MySQL and WordPress. These claims help manage dynamic storage allocation for the pods.

2. **MySQL Deployment**: This deployment manages the MySQL container. It mounts the PVC and sets up environmental variables necessary for MySQL configuration, such as root password and database name.

3. **MySQL Service**: A headless service (`clusterIP: None`) is provided for MySQL, facilitating the pod-to-pod communication within the cluster by the service name.

4. **WordPress Deployment**: Deploys the WordPress instance, linking it to the MySQL database through environmental variables. It also mounts a PVC for persistent storage.

5. **WordPress Service**: This service applies a LoadBalancer to expose WordPress to the internet, allowing external traffic to access the blog on port 80.

This configuration sets up a basic WordPress site with a MySQL backend in a Kubernetes cluster with considerations for persistent storage and interconnectivity. Adjust the password and other sensitive values accordingly in a more secure way (using Kubernetes Secrets or similar) when deploying in a production environment.