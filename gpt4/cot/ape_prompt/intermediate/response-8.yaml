Creating a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database involves setting up several components including Deployments, Services, and Persistent Volumes to maintain the state. Below, I'll outline a step-by-step YAML manifest for deploying WordPress and MySQL in Kubernetes.

### Step 1: PersistentVolumeClaim

Persistent Volume Claims (PVCs) are used to provision storage for your MySQL and WordPress containers. Here are basic configurations:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 2: MySQL Deployment

We need to create a deployment for MySQL with the necessary environment variables (such as the root password).

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: yourpassword # Use a secure password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 3: MySQL Service

Expose MySQL as a service:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment

Create a deployment for WordPress that connects to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          value: yourpassword # This should match the MYSQL_ROOT_PASSWORD
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 5: WordPress Service

Expose WordPress via a service, typically using type `LoadBalancer` for cloud environments or `NodePort` for local or minimal environments:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Combining All Together

Combine all the snippets into a single YAML file, separated by triple-dashed lines (`---`). Make sure to replace `yourpassword` with an actual strong password or better yet, use Kubernetes secrets for storing such sensitive information.

This manifest provides a basic, not production-ready setup intended for learning and development purposes. In production, consider enhancements such as using ConfigMaps, Secrets, better storage solutions, resource requests and limits, and security contexts.
