To deploy a WordPress website with a MySQL database backend on Kubernetes, you'll need to create several components:

1. **Persistent Volume Claims (PVCs)** for MySQL and WordPress to store data.
2. **Secrets** to securely store the MySQL database credentials.
3. **Deployments** for both MySQL and WordPress containers.
4. **Services** to expose and load balance the applications.

Let's go through each of these components step by step and create a YAML manifest file for each of them.

### Step 1: Persistent Volume Claims (PVCs)
Persistent volume claims are needed for both MySQL and WordPress to ensure data persistence across pod restarts and failures.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 2: Secrets
Secrets will be used to store MySQL user credentials securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <root-password>
  mysql-user: <user>
  mysql-password: <password>
```
For `<root-password>`, `<user>`, and `<password>`, you need to replace these placeholders with base64-encoded strings. For example, to generate a base64-encoded password, you can do `echo -n 'mypassword' | base64` from your command line.

### Step 3: Deployment for MySQL
We will create a deployment for the MySQL server next.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 4: Service for MySQL
Let's expose MySQL within the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: Deployment for WordPress
We need a deployment for the WordPress application.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 6: Service for WordPress
Finally, expose WordPress on a LoadBalancer so that it's accessible from the internet.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

You should apply each of these manifests in your Kubernetes environment. Use the command `kubectl apply -f <filename.yaml>` to create these resources. Adjust resources and configurations as necessary depending on your actual use case needs (e.g., storage, version specifications).