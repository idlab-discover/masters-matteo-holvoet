Creating a Kubernetes YAML manifest for a WordPress website using MySQL as the backend involves several steps. We'll need to define Kubernetes objects such as Secrets, Deployments, Services, and Persistent Volume Claims. Here's how to break down the process and create the necessary YAML configuration:

### Step 1: Create a Secret to Store MySQL Password

This secret stores the password for the MySQL root user and WordPress MySQL user. Secrets are safer than plain ConfigMaps for sensitive data.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: bXlzcWxyb290cGFzc3dvcmQ=  # Encoded string "mysqlrootpassword"
  mysql-password: bXlzcWxwYXNzd29yZA==        # Encoded string "mysqlpassword"
```

### Step 2: Deploy MySQL

MySQL will be deployed with a Persistent Volume Claim (PVC) for persistent storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 3: Create a Service for MySQL

This allows other pods to communicate with the MySQL database.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: Deploy WordPress

A deployment for WordPress with a connection to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 5: Create a Service for WordPress

A service to expose WordPress on a network.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Notes
1. You should encode your own passwords using base64 for the Secret configuration.
2. Depending on the environment (cloud provider or local), the exact storage class for PVCs and method to expose your WordPress service might vary.
3. Apply this configuration with `kubectl apply -f <filename.yaml>`.

This manifest sets up WordPress and MySQL with basic persistent volume claims, services for internal communication, and secrets for password management.