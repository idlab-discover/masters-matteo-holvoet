Creating a Kubernetes deployment for a WordPress website with a MySQL database involves several components including Deployments, Services, Persistent Volumes, and Secrets. Below is a detailed step-by-step Kubernetes YAML manifest for this.

### Step 1: Create the Secret for MySQL Password

We first need to create a Kubernetes secret to securely store the MySQL database credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD_HERE
```

Replace `YOUR_BASE64_ENCODED_PASSWORD_HERE` with the base64 encoded form of your desired password (you can generate this using `echo -n 'yourpassword' | base64`).

### Step 2: Define the MySQL Deployment

Create a Deployment for MySQL using the secret for the password.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 3: Define the MySQL Service

Expose the MySQL deployment as a service for WordPress to connect.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: Define PersistentVolumeClaim for MySQL

Ensure that MySQL data persists using a PersistentVolumeClaim.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 5: Define the WordPress Deployment

Now, deploy WordPress and connect it to the MySQL service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
```

### Step 6: Define the WordPress Service

Expose WordPress as a service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Step 7: Define PersistentVolumeClaim for WordPress

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

**Deploying**
1. Create the secrets, PVCs, deployments, and services.
2. Apply each of these configurations using `kubectl apply -f <filename>.yaml`.

**Notes**
- Ensure your cluster has a persistent volume provisioner if you do not pre-create Persistent Volumes.
- Adjust the storage sizes as necessary for your expected usage.
- Review and modify image versions if different versions are desired.
- This setup expects a LoadBalancer type service, which is generally provided by cloud providers. For on-premise solutions, this might need adjustment.

With these steps, you will have created a simple yet robust WordPress deployment on Kubernetes using MySQL as the backend database.