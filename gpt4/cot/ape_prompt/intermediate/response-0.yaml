Creating a Kubernetes deployment for a WordPress website along with a MySQL database involves multiple components:
1. Persistent Volume (PV) and Persistent Volume Claim (PVC)
2. Secrets for storing sensitive information like database credentials
3. Deployments for WordPress and MySQL
4. Services to expose and load-balance the applications

We'll outline each of these components in YAML format.

### 1. Persistent Volume Claims
First, we'll define the PVCs for WordPress and MySQL for storage persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 2. Secrets for MySQL
Here, we specify the MySQL root password and the WordPress database password in Kubernetes secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  # Replace 'your-root-password' and 'your-wordpress-db-password' with base64 encoded values
  mysql-root-password: eW91ci1yb290LXBhc3N3b3Jk
  mysql-user-password: eW91ci13b3JkcHJlc3MtZGItcGFzc3dvcmQ=
```

### 3. MySQL Deployment
Now let's create the MySQL deployment using the MySQL image and the secret created earlier.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### 4. WordPress Deployment
This deployment will utilize the WordPress image and connect to the MySQL database using details from the secrets.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### 5. Services
Finally, create services for both WordPress and MySQL to expose the applications.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

Review and apply these configurations to set up WordPress with a MySQL backend on your Kubernetes cluster. Adjust the storage size, version of images, and secrets as per the production requirement and environment standards.