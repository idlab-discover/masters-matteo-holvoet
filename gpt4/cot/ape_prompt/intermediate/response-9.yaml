Certainly! To deploy a WordPress website using a MySQL database on Kubernetes, you'll need to create a few YAML manifests to set up the MySQL deployment, the WordPress deployment, and their respective services. Let's start.

### Step 1: Create MySQL Deployment

We'll begin by creating a Deployment for MySQL. This will include defining the MySQL database container, setting up environment variables for the MySQL database (like root password, user, and database name), and ensuring persistent storage for the database.

1. **MySQL Secret** to store sensitive data like passwords.
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cm9vdHBhc3M=  # Encoded root password (rootpass)
  MYSQL_USER: d29yZHByZXNz        # Encoded username (wordpress)
  MYSQL_PASSWORD: d29yZHByZXNzcGFzcw==  # Encoded password (wordpresspass)
  MYSQL_DATABASE: d29yZHByZXNz        # Encoded database name (wordpress)
```
(Note: the values here are base64 encoded; you should change and encode your own secrets.)

2. **MySQL Deployment**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

For persistence, a PersistentVolumeClaim (PVC) is referenced (`mysql-pvc`), which you need to create based on your clusterâ€™s storage class.

3. **MySQL PVC**
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

4. **MySQL Service**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

### Step 2: Create WordPress Deployment

Next, set up the WordPress Deployment which connects to the MySQL database.

1. **WordPress Deployment**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
```

2. **WordPress Service**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This setup creates a LoadBalancer which exposes the WordPress application to the internet.

### Deployment Notes:

- Make sure to apply these manifests in the correct order: Secrets -> PVCs -> Deployments -> Services.
- Adjust storage sizes as per the expected load and availability in your cluster.

Copy and apply each of these YAML blocks using kubectl to create the environment in your Kubernetes cluster, for example:
```bash
kubectl apply -f <filename>.yaml
```

This setup should provide a basic, scalable WordPress installation on Kubernetes. Adjustments may be necessary based on your specific cluster configuration or for production use.