Creating a Kubernetes manifest to deploy a WordPress site with MySQL involves defining several components: Persistent Volumes (PVs), Persistent Volume Claims (PVCs), Deployments, Services, and Secrets to manage configurations and sensitive data like passwords. I'll guide you step-by-step through the process, ultimately leading to a complete YAML file.

### Step 1: Define Persistent Volumes
We'll start by defining PVs to ensure data persistence for both WordPress and MySQL.

#### MySQL Persistent Volume

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"
```

#### WordPress Persistent Volume

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"
```

### Step 2: Define Persistent Volume Claims
These PVCs will claim storage from the PVs defined above.

#### MySQL PVC

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 20Gi
  selector:
    matchLabels:
      type: local
```

#### WordPress PVC

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 10Gi
  selector:
    matchLabels:
      type: local
```

### Step 3: Define Secrets for MySQL
To securely pass sensitive information like the MySQL root password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
```

### Step 4: MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

### Step 6: Services for MySQL and WordPress
This will expose MySQL within the cluster and WordPress to the outside.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

These YAML configurations collectively deploy WordPress with a MySQL backend on Kubernetes, each with persistent storage and secure handling of sensitive credentials. Adjust the `YOUR_BASE64_ENCODED_PASSWORD` in the Secret for MySQL correctly. Use the following command to base64 encode a password:

```sh
echo -n 'yourpassword' | base64
```

Replace `'yourpassword'` with your real password before encoding. This manifest assumes that the Kubernetes environment allows storage via `hostPath` and external access via `LoadBalancer`, which might need adjustments based on specific cloud or local environments.