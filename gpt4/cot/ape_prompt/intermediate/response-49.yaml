Sure, we can create a Kubernetes YAML manifest to deploy both WordPress and MySQL. Here, I'll break down the configuration into parts including the MySQL deployment and the WordPress deployment. Note that you need to customize some parts like secrets or environment variables as per your cluster's actual setup.

### Step 1: Define the MySQL Deployment
First, we will define the MySQL deployment and a persistent volume to store the database data persistently.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: BASE64_ENCODED_PASSWORD
  mysql-password: BASE64_ENCODED_PASSWORD

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_DATABASE
          value: wordpress
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
           claimName: mysql-pv-claim
```

### Step 2: Deploy MySQL Service
Define a service to expose MySQL within the Kubernetes cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 3: Define the WordPress Deployment
Now, we define the WordPress deployment, which connects to the MySQL database.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 4: Deploy WordPress Service
Finally, define a service to expose the WordPress deployment.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Deployment Steps Summary
1. Substitute `BASE64_ENCODED_PASSWORD` in the Secrets resource with the actual base64-encoded password.
2. Apply these YAML configurations using kubectl, something like `kubectl apply -f <filename>.yaml`.
3. Ensure your Kubernetes cluster supports LoadBalancer service type if you are running this in a cloud environment; otherwise, adjust the service type accordingly (e.g., NodePort or ClusterIP for local setups).

This will set up a basic WordPress site with a MySQL backend in a Kubernetes environment. Adjust resource requests, storage sizes, and other configurations as needed based on your workload and environment specifics.