To deploy a WordPress website using MySQL as the backend on Kubernetes, we’ll need to create several components:

1. **Persistent Volume** for MySQL and WordPress, to ensure data persistence.
2. **Persistent Volume Claim** for MySQL and WordPress to claim the use of a volume.
3. **Secret** to store sensitive information like MySQL passwords.
4. **Deployment** for both MySQL and WordPress.
5. **Service** to expose both MySQL and WordPress pods.

For simplicity, let's try a basic example without high availability or redundancy considerations.

### Step 1: Persistent Volumes
Since the type of environment (cloud, on-premise) isn't specified, I’ll define hostPath as the storage for simplicity. In production, you should use a more robust storage solution (e.g., dynamic provisioning with PVCs).

### Step 2: Persistent Volume Claims
PVCs will be used by MySQL and WordPress. 

### Step 3: Secrets
We must create a Kubernetes Secret to handle the MySQL password.

### Step 4: Deployment
We will create a deployment for MySQL and WordPress.

### Step 5: Service
We need services to expose MySQL within the cluster and WordPress to outside users.

Here's the YAML for the entire setup:

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

**Explanation**:
- **Persistent Volumes** (`hostPath`) are created to hold data for MySQL and WordPress.
- **Persistent Volume Claims** are defined to request physical storage from the volumes.
- **Secret** is used to store the MySQL root password safely.
- **Deployments** for MySQL and WordPress define how pods are to be created, including the environment variables and volume mounts.
- **Services** expose the deployments, with WordPress exposed via a LoadBalancer to facilitate external access.

**Note**: Before applying these manifests:
- Replace `YOUR_BASE64_ENCODED_PASSWORD` with your actual base64 encoded password for MySQL.
- Review and ensure volume paths are suitable and exist on your cluster nodes.
- This configuration is quite basic and is not suitable for production environments without adaptations like security improvements, proper storage solutions, etc.