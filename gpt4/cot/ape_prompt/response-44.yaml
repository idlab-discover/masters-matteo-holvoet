Certainly! Below is a complete single YAML file that includes the deployment of both WordPress and MySQL, the services to expose them, and the secrets needed for passwords. This can be deployed directly onto a Kubernetes cluster, forming a simple yet functional WordPress environment.

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cm9vdF9wYXNzdzByZA==  # Example Base64-encoded value: "root_passwd"
  MYSQL_PASSWORD: d3BfcGFzczB3ZA==  # Example Base64-encoded value: "wp_pass0wd"

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          value: wordpress
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### A few pointers about the YAML file:

- **Secrets:** The passwords for the MySQL root and WordPress database are stored in base64-encoded format. Please encode your own passwords and replace them accordingly.
- **Deployments:** There are separate deployments for MySQL and WordPress with their specific configurations.
- **Persistent Volume Claims:** These are used for persistent storage to ensure data persists across pod restarts. Make sure your Kubernetes cluster supports and properly configures these claims.
- **Services:** They expose MySQL and WordPress. The WordPress service specifically uses a load balancer to make the site accessible from outside the cluster.

This configuration sets up a simple, functional WordPress site backed by a MySQL database, all within a Kubernetes environment. Adjust storage, resource requests, and other settings based on your specific needs and environment.