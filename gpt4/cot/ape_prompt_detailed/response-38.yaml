Below is the consolidated YAML file to deploy WordPress with a MySQL backend in Kubernetes, formatted and wrapped properly within ```yaml blocks for easy copy and paste:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: MHlwYXNzd29yZA==  # Example: echo -n 'mysqlpassword' | base64
  mysql-password: d3BwYXNzd29yZA==     # Example: echo -n 'wppassword' | base64

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-user: wordpress
  mysql-database: wordpressdb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  wordpress-table-prefix: wp_
  wordpress-db-host: mysql-service:3306

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-host
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: WORDPRESS_TABLE_PREFIX
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-table-prefix
        ports:
        - containerPort: 80
      volumes:
        # If needed, specify volumes here

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### How to Use This Manifest

Copy and paste the above YAML into a file (`deploy.yaml`), then apply it to your Kubernetes cluster using:

```bash
kubectl apply -f deploy.yaml
```

Ensure you replace the base64-encoded passwords with your actual passwords before applying the YAML.

This setup will create all the necessary Kubernetes objects to have a WordPress site running with a MySQL database backend, with persistent storage configured for MySQL to ensure data retention across pod restarts.