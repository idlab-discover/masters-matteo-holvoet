Certainly! Below is a comprehensive YAML file combining all the necessary resources to deploy a WordPress application with a MySQL backend on Kubernetes, using ConfigMaps, Secrets, PersistentVolumeClaims, and Services.

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: <base64-encoded-password>  # <-- Replace with your base64-encoded password

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-mysql-config
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wordpress
  MYSQL_ROOT_PASSWORD: rootpassword  # Not used directly for safety.

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wp-mysql-config
              key: MYSQL_DATABASE
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wp-mysql-config
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wp-mysql-config
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Instructions to deploy:

1. Ensure to replace `<base64-encoded-password>` with your actual base64-encoded MySQL password.
2. Save this file as `wordpress-mysql-deployment.yml` or another suitable name.
3. Deploy this configuration to your Kubernetes cluster using:

```bash
kubectl apply -f wordpress-mysql-deployment.yml
```

This will set up WordPress connected to a MySQL backend, with MySQL data persisted using a PVC, and sensitive data managed using Kubernetes secrets and configuration data using ConfigMaps. The WordPress service is exposed with a `LoadBalancer`, which allows access to the service from external sources depending on your cluster and cloud provider configuration.