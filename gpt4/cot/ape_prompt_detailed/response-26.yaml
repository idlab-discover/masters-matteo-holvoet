Sure, let's consolidate all the components into a single YAML file correctly formatted for deployment:

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: BASE64_ENCODED_PASSWORD  # Replace with your Base64 encoded password

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  user: wordpress
  database: wordpress

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: password
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mysql-config
                key: database
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: mysql-config
                key: user
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Steps to Deploy:

1. **Save** this YAML file locally as `wordpress-mysql.yaml`.
2. **Deploy** this into your Kubernetes cluster using:
   ```bash
   kubectl apply -f wordpress-mysql.yaml
   ```

### Notes:
- The MySQL password must be Base64 encoded. You can encode your password using a command like `echo -n 'yourpassword' | base64`.
- This YAML file will create all resources in the default namespace. You might want to consider creating and using a specific namespace for better isolation and management.
- Make sure your Kubernetes cluster has a default storage class unless you want to specify a particular one in the PVC definition.
- The WordPress service is using `LoadBalancer` to expose it to the internet, which works on cloud providers that support LoadBalancer services. For other environments, consider using NodePort or Ingress.