Certainly! Below is the single, consolidated YAML file containing the entire configuration necessary to deploy a WordPress site with a MySQL database on Kubernetes, including all components discussed previously. The file is properly formatted and each section is clearly labeled.

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YmFzZTY0LWVuY29kZWQtcGFzc3dvcmQ=  # base64 encoded password (example: echo -n "mysecretpassword" | base64)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  user: "root"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: user
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

**Instructions for use**:
1. Save the above content to a file, for example `wordpress-mysql.yaml`.
2. Deploy to your Kubernetes cluster using: `kubectl apply -f wordpress-mysql.yaml`.
3. Ensure your Kubernetes cluster supports the `LoadBalancer` type if you expect external traffic. If not, adjust the service type accordingly or use an ingress. 

Replace the base64-password placeholder with an actual base64-encoded password before deploying. This file sets up everything needed for a basic WordPress and MySQL deployment on Kubernetes. Adjustments may be required based on your specific Kubernetes environment and requirements.