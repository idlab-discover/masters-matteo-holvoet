Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database involves defining several Kubernetes objects including Deployments, Services, PersistentVolumes, PersistentVolumeClaims, ConfigMaps, and Secrets. Below is a step-by-step tutorial on how to configure these components.

### Step 1: Define ConfigMaps and Secrets

Let's start by creating a ConfigMap for MySQL configurations and a Secret for storing sensitive information such as the MySQL root password and WordPress database password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: cm9vdHBhc3N3b3Jk  # Base64 encoded value (example: rootpassword)
  mysql-password: d3BwYXNz  # Base64 encoded value (example: wppass)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  my.cnf: |
    [mysqld]
    sql_mode=NO_ENGINE_SUBSTITUTION
    bind-address=0.0.0.0
```

### Step 2: MySQL Deployment and Service

Next, create a Deployment for the MySQL database, using a PersistentVolumeClaim for data storage, and a Service to expose the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-config-volume
          mountPath: /etc/mysql/conf.d
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
      - name: mysql-config-volume
        configMap:
          name: mysql-config
          items:
          - key: my.cnf
            path: my.cnf

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 3: PersistentVolumeClaim for MySQL

Define a PersistentVolumeClaim for MySQL to ensure data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: WordPress Deployment and Service

Now, set up the WordPress Deployment and a Service to expose the WordPress site.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Step 5: Applying the Manifest

Save the complete YAML manifest to a file, for example, `wordpress-mysql.yaml`. Apply this manifest using the following kubectl command:

```bash
kubectl apply -f wordpress-mysql.yaml
```

This setup ensures that WordPress interacts with the MySQL service through the configured credentials and environment variables, with persistent data storage, and appropriate configuration management for both services.