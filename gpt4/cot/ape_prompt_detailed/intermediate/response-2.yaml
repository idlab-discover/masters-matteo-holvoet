Certainly! To address your request, I will create a Kubernetes YAML manifest step-by-step which contains a deployment for WordPress with its appropriate database backend MySQL. This configuration will use ConfigMaps for non-sensitive data configuration and Secrets to handle sensitive data like database passwords. It will also include a Deployment each for WordPress and MySQL, as well as services for network connectivity, and PersistentVolumeClaims for MySQL for data persistence.

### Step 1: Define the Secret for MySQL Password

Let's first create a Secret to securely store the MySQL root password:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD
```

Replace `YOUR_BASE64_ENCODED_PASSWORD` with your actual base64 encoded password. Use `echo -n 'your_password' | base64` in the command line to encode your password.

### Step 2: Define the ConfigMap

Now we will set up a ConfigMap which will store configuration values that are not sensitive:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: root
```

### Step 3: MySQL Deployment and Service

Next, we define the MySQL Deployment with a PersistentVolumeClaim:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
      metadata:
        labels:
          app: mysql
      spec:
        containers:
        - name: mysql
          image: mysql:5.6
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
        volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment and Service

Now, create the WordPress Deployment and its Service:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
          - name: WORDPRESS_DB_HOST
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_HOST
          - name: WORDPRESS_DB_USER
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_USER
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-pass
                key: password
          - name: WORDPRESS_DB_NAME
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_NAME
        ports:
          - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This configuration covers the deployment of a WordPress instance with a MySQL backend, including the required deployments, services, volumes, ConfigMaps, and secrets. Adjust the resource requests, limits, and storage size according to your actual needs. Make sure that you apply these configurations in an environment where the Kubernetes Load Balancer and Persistent Volumes are supported, typically in a managed Kubernetes environment.