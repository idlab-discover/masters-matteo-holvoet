Certainly! Let's create the Kubernetes YAML manifest step by step, ensuring all requirements are met. Weâ€™ll start by defining the secret for sensitive MySQL data, follow up with a ConfigMap for MySQL configurations, create Deployments for MySQL and WordPress, define PersistentVolumeClaims for MySQL, and then expose the required services.

### Step 1: Define Secrets for MySQL

Secrets are used to store sensitive data like passwords. Here we are defining the MySQL root password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: bXlzcWwtcm9vdC1wYXNzd29yZA==  # Base64 encoding of "mysql-root-password"
```

### Step 2: Create ConfigMaps for MySQL and WordPress Configurations

ConfigMaps hold non-confidential data in key-value pairs. This data can be used in your Kubernetes pods. Here, let's assume basic configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  my.cnf: |
    [mysqld]
    sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 
    # Include any other MySQL configurations here

apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-configmap
data:
  wp-config.php: |
    <?php
    define( 'DB_NAME', 'wordpress' );
    define( 'DB_USER', 'root' );
    define( 'DB_PASSWORD', 'root' );
    define( 'DB_HOST', 'mysql:3306' );
    # Plus any additional configuration as required for WordPress
```

### Step 3: MySQL Deployment

Here we define a Deployment for MySQL which uses the secret for its credentials and a volume claim for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 4: PersistentVolumeClaim for MySQL

PersistentVolumeClaims are requests for storage by a user.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 5: WordPress Deployment

Define another deployment for the WordPress application.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
```

### Step 6: Expose Services

Lastly, define the Kubernetes Services to allow traffic to MySQL and WordPress.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql

apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
  selector:
    app: wordpress
```

With these steps, we've built a full configuration for a WordPress site with a MySQL backend, utilizing secrets for sensitive data, deployment strategies, persistent storage, and exposing services. Ensure you apply these manifests in your Kubernetes cluster to see them in action.