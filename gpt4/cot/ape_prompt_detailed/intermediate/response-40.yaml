To create a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database, we will need to include several components. Below are the steps to create the configuration, including Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims, as you've outlined:

### Step 1: ConfigMap and Secret for Environment Variables

Let's start by defining `ConfigMap` and `Secret` to store environmental variables and sensitive data respectively.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_NAME: wordpress_database
  WORDPRESS_DB_USER: wordpress_user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: "rootpassword"  # You should change this to a more secure password.
  MYSQL_PASSWORD: "wordpresspassword"  # You should also change this for production.
```

### Step 2: PersistentVolumeClaim for MySQL

To ensure data persistence for MySQL, we'll set up a `PersistentVolumeClaim`.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Deployments for MySQL and WordPress

Now we define the `Deployment` for MySQL and WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_NAME
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
```

### Step 4: Services for MySQL and WordPress

Finally, let's define the `Service` objects for MySQL and WordPress to enable connectivity.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Summary:

This YAML manifest sets up a WordPress site with a MySQL backend using Kubernetes. It creates a PersistentVolumeClaim for data durability in MySQL, uses a ConfigMap for non-sensitive data, secrets for sensitive data, and appropriately configured deployments and services for both applications. Make sure to apply this configuration with correct access and security considerations in a production environment.