Certainly! Below, we'll create a complete Kubernetes YAML manifest that satisfies all the outlined requirements in a structured manner. We'll split the contents into parts: ConfigMap, Secret, PersistentVolumeClaims, Deployments, and Services for both the WordPress and MySQL components. Each block is intended to be part of the same YAML file. We'll use sequence documents (---) to split sections for clarity.

### Step 1: Define ConfigMap
ConfigMaps are used to store configuration settings that can be used by pods.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_PORT: "3306"
  WORDPRESS_DB_USER: wordpress
  WORDPRESS_DB_NAME: wordpressdb
```

### Step 2: Define Secret
Secrets are used for storing sensitive data like passwords.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-password: <base64-encoded-wordpress-database-password>
```

* **Note**: Remember to replace `<base64-encoded-password>` and `<base64-encoded-wordpress-database-password>` with actual base64 encoded values. You can encode your passwords by running `echo -n "yourpassword" | base64` in the shell.

### Step 3: Define PersistentVolumeClaims
PersistentVolumeClaims (PVCs) will be used by MySQL for persistent storage.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
```

### Step 4: MySQL Deployment
This deployment config describes the MySQL container with good security practices and persistent storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
```

### Step 5: MySQL Service
The service defines network access to the MySQL pod.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
```

### Step 6: WordPress Deployment
This deployment config describes the WordPress container setup using defined environment variables and port details.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        ports:
        - containerPort: 80
---
```

### Step 7: WordPress Service
This service enables network access to the WordPress pod.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
``` 

These steps cover all the elements from the initial scenario: ConfigMaps and Secrets for configuration and sensitive data management, PersistentVolumeClaims for MySQL data persistence, and respective Deployments and Services needed to deploy WordPress with MySQL as the backend. Make sure to apply this manifest in your Kubernetes cluster using `kubectl apply` command. Each component will contribute to a robust WordPress deployment orchestrated by Kubernetes.