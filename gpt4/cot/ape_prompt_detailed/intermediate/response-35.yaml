Certainly, let’s proceed to create a complete Kubernetes YAML manifest that includes everything you requested for deploying a WordPress website with a MySQL database. We'll break it down into several parts for clarity:

### Step 1: Create a ConfigMap for MySQL Configuration
This ConfigMap can be used to store configuration settings that the MySQL container will use.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-database: wordpress
  mysql-user: wordpress
  mysql-password: wordpress
```

### Step 2: Create a Secret for MySQL Password
It’s important to store sensitive information like the MySQL root password in a Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
```
*Replace `<base64-encoded-password>` with the actual base64 encoded password.*

### Step 3: MySQL Deployment and Service
This section creates a Deployment for MySQL, which includes a PersistentVolumeClaim for data persistence, and a Service to expose MySQL within the cluster.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: PersistentVolumeClaim for MySQL
This PersistentVolumeClaim provides the storage that the MySQL database will use.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 5: WordPress Deployment and Service
Here, we create a Deployment for WordPress, configured with the necessary environment variables for connecting to the MySQL database, and a Service to expose WordPress to the internet.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-password
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

Once you put all these components together in a single YAML file and properly configure the values (like `base64-encoded-password`), you can deploy it to your Kubernetes cluster using `kubectl apply -f filename.yaml`. This manifest comfortably sets up WordPress with a MySQL backend, using best practices of separating secrets and configurations, and ensuring data persistence through volumes.