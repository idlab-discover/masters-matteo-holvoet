Certainly! We'll create a Kubernetes YAML manifest with all the components specified, designed for a functional setup of WordPress with a MySQL backend. Here's how we'll break it down:

1. **ConfigMap**: To hold reusable configuration like MySQL hostname.
2. **Secret**: To store sensitive data like MySQL root password and WordPress database password.
3. **PersistentVolumeClaim (PVC)**: To provide persistent storage for MySQL.
4. **Deployments**: For MySQL and WordPress with necessary environment configurations.
5. **Services**: To allow network access to MySQL and WordPress.

### Step 1: Define ConfigMap and Secret

#### ConfigMap
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  MYSQL_HOST: wordpress-mysql
```

#### Secret
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: "base64-encoded-password"
  MYSQL_USER_PASSWORD: "base64-encoded-user-password"
```
Replace `"base64-encoded-password"` and `"base64-encoded-user-password"` with your actual base64 encoded values.

### Step 2: Define PersistentVolumeClaim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Deployments for MySQL and WordPress

#### MySQL Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-mysql
spec:
  selector:
    matchLabels:
      app: wordpress-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress-mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-secret
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### WordPress Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: MYSQL_HOST
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-secret
              key: MYSQL_ROOT_PASSWORD
        - name: WORDPRESS_DB_NAME
          value: wordpress
```

### Step 4: Services for MySQL and WordPress

#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
spec:
  selector:
    app: wordpress-mysql
  ports:
  - port: 3306
```

#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
```

### Summary
This Kubernetes configuration includes:
- **ConfigMap** for common non-sensitive data.
- **Secret** for sensitive credentials.
- **PersistentVolumeClaim** to ensure data persists.
- **Deployments** for both MySQL and WordPress tailored with environment configurations.
- **Services** to expose and load balance WordPress while allowing internal communication for MySQL.

Deploy this using `kubectl apply -f <filename>.yaml`, ensuring you generate appropriate base64 values for the secrets prior to deployment.