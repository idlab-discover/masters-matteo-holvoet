To create a Kubernetes deployment to run WordPress with a MySQL database backend, you'll need several components including Deployments, Services, ConfigMaps, Secrets, and Persistent Volume Claims. Hereâ€™s the process broken down into individual Kubernetes resources defined in a YAML manifest file:

### Step 1: Create a ConfigMap for MySQL

ConfigMaps are used to provide configuration parameters as non-confidential data to containers.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress
```

### Step 2: Create a Secret for MySQL credentials

Secrets are used to store and manage sensitive information.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-user: d29yZHByZXNz
  mysql-password: c2VjcmV0cGFzc3dvcmQ=
```
**Note:** Data values (e.g., username and password) in Kubernetes secrets are base64 encoded.

### Step 3: Create PersistentVolumeClaim for MySQL

This will claim storage space from the cluster for MySQL data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Create a Deployment for MySQL

This deployment utilizes the MySQL image, with environment variables mapped from the Secret and ConfigMap, along with the PVC for data storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Service for MySQL

This defines a service to expose MySQL within the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None # This makes it a headless service
```

### Step 6: Deployment for WordPress

This will run WordPress, connecting it to the MySQL database via environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
```

### Step 7: Service for WordPress

This exposes the WordPress deployment on a network.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

Deploy these YAML manifests by saving them into a single file or multiple files and use kubectl to apply these resources to your Kubernetes cluster:

```bash
kubectl apply -f <filename>.yaml
``` 

Let me know if you need more details or further assistance!