Certainly, let's create a Kubernetes YAML manifest structured as follows:

1. **ConfigMap**: For storing non-sensitive data like the MySQL database name, user, etc.
2. **Secrets**: For handling sensitive data like the MySQL database password.
3. **PersistentVolumeClaim (PVC)**: To ensure data persistence for the MySQL database.
4. **Deployments**: One for WordPress and one for MySQL, each tailored to their unique requirements.
5. **Services**: To allow connectivity between WordPress, MySQL, and potentially external access for WordPress.

### Step 1: ConfigMap
We'll start by creating a ConfigMap to store MySQL configuration details that are not sensitive:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-database: wordpress
  mysql-user: wpuser
```

### Step 2: Secrets
Next, we'll define a Secret to securely store the MySQL database password:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-password: c2VjdXJlcGFzc3dvcmQ=  # Base64 encoded value (example: 'securepassword')
```

### Step 3: PersistentVolumeClaim
We will create a PersistentVolumeClaim for the MySQL storage:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: MySQL Deployment
Set up the MySQL Deployment:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: MySQL Service
Define a Service to expose MySQL:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 6: WordPress Deployment
Here's the WordPress Deployment:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
```

### Step 7: WordPress Service
Finally, create a Service for WordPress:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

This comprehensive YAML setup provides a solid base for deploying WordPress with a MySQL backend on Kubernetes, utilizing best practices regarding configuration management, security, and data persistence.