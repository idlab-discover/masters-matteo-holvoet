Sure, mapping this out as requested requires creating several Kubernetes components. Here's a comprehensive Kubernetes YAML manifest meeting the stipulated criteria. This step will be broken down into several parts for a better understanding of each component:

1. **ConfigMap** for MySQL to hold database configurations.
2. **Secret** to securely hold sensitive data like MySQL root password.
3. **PersistentVolumeClaim (PVC)** for MySQL to ensure data persists.
4. **Deployment** for MySQL with a reference to the PVC.
5. **Service** for MySQL to allow network access to the database.
6. **Deployment** for WordPress configured to communicate with MySQL.
7. **Service** for WordPress to expose the blog to the internet.

Let's define these components in a Kubernetes YAML file.

### Step 1: ConfigMap for MySQL Configuration

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-database: wordpress
  mysql-user: wp_user
```

### Step 2: Secret for sensitive data

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: bXktc2VjcmV0LXBhc3N3b3Jk   # base64 encoded value of 'my-secret-password'
  mysql-password: d3AtcGFzcw==               # base64 encoded value of 'wp-pass'
```

### Step 3: PersistentVolumeClaim for MySQL data persistence

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: Deployment for MySQL

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Service for MySQL

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 6: Deployment for WordPress

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
```

### Step 7: Service for WordPress

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
  - port: 80
  selector:
    app: wordpress
```

This YAML setup contains the complete configuration for deploying both MySQL and WordPress in a Kubernetes environment, using ConfigMaps and Secrets for configuration and sensitive data management. Deploy this by saving the YAML into a file and applying it with `kubectl apply -f <filename>.yaml`. Make sure to replace the base64 values in the Secret with your own password values encoded in base64.