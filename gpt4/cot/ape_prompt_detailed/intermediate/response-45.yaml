To create a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend, we can break down the required components and tackle each one step by step. Below, I will show you how to define the manifest files for this application setup:

### Step 1: Define ConfigMaps and Secrets

ConfigMaps can be used to store non-sensitive configuration data, such as the database hostname. Secrets, on the other hand, will securely store sensitive data, such as database usernames and passwords.

1. **MySQL Secret**
   ```yaml
   apiVersion: v1
   kind: Secret
   metadata:
     name: mysql-pass
   type: Opaque
   data:
     password: cGFzc3dvcmQ=  # Base64 encoding of 'password'
   ```

2. **WordPress ConfigMap**
   ```yaml
   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: wp-config
   data:
     WORDPRESS_DB_HOST: mysql-service
     WORDPRESS_DB_USER: wordpress
     WORDPRESS_DB_PASSWORD: password
     WORDPRESS_DB_NAME: wordpress
   ```

The password `password` when used must be base64 encoded when creating Secrets in Kubernetes. Make sure to use your own secure password and encode it accordingly before using it.

### Step 2: MySQL Deployment with PersistentVolumeClaim

This step sets up our MySQL backend.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          value: password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 3: MySQL PersistentVolumeClaim

This defines the persistent storage requirement for MySQL.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: MySQL Service

This service will expose the MySQL deployment inside the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 5: WordPress Deployment

This step sets up the WordPress frontend.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: wp-config
```

### Step 6: WordPress Service

This service will make the WordPress frontend accessible.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: NodePort
  ports:
  - port: 80
  selector:
    app: wordpress
```

This YAML configuration consists of the potential building blocks for the described setup. Save these configurations in `.yaml` files and apply them to your Kubernetes cluster with the `kubectl apply -f <filename>.yaml` command.