Certainly! I'll guide you step-by-step through creating a Kubernetes YAML manifest to deploy a WordPress site with a MySQL database backend. This setup will include Deployments, Services, a ConfigMap, a Secret, and PersistentVolumeClaims. We'll make sure to keep configurations and sensitive data appropriately organized.

### Step 1: Define ConfigMap for MySQL Configuration

First, let's create a ConfigMap that contains MySQL configurations.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  my.cnf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
```

### Step 2: Define Secret for MySQL Credentials

Secrets will store the sensitive information such as MySQL user and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  username: bXlzcWx1c2Vy  # base64 encoded MySQL user (e.g., mysqluser)
  password: bXlzcWxwYXNz  # base64 encoded MySQL password (e.g., mysqlpass)
```

### Step 3: PersistentVolumeClaim for MySQL

This YAML defines a persistent volume claim for MySQL to ensure data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: MySQL Deployment

Here’s the deployment manifest for MySQL using the earlier defined ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: MYSQL_DATABASE
              value: wordpress
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
          args: ["--defaults-file=/etc/mysql/my.cnf"]
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: config-volume
          configMap:
            name: mysql-config
            items:
              - key: my.cnf
                path: my.cnf
```

### Step 5: MySQL Service

This defines a service to enable network access to the MySQL deployment.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

### Step 6: WordPress Deployment

This is the deployment manifest for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: WORDPRESS_DB_NAME
              value: wordpress
          ports:
            - containerPort: 80
```

### Step 7: WordPress Service

Lastly, here’s the service for WordPress to make it accessible.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Final Notes

1. For running this in a production environment, ensure more secure settings, larger PVCs, better access modes, and possibly introduce more robust backup mechanisms.
2. Don't forget to apply this configuration in your cluster using `kubectl apply -f <filename>.yaml`.
3. Adjust base64 encoded values in the secret section to match your actual user and password by encoding them using `echo -n 'yourpassword' | base64`.

These steps should deploy a fully functional WordPress website with MySQL as the backend in your Kubernetes cluster.