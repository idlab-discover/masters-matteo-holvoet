Creating a comprehensive Kubernetes YAML manifest to deploy a WordPress website with a MySQL backend involves several components, including Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims. Below, I will guide you through creating the necessary Kubernetes artifacts.

### Step 1: Create a Secret for MySQL Password
To store the MySQL password, we use a Secret. This is sensitive data and should not be hard-coded into your Deployment configuration.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: <base64-encoded-password>
```
Replace `<base64-encoded-password>` with your actual base64 encoded password. You can generate this with:
```bash
echo -n 'yourpassword' | base64
```

### Step 2: Create ConfigMaps for MySQL and WordPress Configuration
ConfigMaps are used to store non-confidential data in key-value pairs. For WordPress, we commonly configure the database name, user, and other settings.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  database_name: wordpress
  database_user: wordpress

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  database_host: mysql
```

### Step 3: Define PersistentVolumeClaim for MySQL
PersistentVolumeClaims (PVCs) are used to persist the database storage.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 4: Create Deployments
We need two deployments: one for MySQL and one for WordPress.

#### MySQL Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database_host
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
        ports:
        - containerPort: 80
```

### Step 5: Create Services for MySQL and WordPress
Services provide stable networking for interacting with the Deployments.

#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
```

#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
  - port: 80
```

Deploying the whole configuration into your Kubernetes cluster will set up a WordPress instance with a MySQL backend. Note that correct PVC provisioning, Secret generation, and ConfigMaps assignments are crucial for a successful deployment.