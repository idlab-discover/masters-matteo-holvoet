Creating this Kubernetes YAML manifest involves several steps, each responsible for setting up different components such as Deployments, Services, ConfigMaps, and Secrets. Hereâ€™s a breakdown of how to craft the manifest:

### Step 1: Define Secrets for the MySQL Database

Sensitive data like MySQL user and root passwords should be stored in Secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-password: <base64-encoded-password>
```

**Note:** Replace `<base64-encoded-password>` with your actual base64 encoded passwords. You can encode a string into base64 by running: `echo -n 'yourpassword' | base64`.

### Step 2: Define ConfigMaps for MySQL and WordPress

ConfigMaps store non-sensitive configuration options.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-user: wordpress
  mysql-database: wordpressdb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  wordpress-table-prefix: wp_
  wordpress-db-host: mysql-service:3306
```

### Step 3: MySQL Deployment and Service

We will create a Deployment for MySQL, using a PersistentVolumeClaim for data persistence, and a Service to expose MySQL.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment and Service

Similar to MySQL but for WordPress. Configuration variables will be supplied via ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-host
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: WORDPRESS_TABLE_PREFIX
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-table-prefix
        ports:
        - containerPort: 80
      volumes:
      # Add any necessary volume mounts here
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Summary

This setup defines the necessary components to run a WordPress website with MySQL as the database backend on Kubernetes. It includes best practices such as using Secrets for sensitive information and ConfigMaps for configuration data, deployments for application management, services for network connectivity, and PVCs for persistent storage for MySQL data. Adjust actual passwords and possibly PVC sizes and properties based on your specific needs.