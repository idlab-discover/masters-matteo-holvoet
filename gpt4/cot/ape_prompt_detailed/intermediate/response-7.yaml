To deploy a WordPress website with a MySQL database in Kubernetes, incorporating the requirements you've requested, we will first need to create several components within a YAML manifest file:

1. **Secrets** to store sensitive data such as MySQL passwords.
2. **ConfigMaps** to manage configuration settings like MySQL's database name, user, etc.
3. **PersistentVolumeClaims (PVCs)** for storing MySQL database files persistently.
4. **Deployments** for both MySQL and WordPress containers.
5. **Services** to expose the WordPress and MySQL pods.

### Step 1: Creating the Secret for MySQL Password

Secrets are used to store and manage sensitive information. We'll start by creating a secret to hold the MySQL root password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
```
*Replace `<base64-encoded-password>` with your own password encoded in Base64.*

### Step 2: Creating the ConfigMap for MySQL Configuration

ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  database: wordpress
  user: wordpress
  password: wp-pass
```

### Step 3: PersistentVolumeClaim for MySQL Data

PersistentVolumeClaims are a request for storage by a user.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: Creating the Deployments

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database
        ports:
        - containerPort: 80
```

### Step 5: Creating the Services
#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```
#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

In this YAML manifest, adjust the base64-encoded MySQL password in the Secret, and potentially adjust the PVC size depending on your needs. This setup configures WordPress to use the MySQL database, with both applications backed by persistent storage and proper access control using Kubernetes services.