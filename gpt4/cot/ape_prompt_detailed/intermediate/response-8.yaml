Absolutely! Let's break down this task and create the Kubernetes YAML manifest file step-by-step. We'll create ConfigMap and Secret for storing configuration and sensitive information, Deployments for both WordPress and MySQL, PersistentVolumeClaims for MySQL, and Services to expose both WordPress and MySQL.

### Step 1: Define ConfigMap for MySQL Configuration

ConfigMaps are used to store non-confidential data in key-value pairs. Here, we're using it to store MySQL configurations.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress_db
```

### Step 2: Define Secret for Sensitive Information

Secrets are used to store sensitive information like passwords.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cm9vdHBhc3M=  # This is 'rootpass' base64 encoded
  mysql-user: d29yZHByZXNz     # 'wordpress' in base64
  mysql-password: d3BwYXNz       # 'wppass' in base64
```

### Step 3: Create PersistentVolumeClaim for MySQL

A PersistentVolumeClaim (PVC) is used to keep SQL data persistent.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: MySQL Deployment

Create a Deployment for MySQL, referring to the Secret and ConfigMap defined previously, and using the PVC for storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 5: MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 6: WordPress Deployment

Now, let's set up the WordPress Deployment, connecting it to the MySQL database using environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
```

### Step 7: WordPress Service

Finally, create a Service for WordPress to make it accessible.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This set of manifests completes the configuration for deploying a WordPress website with a MySQL backend in Kubernetes, using best practices for handling configuration and persistent data. Ensure to apply these configurations in the correct order when deploying to a Kubernetes cluster.