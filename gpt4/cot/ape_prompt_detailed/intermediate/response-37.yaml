To create a Kubernetes manifest for a WordPress website with a MySQL database backend, we will need several components:

1. **ConfigMap** for storing non-sensitive configuration data.
2. **Secret** for storing sensitive configuration data like MySQL passwords.
3. **PersistentVolumeClaim (PVC)** for MySQL data persistence.
4. **Deployments** for both WordPress and MySQL.
5. **Services** to enable network access to the WordPress and MySQL pods.

Let's build this configuration step-by-step:

### Step 1: ConfigMap for MySQL Settings
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress_db
  MYSQL_USER: wordpress_user
```

### Step 2: Secret for Sensitive MySQL Data
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: <base64-encoded-password>
  MYSQL_PASSWORD: <base64-encoded-user-password>
```
**Note:** Replace `<base64-encoded-password>` and `<base64-encoded-user-password>` with your actual base64-encoded passwords. You can generate a base64 version of your passwords using: `echo -n 'yourpassword' | base64`.

### Step 3: PersistentVolumeClaim for MySQL
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Deployment for MySQL
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Service for MySQL
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 6: Deployment for WordPress
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
```

### Step 7: Service for WordPress
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This set of manifests will deploy a WordPress site using MySQL as the database, with all necessary configurations provided via ConfigMaps and Secrets. Persistent data for MySQL is managed through a PVC, ensuring data is not lost when the pod is restarted or moved. The WordPress service is exposed via a LoadBalancer to allow access from the internet (depending on your cloud provider's or environment's capabilities).