Below I'll guide you in creating a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database. This includes setting up ConfigMaps, Secrets, Deployments, PersistentVolumeClaims, and Services. Below is a high-level overview followed by the detailed YAML configurations.

### 1. ConfigMaps and Secrets

**ConfigMap**: Used to store non-sensitive configuration options.

**Secret**: Used for sensitive information like database passwords.

### 2. Deployments

**WordPress Deployment**: Will contain configurations to run the WordPress container and use environment variables defined in ConfigMaps and Secrets.

**MySQL Deployment**: Will ensure MySQL runs with the necessary environment setup and ties to Persistent Volume Claims for data persistence.

### 3. Services

To enable networking between pods and also expose WordPress to the outer network.

### 4. PersistentVolumeClaims

For persistent data storage needs of MySQL.

### Step-by-step YAML Configuration

```yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service:3306
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-password: BASE64_ENCODED_PASSWORD
  mysql-root-password: BASE64_ENCODED_ROOT_PASSWORD

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: wordpress
```

### Explanation

1. **ConfigMap and Secret**: Holds configuration data and sensitive secrets respectively.
2. **MySQL Deployment and Service**: Persistent data storage with a volume claim and a service to communicate within the cluster.
3. **WordPress Deployment and Service**: Configured to communicate with MySQL using environment variables. Exposed on port 30080 of the host machine.

Ensure that the `BASE64_ENCODED_PASSWORD` is replaced with your actual base64-encoded password values before deploying. Use the command `echo -n 'my-password' | base64` to encode your passwords to base64. 

This configuration assumes the existence of a cluster environment that can provide persistent storage. Adjust the PVC storage requests and limits according to the specifications of your environment.