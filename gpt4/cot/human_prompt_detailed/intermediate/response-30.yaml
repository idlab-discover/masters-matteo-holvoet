Sure, let's build this step-by-step. First, we'll create a ConfigMap for some basic WordPress configuration, and a Secret for the sensitive MySQL credentials. Following that, we'll create the Deployments and Services. Finally, we'll establish PersistentVolumeClaims for MySQL data persistence. Here's how you can organize the YAML file for a basic setup:

1. **ConfigMap and Secret**
   
   We start by setting up a ConfigMap for hosting the environment-specific configurations of WordPress and a Secret to hold sensitive information like the MySQL password.

   ```yaml
   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: wordpress-config
   data:
     # Configuration values can be added here
     WORDPRESS_DB_HOST: mysql:3306
     WORDPRESS_DB_NAME: wordpress
     WORDPRESS_TABLE_PREFIX: wp_

   ---
   apiVersion: v1
   kind: Secret
   metadata:
     name: mysql-secret
   type: Opaque
   data:
     # Remember to replace these with base64 encoded values
     mysql-root-password: <base64-encoded-password>
     mysql-user-password: <base64-encoded-user-password>
   ```

   Replace `<base64-encoded-password>` and `<base64-encoded-user-password>` with your actual base64 encoded passwords. Use a command like this to generate a base64 encoded string:
   ```bash
   echo -n 'yourpassword' | base64
   ```

2. **MySQL Deployment and Service**

   Here, we define the MySQL container with a PersistentVolumeClaim for data persistence and a Service for network access.

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: mysql
   spec:
     selector:
       matchLabels:
         app: mysql
     strategy:
       type: Recreate
     template:
       metadata:
         labels:
           app: mysql
       spec:
         containers:
         - name: mysql
           image: mysql:5.7
           env:
           - name: MYSQL_ROOT_PASSWORD
             valueFrom:
               secretKeyRef:
                 name: mysql-secret
                 key: mysql-root-password
           - name: MYSQL_DATABASE
             value: wordpress
           - name: MYSQL_USER
             value: wordpress
           - name: MYSQL_PASSWORD
             valueFrom:
               secretKeyRef:
                 name: mysql-secret
                 key: mysql-user-password
           ports:
           - containerPort: 3306
           volumeMounts:
           - name: mysql-persistent-storage
             mountPath: /var/lib/mysql
         volumes:
         - name: mysql-persistent-storage
           persistentVolumeClaim:
             claimName: mysql-pv-claim

   ---
   apiVersion: v1
   kind: PersistentVolumeClaim
   metadata:
     name: mysql-pv-claim
   spec:
     accessModes:
     - ReadWriteOnce
     resources:
       requests:
         storage: 1Gi

   ---
   apiVersion: v1
   kind: Service
   metadata:
     name: mysql
   spec:
     ports:
     - port: 3306
     selector:
       app: mysql
   ```

3. **WordPress Deployment and Service**

   Now, define the WordPress container, ensuring it is configured to communicate with the MySQL container via the environment variables defined in the ConfigMap.

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: wordpress
   spec:
     selector:
       matchLabels:
         app: wordpress
     template:
       metadata:
         labels:
           app: wordpress
       spec:
         containers:
         - name: wordpress
           image: wordpress:latest
           envFrom:
           - configMapRef:
               name: wordpress-config
           ports:
           - containerPort: 80
           volumeMounts:
           - name: wordpress-persistent-storage
             mountPath: /var/www/html
         volumes:
         - name: wordpress-persistent-storage
           persistentVolumeClaim:
             claimName: wordpress-pv-claim

   ---
   apiVersion: v1
   kind: PersistentVolumeClaim
   metadata:
     name: wordpress-pv-claim
   spec:
     accessModes:
     - ReadWriteOnce
     resources:
       requests:
         storage: 1Gi

   ---
   apiVersion: v1
   kind: Service
   metadata:
     name: wordpress
   spec:
     type: NodePort
     ports:
     - port: 80
       nodePort: 30080
     selector:
       app: wordpress
   ```

This manifest covers the deployment of WordPress with a separate MySQL database, using Kubernetes resources such as Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims. Adjust the volume size, images, and version tags as needed to suit your specific environment or preference.
