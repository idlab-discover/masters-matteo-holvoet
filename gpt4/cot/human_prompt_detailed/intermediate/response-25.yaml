Below is a Kubernetes manifest that sets up a WordPress site using a MySQL database backend. This configuration includes Deployments, Services, a ConfigMap, a Secret, and PersistentVolumeClaims for persistent storage.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-password: YWRtaW4=  # base64 encoded password (e.g., "admin")

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  mysql-user: "wordpress"
  mysql-database: "wordpress"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: mysql-user
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: mysql-database
        ports:
        - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 30080
  selector:
    app: wordpress
```

### Explanation:

1. **Secret**: Stores the MySQL password as a secret to avoid exposing it in plaintext.
2. **ConfigMap**: Contains non-sensitive data like the MySQL user and database name.
3. **PersistentVolumeClaim (PVC)**: Claims persistent disk space for MySQL data storage. This ensures that data persists across pod recreation.
4. **Deployments and Services** for both MySQL and WordPress:
    - MySQL Deployment includes environment variables sourced from the Secret and ConfigMap.
    - WordPress Deployment is configured to connect to MySQL using the information stored in the ConfigMap and Secret.
    - Each component has a Service defined. MySQL service is a simple ClusterIP for internal connectivity. WordPress service is exposed on a NodePort (here chosen as 30080) for external access.
  
**Important Note**: Take care to encode your secrets using base64 as required by Kubernetes secrets configuration. You should manage your passwords and sensitive data properly and not expose them in a real environment as done in this example for demonstration purposes.