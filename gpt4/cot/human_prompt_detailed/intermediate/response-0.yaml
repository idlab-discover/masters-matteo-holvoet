Hereâ€™s how we can create a comprehensive Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend. We'll follow these steps to ensure a structured setup:

1. Define ConfigMaps for non-sensitive configuration data.
2. Create Secrets for storing sensitive data like MySQL credentials.
3. Set up a PersistentVolumeClaim (PVC) for MySQL data persistence.
4. Create Deployments for both WordPress and MySQL.
5. Define Kubernetes Services for network access to both WordPress and MySQL.

### Step 1: Define ConfigMap

The ConfigMap will store configuration settings that can be publicly visible, such as the MySQL database name and MySQL host.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  mysql-database: wordpress
  mysql-host: mysql
```

### Step 2: Create Secret

Secrets are used to store and manage sensitive information such as passwords and user credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-user: <base64-encoded-username>
  mysql-password: <base64-encoded-password>
```

> Note: Replace `<base64-encoded-password>` and `<base64-encoded-username>` with your base64 encoded values. For example, you can use `echo -n 'password' | base64` to encode "password".

### Step 3: PersistentVolumeClaim for MySQL

This definition allows MySQL to store data persistently, which is vital for database management.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: Create Deployments

Now, we need to create Deployments for both MySQL and WordPress.

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-host
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: mysql-database
        ports:
        - containerPort: 80
```

### Step 5: Define Services

Finally, we need Services to allow network access to WordPress and MySQL.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

These services directly expose the WordPress service to the internet and keep the MySQL service only internally accessible, as recommended for better security and performance.

Put all sections together in a `.yaml` file to create and manage the deployment via Kubernetes. This setup should meet the initial requirements for deploying a WordPress site with a MySQL database in a Kubernetes environment. Make sure to replace the secret data with actual base64 encoded strings before applying this configuration.