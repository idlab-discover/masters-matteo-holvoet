To deploy a WordPress website with a MySQL database backend on Kubernetes, we will need several components. We should create:

1. **PersistentVolumes (PV) and PersistentVolumeClaims (PVC)** for data storage for MySQL.
2. **Secrets** to securely store sensitive data like database passwords.
3. **ConfigMaps** to keep re-usable configuration data.
4. **Deployments** for both WordPress and MySQL to manage the lifecycle of the pods.
5. **Services** to allow network access to the WordPress and MySQL from within the cluster.

Below is the Kubernetes YAML manifest, step-by-step as suggested, to achieve the setup:

### Step 1: Creating ConfigMap for MySQL Configuration

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  # Configuration values can be files or parameters.
  my.cnf: |
    [mysqld]
    sql_mode = "STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION"
```

### Step 2: Creating Secret for MySQL Password

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  # Base64 encoding of 'password'
  mysql-root-password: cGFzc3dvcmQ=
  mysql-password: cGFzc3dvcmQ=
```

### Step 3: MySQL Deployment and Service

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        command: ["mysqld"]
        args: ["--ignore-db-dir=lost+found"]
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
```

### Step 4: WordPress Deployment and Service

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-data
          mountPath: /var/www/html
      volumes:
      - name: wordpress-data
        persistentVolumeClaim:
          claimName: wordpress-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
  - port: 80
```

This complete YAML script sets up MariaDB and WordPress on a Kubernetes cluster, providing persistent storage through PVCs, configuration through ConfigMaps, securing sensitive information with Secrets, and allowing pod-to-pod communication through internal Services. Adjust the configurations such as version and resource requests as per your real-world requirements.