Great, let's break down the necessary components for your Kubernetes YAML manifest step by step to create a functional WordPress website with a MySQL backend. We'll need several objects, including Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims.

### Step 1: Define the MySQL Secret

MySQL credentials are sensitive data, hence they should be stored in a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-user-password: <base64-encoded-password>
```
**Note:** Replace `<base64-encoded-password>` with actual base64 encoded values. You can generate these with `echo -n 'password' | base64`.

### Step 2: Define the ConfigMap for MySQL

ConfigMaps store non-confidential data in key-value pairs. MySQL can use this for general configuration.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  mysql-user: "wordpress"
  mysql-database: "wordpress"
```

### Step 3: MySQL Deployment and Service

The MySQL deployment should incorporate the secret for credentials and a PersistentVolumeClaim for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-root-password
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-database
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-user-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: PersistentVolumeClaim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 5: WordPress Deployment and Service

WordPress needs to connect to MySQL, and it exposes a frontend service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
          - name: WORDPRESS_DB_HOST
            value: mysql
          - name: WORDPRESS_DB_USER
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-user
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-user-password
          - name: WORDPRESS_DB_NAME
            valueFrom:
              configMapKeyRef:
                name: mysql-configmap
                key: mysql-database
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This manifest organizes WordPress and MySQL with upper security practices and effective data management. With these objects defined, you'll be able to deploy a WordPress site backed by a MySQL database on your Kubernetes cluster.
