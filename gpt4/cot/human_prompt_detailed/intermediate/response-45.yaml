Certainly, let's break this down step by step and construct the necessary Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend. 

1. **Create ConfigMaps and Secrets**
   - ConfigMap for non-sensitive configuration.
   - Secret for storing sensitive data like database passwords.

2. **Define Deployments**
   - A Deployment for MySQL, utilizing a PersistentVolumeClaim for data persistence.
   - A Deployment for WordPress, appropriately configured to communicate with the MySQL database.

3. **Define Services**
   - A Service for MySQL to allow the WordPress application to communicate with the database.
   - A Service for WordPress to expose the application to external traffic.

### Step 1: Define ConfigMap and Secret

Let's create a ConfigMap for MySQL configurations and a Secret for storing the MySQL root password and WordPress database password.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress_db
  MYSQL_USER: wordpress_user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-password: <base64-encoded-wordpress-database-password>
```

### Step 2: Define the MySQL Deployment and PVC

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Define the MySQL and WordPress Services

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Step 4: Define the WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
```

These YAML files construct a simple WordPress site deployed on Kubernetes with MySQL backend using Deployments, Services, PersistentVolumeClaims, ConfigMaps, and Secrets. Deploying these manifests can be done using a Kubernetes command, for example, `kubectl apply -f <filename>.yaml`. Ensure you replace `<base64-encoded-password>` and `<base64-encoded-wordpress-database-password>` appropriately before deploying. To base64 encode your passwords, you can use `echo -n 'password' | base64` on your command line.