To create a Kubernetes YAML manifest that includes all the requested features for a WordPress site with a MySQL backend, weâ€™ll break down the components and assemble them within a single YAML file. Below, you will find a step-by-step detailing of the various Kubernetes resources needed:

1. **ConfigMap** for storing non-sensitive data.
2. **Secret** for storing sensitive data like MySQL root password.
3. **PersistentVolumeClaim (PVC)** for MySQL storage to ensure data persistence.
4. **Deployments** for both WordPress and MySQL.
5. **Services** to expose both WordPress and MySQL workloads.

Let's write the YAML manifest accordingly:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wordpress

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-password: <base64-encoded-password>  # Replace <base64-encoded-password> with actual base64 encoded password e.g., echo -n 'my-secure-password' | base64

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---

apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Explanation
- **ConfigMap `wordpress-config`** holds configuration for the WordPress application like database hostname, username, and database name.
- **Secret `mysql-secret`** holds the MySQL root password in base64 encoded form.
- **PersistentVolumeClaim `mysql-pv-claim`** ensures that MySQL data persists independent of pod lifecycle.
- **Deployments for MySQL and WordPress** specify the respective containers with associated settings including environment variables linked to ConfigMaps and Secrets.
- **Services (`mysql-service` and `wordpress-service`)** expose the applications. The MySQL service is only reachable within the cluster, while WordPress is exposed externally using a LoadBalancer.

It's crucial to replace `<base64-encoded-password>` with your actual password encoded in Base64. This setup assumes that the cluster can provide persistent storage and a load balancer. Ensure that your Kubernetes environment supports these or make the necessary adjustments to the configuration to fit your setup.