Certainly! Below, I'll walk through the creation of a Kubernetes YAML manifest step by step, fulfilling each of your requirements for deploying WordPress with a MySQL backend.

### Step 1: Define ConfigMaps and Secrets

**ConfigMap** to store non-sensitive data like database name and user:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  database_name: wordpress
  database_user: wordpress_user
```

**Secret** to store sensitive data such as database password:
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-password: cGFzc3dvcmQ=  # Base64 encoded password (e.g., "password")
```

### Step 2: MySQL Deployment and Service

**Deployment** for MySQL with Persistent Volume Claim:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

**PersistentVolumeClaim**:
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

**Service** for MySQL:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 3: WordPress Deployment and Service

**Deployment** for WordPress:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
```

**Service** for WordPress:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Final Notes

- Ensure to encode your secret data (passwords, etc.) in Base64 when creating the `Secret`.
- Adjust the `PersistentVolumeClaim` according to the expected storage needs and available resources.
- The `LoadBalancer` service for WordPress makes it accessible from the internet if your Kubernetes cluster supports it. Adjust it as per your environment needs, perhaps using `NodePort` for minikube or other local setups.

You can now apply these configurations with `kubectl` to set up your WordPress site with a MySQL backend in Kubernetes.