Below, I'll guide you through creating a Kubernetes YAML manifest step by step for deploying a WordPress website with a MySQL as the backend. This setup includes important components like Deployments, Services, Secrets, ConfigMaps, and PersistentVolumeClaims. Each component is tailored as per the requirements specified:

### Step 1: Define Secrets and ConfigMaps

First, you'll need to configure your MySQL credentials and other environment-specific configurations securely using Secrets and loosely using ConfigMaps.

**MySQL Secret**
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql-password: YOUR_BASE64_ENCODED_PASSWORD
```
**WordPress Configuration via ConfigMap**
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_USER: wordpress
```
Replace `YOUR_BASE64_ENCODED_PASSWORD` with the actual base64 encoded password. You can generate one with `echo -n "yourpassword" | base64`.

### Step 2: MySQL Deployment with PersistentVolumeClaim

Set up a MySQL deployment ensuring that data is persistent using PersistentVolumeClaims.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: wordpress
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 3: MySQL Service

Expose MySQL using a Kubernetes service to allow WordPress to connect to the database.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment

Deploy WordPress and configure it to connect to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wp-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: mysql-password
            - name: WORDPRESS_DB_NAME
              value: wordpress
          ports:
            - containerPort: 80
```

### Step 5: WordPress Service

Finally, expose WordPress using a service to enable access from outside the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

Combine all these steps into one or multiple YAML files as fits your organization's deployment practice. This setup ensures secure management of secrets, persistent storage for MySQL, and structured inter-communication between WordPress and MySQL within your Kubernetes cluster.