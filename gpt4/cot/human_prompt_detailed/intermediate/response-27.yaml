Certainly! Below, I will craft a Kubernetes manifest to deploy both WordPress and MySQL in a Kubernetes cluster. We'll use several Kubernetes resources including `Deployment`, `Service`, `ConfigMap`, `Secret`, and `PersistentVolumeClaim`.

### Step 1: Define ConfigMap and Secret

To start, we will set up a `ConfigMap` for MySQL environment variables and a `Secret` for sensitive information (such as MySQL passwords).

**mysql-configmap.yaml**

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  labels:
    app: mysql
data:
  MYSQL_DATABASE: wordpress_db
```

**mysql-secret.yaml**

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  labels:
    app: mysql
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzUUxQMXNzc29yZA==   # Base64 encoded root password: mySQLP1ssword
  MYSQL_USER: d29yZHByZXNz                 # Base64 encoded username: wordpress
  MYSQL_PASSWORD: d29yZHByZXNzMjM=         # Base64 encoded password: wordpress23
```

### Step 2: PersistentVolumeClaim for MySQL

We will configure a `PersistentVolumeClaim` to ensure data persistence for MySQL.

**mysql-pvclaim.yaml**

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Deployments for MySQL and WordPress

Now, let's set up the `Deployment` for both MySQL and WordPress.

**mysql-deployment.yaml**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mysql-config
                key: MYSQL_DATABASE
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

**wordpress-deployment.yaml**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
          - name: WORDPRESS_DB_HOST
            value: mysql:3306
          - name: WORDPRESS_DB_NAME
            valueFrom:
              configMapKeyRef:
                name: mysql-config
                key: MYSQL_DATABASE
          - name: WORDPRESS_DB_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_USER
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_PASSWORD
```

### Step 4: Services for WordPress and MySQL

Finally, the `Service` to enable connectivity to WordPress and MySQL.

**mysql-service.yaml**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

**wordpress-service.yaml**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

This set of manifests will create a WordPress site with a MySQL database backend, making use of persistent volumes for MySQL data, and careful use of secrets for sensitive information management. It configures the network to expose WordPress via a LoadBalancer, keeping MySQL only reachable internally within the cluster. Remember to encode your secrets properly and configure storage based on your cluster's capabilities and requirements.