To create the Kubernetes YAML manifest that fulfills the requirements described, let's break it down into smaller parts:

1. Create `ConfigMap` for MySQL and WordPress common configurations.
2. Create `Secret` for storing sensitive information like MySQL passwords.
3. Setup MySQL with a `Deployment` and `PersistentVolumeClaim` for data persistence.
4. Setup WordPress with a `Deployment` considering the MySQL environment variables it needs.
5. Expose MySQL and WordPress through Kubernetes `Service`.

### Step 1: ConfigMap for Common Configuration

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-wordpress-config
  namespace: default
data:
  # Environment variables for MySQL and WordPress configuration
  MYSQL_DATABASE: wordpress_db
```

### Step 2: Secrets for Sensitive Data

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: default
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: <base64-encoded-password>
  MYSQL_USER: <base64-encoded-user>
  MYSQL_PASSWORD: <base64-encoded-password>
```
*Note: Replace `<base64-encoded-password>` and `<base64-encoded-user>` with actual base64 encoded values.*

### Step 3: MySQL Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: default
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-wordpress-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: default
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: default
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-wordpress-config
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: default
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

Make sure you correctly encode your credentials into Base64 when populating the Secrets. Replace the placeholder for base64 values with actual encoded strings. Use command `echo -n 'yourpassword' | base64` to get base64 encoded string, and apply similarly for other data.

This combined manifest should provide a working deployment of WordPress with a MySQL backend on your Kubernetes cluster. Deploying these configurations enables a basic WordPress website backed by a MySQL database with essentials like persistence and security handled via secrets. Ensure your environment supports LoadBalancers if you're using `type: LoadBalancer` for the WordPress service exposure.