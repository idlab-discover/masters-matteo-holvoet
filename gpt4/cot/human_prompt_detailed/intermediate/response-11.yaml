Let's break down the task into detailed steps and components:

1. **Define Secrets**: This will hold sensitive data such as the MySQL database username, password, and root password.
2. **Define ConfigMaps**: This will contain less-sensitive configuration data that can be included in plaintext, such as the MySQL database name and any other configurable parameters.
3. **Create a PersistentVolumeClaim (PVC)**: This will provide persistent storage for the MySQL database.
4. **Create Deployments**: 
   - **MySQL Deployment**: This will refer to the PVC for data storage, use the MySQL image, and incorporate the Secrets for sensitive environment variables.
   - **WordPress Deployment**: This will use the WordPress image, will connect to the MySQL database using credentials from Secrets and configurations from ConfigMaps, and will expose the necessary port for external access.
5. **Create Services**: 
   - **MySQL Service**: This will expose the MySQL database only within the cluster.
   - **WordPress Service**: This will expose the WordPress application externally, thus allowing user access.

Now, let's create the appropriate Kubernetes YAML manifests based on these plans.

### Step 1: Secrets

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: <base64-encoded-password>
  MYSQL_USER: <base64-encoded-username>
  MYSQL_PASSWORD: <base64-encoded-password>
```

(Replace `<base64-encoded-...>` with your base64 encoded values; you can get these values by running `echo -n 'value' | base64` in your terminal.)

### Step 2: ConfigMaps

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpressdb
```

### Step 3: PersistentVolumeClaim

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Deployments

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_DATABASE
```

### Step 5: Services

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This comprehensive set of YAML manifests will deploy a WordPress website with a MySQL database on Kubernetes, using best practices for security and configuration management.