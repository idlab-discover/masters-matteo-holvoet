To create a Kubernetes deployment for a WordPress website using a MySQL database backend, several Kubernetes resources are needed. We will walk through each component one by one:

1. **ConfigMaps**: To store non-sensitive data like environment configurations.
2. **Secrets**: To securely store sensitive data like database passwords.
3. **Deployments**: To manage the WordPress and MySQL containers.
4. **PersistentVolumeClaims**: For persistent database storage.
5. **Services**: To expose and load balance the applications.

### Step 1: Define ConfigMap and Secret

**ConfigMap** (for MySQL and WordPress configurations):
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_NAME: wordpress
```

**Secret** (for MySQL password):
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWxwYXNzd29yZA==  # This is base64 for "mysqlpassword"
  MYSQL_PASSWORD: d29yZHByZXNzcGFzc3dvcmQ=  # This is base64 for "wordpresspassword"
```

### Step 2: MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_NAME
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

**PersistentVolumeClaim for MySQL**:
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
          - name: WORDPRESS_DB_HOST
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_HOST
          - name: WORDPRESS_DB_USER
            value: "root"
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: MYSQL_ROOT_PASSWORD
          - name: WORDPRESS_DB_NAME
            valueFrom:
              configMapKeyRef:
                name: wordpress-config
                key: WORDPRESS_DB_NAME
```

### Step 4: Services for MySQL and WordPress

**MySQL Service**:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

**WordPress Service**:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

This set of YAML files describes the necessary Kubernetes resources to deploy a WordPress site with a MySQL backend on Kubernetes, including handling of persistent data, configuration management via ConfigMaps and Secrets, and exposing the necessary services. Ensure to replace the placeholder secrets (`base64` encoded values) with your own secure values.