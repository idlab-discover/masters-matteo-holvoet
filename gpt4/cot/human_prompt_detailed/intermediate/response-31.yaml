Hereâ€™s a detailed step-by-step guide to create a Kubernetes YAML manifest file based on the requested requirements for deploying a WordPress site with MySQL as the database. This setup includes ConfigMaps, Secrets, Deployments, Services, and Persistent Volume Claims.

### Step 1: Define ConfigMaps and Secrets

#### ConfigMap
A ConfigMap to hold configuration details that can be commonly exposed and aren't sensitive.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_USER: wordpress
---
```

#### Secret
A Secret to hold sensitive information such as the database password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: [BASE64_ENCODED_PASSWORD]
  WORDPRESS_DB_PASSWORD: [BASE64_ENCODED_PASSWORD]
---
```
(Use `echo -n 'yourpassword' | base64` to encode your MySQL passwords)

### Step 2: MySQL Deployment and Service

#### PersistentVolumeClaim
A Persistent Volume Claim for MySQL for data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
```

#### Deployment
A Deployment configuration for the MySQL container.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
```

#### Service
A Service to make MySQL accessible to the WordPress deployment.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
```

### Step 3: WordPress Deployment and Service

#### Deployment
A Deployment for WordPress which utilizes the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: WORDPRESS_DB_PASSWORD
---
```

#### Service
A Service to expose the WordPress frontend.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
    - port: 80
  selector:
    app: wordpress
---
```

This YAML configuration contains everything needed to deploy WordPress with a MySQL backend on Kubernetes, using ConfigMaps and Secrets for configuration, and creating both Deployments and Services to manage the containers and network. Adjust the passwords by encoding your desired passwords to base64 and replacing `[BASE64_ENCODED_PASSWORD]` in the secrets.