Creating a Kubernetes YAML manifest that includes all these components can be involved, but let's go through it step by step, beginning with the necessary objects and structure. We'll lay out each piece of the application: a Deployment for WordPress, a Deployment for MySQL, PersistentVolumeClaims, Services, ConfigMaps, and Secrets.

### Step 1: Secrets and ConfigMaps

First, let's define the Secrets and ConfigMaps. Secrets will store sensitive information such as database passwords, while ConfigMaps might hold less-sensitive configuration settings.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: c2VjcmV0UGFzc3dvcmQ=  # Base64 encoded password (e.g., 'secretPassword')

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wordpress_user
```

### Step 2: PersistentVolumeClaim for MySQL

We need persistent storage for MySQL to ensure data persists across pod restarts.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Deployments

Next, define the deployments for both MySQL and WordPress. We'll start with MySQL:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_USER
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

Now for WordPress:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql:3306
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: mysql-config
                  key: MYSQL_DATABASE
          ports:
            - containerPort: 80
```

### Step 4: Services

Now create the services for MySQL and WordPress. First, the MySQL Service:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

Next, the WordPress Service:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

With this configuration, we've set up a WordPress website with a MySQL database backend in Kubernetes. The configuration securely handles passwords using Kubernetes Secrets and manages configurations through ConfigMaps. We ensure data persistence for MySQL using a PersistentVolumeClaim. Services provide the necessary networking for inter-container communication and external access to the WordPress site.