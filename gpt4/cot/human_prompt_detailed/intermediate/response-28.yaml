Sure, let's craft a Kubernetes YAML file for deploying a WordPress website with a MySQL backend. We'll follow a step-by-step approach, addressing each part of your requirements.

**Step 1: Define ConfigMaps and Secrets**
- **ConfigMaps**: Store non-sensitive data like MySQL and WordPress related configurations.
- **Secrets**: Securely store sensitive data such as MySQL database passwords.

**Step 2: Define PersistentVolumeClaims (PVCs)**
- Needed for MySQL to ensure data persistence.

**Step 3: Create Deployments**
- **MySQL Deployment**: Uses the PVC and Secrets.
- **WordPress Deployment**: Utilizes ConfigMaps and Secrets for configurations.

**Step 4: Define Services**
- To allow communication between WordPress and MySQL, and expose WordPress to the outside world.

Let's get started with the YAML file:

```yaml
apiVersion: v1
kind: List
items:
---
# ConfigMap for MySQL
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: mysql-config
  data:
    MYSQL_DATABASE: wordpress_db
    MYSQL_USER: wordpress_user

---
# Secret for MySQL Password
- apiVersion: v1
  kind: Secret
  metadata:
    name: mysql-secret
  type: Opaque
  data:
    # Replace with your base64 encoded actual password
    mysql-root-password: <base-64-encoded-password>
    mysql-password: <base-64-encoded-password>

---
# PersistentVolumeClaim for MySQL
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: mysql-pvc
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi

---
# MySQL Deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: mysql
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: mysql
      spec:
        containers:
          - name: mysql
            image: mysql:5.7
            ports:
              - containerPort: 3306
            env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-secret
                    key: mysql-root-password
              - name: MYSQL_DATABASE
                valueFrom:
                  configMapKeyRef:
                    name: mysql-config
                    key: MYSQL_DATABASE
              - name: MYSQL_USER
                valueFrom:
                  configMapKeyRef:
                    name: mysql-config
                    key: MYSQL_USER
              - name: MYSQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-secret
                    key: mysql-password
            volumeMounts:
              - name: mysql-storage
                mountPath: /var/lib/mysql
        volumes:
          - name: mysql-storage
            persistentVolumeClaim:
              claimName: mysql-pvc

---
# MySQL Service
- apiVersion: v1
  kind: Service
  metadata:
    name: mysql-service
  spec:
    ports:
      - port: 3306
    selector:
      app: mysql
    type: ClusterIP

---
# WordPress Deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: wordpress
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: wordpress
    template:
      metadata:
        labels:
          app: wordpress
      spec:
        containers:
          - name: wordpress
            image: wordpress:latest
            ports:
              - containerPort: 80
            env:
              - name: WORDPRESS_DB_HOST
                value: mysql-service
              - name: WORDPRESS_DB_USER
                valueFrom:
                  configMapKeyRef:
                    name: mysql-config
                    key: MYSQL_USER
              - name: WORDPRESS_DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-secret
                    key: mysql-password
              - name: WORDPRESS_DB_NAME
                valueFrom:
                  configMapKeyRef:
                    name: mysql-config
                    key: MYSQL_DATABASE

---
# WordPress Service
- apiVersion: v1
  kind: Service
  metadata:
    name: wordpress-service
  spec:
    ports:
      - port: 80
    selector:
      app: wordpress
    type: LoadBalancer

```

Make sure to replace `<base-64-encoded-password>` with your actual password values encoded in Base64. This Kubernetes configuration includes essential components for deploying a WordPress site with a MySQL backend, using best practices for configuration management and persistence.