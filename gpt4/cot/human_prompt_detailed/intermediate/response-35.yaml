Certainly! Here is a Kubernetes YAML manifest broken up step by step to deploy a WordPress website with a MySQL database, incorporating ConfigMaps, Secrets, PersistentVolumeClaims, Deployments, and Services.

### Step 1: Create ConfigMap and Secret

The ConfigMap will store non-sensitive configuration data, such as the MySQL database name, user, and other application variables. The Secret will be used to securely store sensitive data like passwords.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  database_name: wordpress_db
  username: wordpress_user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  mysql_root_password: cGFzc3dvcmQ=  #base64 encoded "password"
  mysql_password: cGFzc3dvcmQ=         #base64 encoded "password"
```

### Step 2: MySQL Deployment with Persistent Volume Claim

This MySQL Deployment uses a PersistentVolumeClaim for data persistence. It references the Secret for passwords.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql_root_password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql_password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 3: MySQL Service

Create a Service for MySQL to allow the WordPress application to communicate with the database.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: WordPress Deployment

This Deployments uses the Container image for WordPress, configures environment variables referencing the ConfigMap and Secret, and defines the necessary port.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: username
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql_password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: database_name
```

### Step 5: WordPress Service

Lastly, expose the WordPress application using a Service to make it accessible.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This completes our manifest for deploying WordPress with a MySQL backend in Kubernetes. Adjust storage sizes, versions, and encoding of secrets as necessary for your environment.