Sure, letâ€™s create a Kubernetes YAML manifest step-by-step covering each requirement.

### Part 1: ConfigMap and Secret
We begin by defining a ConfigMap for WordPress and MySQL configuration and a Secret for storing sensitive credentials like the MySQL password.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wp-config
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wordpress_user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-password: c3VwZXJzZWNyZXQ=  # This is base64 encoded "supersecret"
```

### Part 2: PersistentVolumeClaim
Next, we set up a PersistentVolumeClaim to ensure data persistence for the MySQL database:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Part 3: Deployments
Now, we configure Deployments for both MySQL and WordPress.

#### MySQL Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wp-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wp-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wp-config
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wp-config
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
```

### Part 4: Services
Finally, define Services for both MySQL and WordPress to establish connectivity.

#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This series of YAML configurations sets up a basic WordPress site with persistent database storage on Kubernetes, leveraging best practices for security and management like ConfigMaps, Secrets, and PersistentVolumes. You would add this content in a `.yaml` file and deploy it on your Kubernetes cluster using a command like `kubectl apply -f yourfilename.yaml`.
