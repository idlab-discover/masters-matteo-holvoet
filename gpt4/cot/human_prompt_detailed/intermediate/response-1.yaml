Certainly! Below is a step-by-step Kubernetes YAML manifest file to deploy a WordPress website powered by a MySQL database backend. I'll break down the manifest into different parts for clarity, including Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims.

### 1. ConfigMap and Secret

Firstly, define a ConfigMap for MySQL configuration and a Secret to securely provide sensitive data like passwords.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wordpress_user

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-password: <base64-encoded-user-password>
```
**Note:** Replace `<base64-encoded-password>` and `<base64-encoded-user-password>` with actual base64 encoded values. You can create a base64 encoded value using:
```bash
echo -n 'yourpassword' | base64
```

### 2. PersistentVolumeClaim for MySQL

Now, create a PersistentVolumeClaim for MySQL to ensure data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### 3. Deployments

Next, set up the Deployments for MySQL and WordPress.

#### MySQL Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql-service
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-configmap
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
```

### 4. Services

Finally, define the Services to expose MySQL and WordPress.

#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

We've set up the essential components: ConfigMap, Secret, PersistentVolumeClaim, Deployment (for MySQL and WordPress), and Service (for MySQL and WordPress). Deploying these components into a Kubernetes cluster will set up a basic WordPress site with MySQL as its database. 
Make sure to apply the YAML files correctly and replace sensitive data with properly encoded base64 strings where required.