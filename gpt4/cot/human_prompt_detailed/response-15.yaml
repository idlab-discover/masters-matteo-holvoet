Below is a single YAML file that contains all the necessary components for deploying WordPress with a MySQL backend in Kubernetes. It includes configuration using ConfigMaps and Secrets, deployments for both WordPress and MySQL, persistent storage for MySQL, and services to expose both applications.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: wordpress
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: "cm9vdF9wYXNzd29yZF9iYXNlNjRfZW5jb2RlZA=="  # Replace with `echo -n 'yourpassword' | base64`
  MYSQL_USER: "d29yZHByZXNzX3VzZXJfYmFzZTY0"                    # Replace with `echo -n 'wordpress_user' | base64`
  MYSQL_PASSWORD: "d29yZHByZXNzX3Bhc3N3b3JkX2Jhc2U2NA=="      # Replace with `echo -n 'wordpress_password' | base64`
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Instructions

1. Replace the `data` values under `Secrets` with actual base64-encoded strings of your MySQL root password, user, and password.
2. Apply this manifest in your Kubernetes cluster using the command: `kubectl apply -f <this_yaml_file>.yaml`.
3. Make sure the Persistent Volume is provisioned if necessary or adjust the PVC to match your cluster's storage provisioner capabilities.
4. External access to your WordPress site will be available through the external IP provided by the `type: LoadBalancer` of the WordPress service (in cloud environments that support LoadBalancers).

This YAML file fully deploys a WordPress website with a MySQL database backend, making use of secrets and ConfigMaps for sensitive and configurable data, and maintains data persistence across pod restarts.