Here's the complete Kubernetes YAML file for deploying a WordPress website with a MySQL database using ConfigMaps, Secrets, PersistentVolumeClaims, Deployments, and Services. The YAML is well-structured to ensure it works correctly under Kubernetes.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_USER: wordpress
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: [BASE64_ENCODED_PASSWORD]
  WORDPRESS_DB_PASSWORD: [BASE64_ENCODED_PASSWORD]
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: MYSQL_ROOT_PASSWORD
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: WORDPRESS_DB_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
    - port: 80
  selector:
    app: wordpress
---
```

### Important Notes:
- Replace `[BASE64_ENCODED_PASSWORD]` with your actual base64-encoded password for MySQL in both `MYSQL_ROOT_PASSWORD` and `WORDPRESS_DB_PASSWORD` placeholders in the `Secret` manifest section.
- This configuration sets WordPress to run on a dynamically assigned node-wide port because of the `NodePort` service type. This can be accessed from the outside if the nodeâ€™s IP and the node port are known.
- Ensure your Kubernetes cluster has PersistentVolume support if you expect the PersistentVolumeClaim in the MySQL deployment to work seamlessly.

With these configurations, you should be able to get a WordPress site running on a Kubernetes cluster with MySQL as the database backend, considering access controls, and persistence are adequately handled on your deployment environment.