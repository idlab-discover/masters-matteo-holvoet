Below are the YAML manifests for deploying a WordPress website along with a MySQL database on Kubernetes. This setup includes two Deployments and two Services. The MySQL password is set through Kubernetes Secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YOUR_BASE64_ENCODED_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.6
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: http
```

### Notes:
1. Update `YOUR_BASE64_ENCODED_PASSWORD` under `data: password:` in the Kubernetes Secret manifest. Use base64 to encode your desired MySQL root password.
2. The WordPress deployment is set up to use the MySQL database running in the other container and connects via the service named `mysql`, using Kubernetes DNS.
3. MySQL deployment strategy is set to "Recreate" to ensure that the MySQL database does not allow more than one pod to be running at the same time.
4. A LoadBalancer type service is used for WordPress to expose it to the internet outside Kubernetes.
5. Ensure Persistent Volumes (PVCs) are considered based on the storage needs of MySQL and perhaps even WordPress for completeness in a production scenario.