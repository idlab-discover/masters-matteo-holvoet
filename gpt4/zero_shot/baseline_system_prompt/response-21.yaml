Here's a basic YAML manifest for deploying a WordPress website with a MySQL database backend in Kubernetes. This setup includes Deployments and Services for both WordPress and MySQL. 

Make sure to configure more specific settings like resource limits, persistent volumes, and secrets according to your Kubernetes cluster specifics and security requirements.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
    tier: frontend
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
    tier: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          value: wordpress_user
        - name: WORDPRESS_DB_PASSWORD
          value: wordpress_password
        - name: WORDPRESS_DB_NAME
          value: wordpress_database
        ports:
        - containerPort: 80
          name: wordpress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    matchLabels:
      app: mysql
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        tier: backend
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_DATABASE
          value: wordpress_database
        - name: MYSQL_USER
          value: wordpress_user
        - name: MYSQL_PASSWORD
          value: wordpress_password
        - name: MYSQL_ROOT_PASSWORD
          value: root_password
        ports:
        - containerPort: 3306
          name: mysql
```

### Notes:
- **Security**: For production environments, avoid using plain text passwords in configuration files. Instead, use Kubernetes Secrets to manage sensitive data.
- **Persistence**: This example does not handle data persistence. For MySQL, you should use a PersistentVolume to ensure data is not lost when the pod is restarted. Similar considerations may apply to WordPress for managing uploaded files.
- **Customization**: Adjust the image tags, resource requests/limits, and other specifics as necessary for your use case.
- **Environment Configuration**: Modify the environment variables with appropriate values for your environment or secrets references if you switch to using Kubernetes Secrets.