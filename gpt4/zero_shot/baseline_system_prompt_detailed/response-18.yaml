```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wp-example

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wp-example
type: Opaque
data:
  password: YWRtaW5wYXNz  # This is base64 encoded of `adminpass`

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wp-example
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_USER: wordpress
  WORDPRESS_DB_PASSWORD: adminpass
  WORDPRESS_DB_NAME: wordpress

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wp-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wp-example
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wp-example
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          value: wordpress
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wp-example
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wp-example
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

This YAML file creates a namespace `wp-example`, deploys WordPress and MySQL utilizing Kubernetes Deployments, connects them through environment variables (with credentials handled via Secrets for security), and exposes them through Services. It manages configuration via ConfigMaps and stores MySQL data persistently using a PersistentVolumeClaim. Adjust memory and CPU resources, PersistentVolumeClaim sizes, or configuration values as needed for your specific environment or performance requirements.