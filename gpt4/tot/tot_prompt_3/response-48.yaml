### Expert 1: Kubernetes Developer

#### Step 1: Configuration Description
I'm going to start by setting up a Kubernetes Deployment for both the WordPress and MySQL containers. This requires defining two separate deployments: one for WordPress and one for MySQL. Each will have its respective container, environment variables for database connections, and other necessary setup details like volume mounts for persistent data.

#### Step 2: Analysis
To ensure the WordPress container can communicate with the MySQL container, they must be part of the same namespace and there should ideally be a Kubernetes Service that exposes the MySQL pod internally within the cluster. Persistent Volumes will be needed for MySQL to ensure data persistence across pod restarts.

#### Score for Expert 2: 4
Good details on environment setup and connection specifics between containers but could elaborate more on service exposure.

#### Score for Expert 3: 5
Discussed security and robustness effectively, especially focusing on persistent data and security concerns which are very crucial.

### Expert 2: DevOps Engineer

#### Step 1: Configuration Description
To deploy WordPress with a MySQL backend in Kubernetes, I propose utilizing Kubernetes ConfigMaps and Secrets to manage configuration and sensitive data respectively. This includes database credentials and configurations that need to be securely passed to the MySQL and WordPress deployments.

#### Step 2: Analysis
I would use persistent volume claims for MySQL to guarantee data durability, and set up a Kubernetes Service of type ClusterIP for MySQL for internal access. For WordPress, a LoadBalancer type service would make it accessible from the outside. I will also implement readiness and liveness probes to ensure the containers are healthy.

#### Score for Expert 1: 4
The overall structure is correct, but needs to integrate configuration management using ConfigMaps and Secrets as best practices for Kubernetes deployments.

#### Score for Expert 3: 4
Identifies critical components well, yet lacks detail on external access configurations for WordPress, which is essential for user interaction.

### Expert 3: Cloud Architect

#### Step 1: Configuration Description
My approach includes designing the deployments with scalability in mind. Both WordPress and MySQL will be deployed as scalable deployments with autoscaling capabilities. I would integrate Horizontal Pod Autoscalers targeting CPU and memory thresholds.

#### Step 2: Analysis
In terms of networking, I plan to create a private network within Kubernetes and use network policies to restrict traffic between the pods, enhancing security. MySQL data should be stored on a separate disk using PersistentVolumeClaims, and I would enforce strict security policies with Roles and RoleBindings to limit access.

#### Score for Expert 1: 5
Encompasses a detailed approach on basic deployment but could improve by incorporating scaling strategies.

#### Score for Expert 2: 3
Focuses effectively on DevOps practices like using ConfigMaps and Secrets, but misses out on mentioning the importance of network security and scaling policies.

### Conclusion:
All experts provide valid and complementary viewpoints on deploying WordPress and MySQL using Kubernetes. The consensus solution combines these perspectives:

1. Deploy both WordPress and MySQL using separate deployments with scalability considerations.
2. Utilize PersistentVolumeClaims for MySQL data persistence.
3. Use ConfigMaps and Secrets to manage configurations and sensitive information securely.
4. Implement a ClusterIP service for MySQL and a LoadBalancer for WordPress to handle internal and external traffic respectively.
5. Apply network policies and use Kubernetes native security roles for enhanced security.

I would now compile a YAML manifest incorporating these consensus solutions.