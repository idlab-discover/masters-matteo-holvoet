Step 1: Establish the Deployment Structure and Docker Images

Expert 1 (Kubernetes Deployment Specialist):
To begin, we need two deployments: one for WordPress and another for MySQL. Each deployment will utilize officially supported Docker images. For WordPress, the image "wordpress:latest" will serve our purpose, and for MySQL, we would use "mysql:5.7". Both will be defined under different deployment specs in the YAML, ensuring to label each distinctly for service targeting later.

Expert 2 (Database Administrator):
From a database perspective, the primary consideration is securing the MySQL deployment. The deployment should use a custom secret for database credentials, which would be referenced in the MySQL deployment and by the WordPress deployment to access the database. This secret ensures password protection and keeps credentials out of the deployment YAML files.

Expert 3 (Security and Configuration Specialist):
In addition to securing the database with secrets, network policies are crucial to restrict communication between the pods to only necessary traffic. MySQL should not be directly exposed to the internet and should communicate only with the WordPress pod. Also, configuring persistent volumes is essential for MySQL to ensure data persistence through pod restarts.

Scores: 
Expert 1: 5 (Provides a clear and direct approach on setting up deployments and images)
Expert 2: 4 (Good security insight but lacks integration specifics in this step)
Expert 3: 5 (Brings comprehensive considerations for security and long-term operability)

Step 2: Define Kubernetes Services and Networks

Expert 1 (Kubernetes Deployment Specialist):
We'll need a Kubernetes service for each deployment to enable pod discovery and networking. The MySQL service will be of type ClusterIP (default) which is only accessible within the cluster for security reasons. WordPress will use a LoadBalancer type service making it accessible externally. Port configurations must match the container's operational ports.

Expert 2 (Database Administrator):
While defining the MySQL service, we need to ensure it uses the correct port (typically 3306 for MySQL). For security, only WordPress should have access to this port. This could be re-iterated by defining proper network policies alongside the service definition.

Expert 3 (Security and Configuration Specialist):
Specific network policies should be created to allow traffic from the WordPress pod to the MySQL pod on the MySQL specific port. This isolates MySQL from unwanted network traffic. For the WordPress service, besides the LoadBalancer, a proper ingress rule should also be considered to handle external traffic securely.

Scores: 
Expert 1: 5 (Accurate setup of services reflecting knowledge of Kubernetes networking)
Expert 2: 4 (Correct on security but missing integration into Kubernetes specifics)
Expert 3: 5 (Enhances the configuration view with real-world application security practices)

Step 3: Add Configuration and Secrets Management

Expert 1 (Kubernetes Deployment Specialist):
Volume mounts should be added to both the WordPress and MySQL deployments to handle configuration files and data storage, respectively. Secrets usage will be defined here to feed the MySQL credentials into both deployments securely.

Expert 2 (Database Administrator):
The MySQL credentials stored in Kubernetes secrets should be injected into both WordPress and MySQL Pods using environment variables. This maintains security and eases configuration management through Kubernetes' native tools.

Expert 3 (Security and Configuration Specialist):
Apart from using secrets, ensuring that data stored by MySQL on its persistent volumes is encrypted at rest would add an additional layer of security. The configuration for volume encryption can be specified under the persistent volume claim or by using specific storage classes that support encryption.

Scores:
Expert 1: 5 (Covers practical deployment needs and integrates configuration management)
Expert 2: 5 (Focuses deeply on practical and secure deployment of database credentials)
Expert 3: 5 (Adds an important layer of security with encryption recommendations)

Final Analysis:
All experts provide valuable insights into the creation of the Kubernetes manifest for deploying a WordPress website with a MySQL database backend. There is a consensus on using standard Docker images, securing credentials with secrets, and ensuring persistent data management. Adding network policies as suggested by the Security Specialist enhances the overall security posture. Combining these insights, the appropriate YAML manifest can be authored to effectively deploy and maintain a secure and functional WordPress site.