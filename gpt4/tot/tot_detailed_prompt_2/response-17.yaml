**Expert 1:**

Our task is to develop a set of Kubernetes resources that collectively manage a WordPress website and its MySQL database. I’ll break down the solution into multiple parts, starting with the MySQL Deployment.

MySQL requires persistent storage to maintain data across Pod restarts and crashes. Thus, a PersistentVolumeClaim (PVC) is critical. We’ll also use a Secret to store sensitive information like the MySQL root password. Let’s start defining the manifest for MySQL.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: [BASE64 ENCODED PASSWORD]
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

**Expert 2:**

Excellent start by Expert 1. Now, let’s add the MySQL Service so the database can communicate with other components. After that, we'll create the WordPress components.

For the MySQL Service, we use a ClusterIP type because it should not be exposed outside the cluster. This is an internal communication guideline in Kubernetes networking.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
```

Now, moving onto WordPress, we also need a Deployment and a Service. As suggested by Expert 1, we use ConfigMap for non-sensitive configurations.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_USER: root
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
```

**Expert 3:**

Thank you, Expert 2, for crafting an effective communication setup between our WordPress and MySQL deployments using ConfigMaps and a Service. To finalize our setup, we need to define a Service for WordPress to ensure that the WordPress site can be accessed from outside the cluster. 

I would opt for a LoadBalancer type service here, which makes the WordPress site publicly accessible through the internet. We also need to ensure that we have included the WordPress database name in our environment, ideally via another secret (since it might vary and should not be hardcoded).

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

Here, all components are set, ensuring our WordPress site communicates securely with the MySQL database, keeping sensitive data protected with Secrets and accessible only within the cluster. Let's ensure to test the setup in a controlled Kubernetes environment to fine-tune configurations and resource allocation if necessary.