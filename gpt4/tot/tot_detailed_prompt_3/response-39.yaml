### Expert #1: Kubernetes Architect

**Step 1: Understanding the Components**
- The solution involves creating necessary Kubernetes components: two Deployments, two Services, a ConfigMap, and a Secret.
- Each component has a specific role, Deployments for managing the lifecycle of pods, Services for network connectivity, ConfigMaps and Secrets for configuration, and data security respectively.

**Step 2: WordPress Deployment**
- The WordPress deployment would need the appropriate image, likely the latest stable version from Docker Hub.
- WordPress will require environment variables from ConfigMaps (for configurable settings) and Secrets (for sensitive information like database credentials).
- Expose WordPress on a typical HTTP port, 80.

**Step 3: MySQL Deployment**
- Use the latest stable MySQL image.
- MySQL data should be persisted using a PersistentVolumeClaim, ensuring data survives pod restarts.
- MySQL will be configured through environment variables, possibly from a Secret to secure database credentials.

**Step 4: Services Configuration**
- Define a Service for both WordPress and MySQL.
- MySQL service should not be exposed externally, while the WordPress service can be set to `type: LoadBalancer` to enable public access.

**Step 5: ConfigMaps and Secrets**
- Set up a ConfigMap to store WordPress configurations.
- A Secret should be crafted to store MySQL credentials securely.

### Expert #2: DevOps Engineer

**Step 1: Initial Planning**
- Acknowledges the need for multi-component configuration which involves interaction between WordPress and MySQL.
- Focus is on the automation and efficiency of the deployment process.

**Step 2: WordPress Specifications**
- Highlights the importance of using a specific WordPress image tag instead of `latest` to avoid unforeseen updates.
- Emphasizes environment optimization for WordPress through ConfigMap settings.

**Step 3: MySQL Setup**
- Suggests a granular approach to the PersistentVolumeClaim, with attention to access modes and storage capacities.
- Discusses security best practices for MySQL, primarily handling credentials via Kubernetes Secrets.

**Step 4: Networking Concerns**
- Focuses on the internal networking between WordPress and MySQL using Kubernetes DNS.
- Proposes the use of `ClusterIP` for MySQL and `LoadBalancer` for WordPress for external access.

**Step 5: Configuration Management**
- Deep dive into key-value pairs in ConfigMap and how they relate to WordPress settings.
- Stresses testing Secret data encoding and decoding to ensure no issues in deployment.

### Expert #3: Cloud Solutions Architect

**Step 1: Overview of Architecture**
- Provides a broad perspective, linking the deployment to potential cloud-native features such as auto-scaling and multi-zone availability.
- Thinks about the broader system resilience and possible integration with cloud services.

**Step 2: WordPress Deployment Perspectives**
- Discusses possible integration with Content Delivery Networks (CDN) and caching services to optimize WordPress performance.
- Talks about possible future scalability needs and how Kubernetes can manage increased load.

**Step 3: MySQL Robustness**
- Considers the impact of database performance on the overall application, suggesting high availability configurations.
- Looks into backup solutions integrated with the PersistentVolume in Kubernetes.

**Step 4: Service Discovery and Load Balancing**
- Analyzes possible cloud vendor-specific solutions for load balancing that might provide additional features over standard Kubernetes LoadBalancer.

**Step 5: Security and Compliance**
- Forecasts needs for compliance in configuration, particularly focusing on data protection laws and how they influence the Secret management.

### Analysis and Consensus
- **Expert Accuracy Scoring:**
  - Expert #1 and #2 provide focused, actionable Kubernetes-native advice and are likely to score higher on accuracy.
  - Expert #3 offers valuable insights from a cloud perspective but might not be as detailed on specific Kubernetes implementations as required here.

- **Consensus Solution:**
  - All experts agree on the basic building blocks; the differences lie more in their approach and focus areas.
  - The consensus revolves around using clear image tags, secure secret management, and robust deployment strategies emphasizing persistence and reliability for MySQL and accessibility and simplicity for WordPress.

By compiling insights from multiple expert views, one can create a robust, efficient, and secure Kubernetes configuration.