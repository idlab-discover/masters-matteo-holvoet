```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-setup
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-setup
data:
  WORDPRESS_DB_HOST: wordpress-mysql
  WORDPRESS_DB_PORT: "3306"
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-setup
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=  # Base64 encoded password
  MYSQL_DATABASE: d29yZHByZXNz # "wordpress"
  MYSQL_USER: d29yZHByZXNzX3VzZXI= # "wordpress_user"
  MYSQL_PASSWORD: d29yZHByZXNzX3Bhc3M= # "wordpress_pass"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-setup
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
            - name: WORDPRESS_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_DATABASE
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-setup
spec:
  type: NodePort
  ports:
    - port: 80
  selector:
    app: wordpress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-setup
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress-setup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-setup
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
``` 

This YAML configuration creates a namespace, ConfigMap, and a Secret required for WordPress and its MySQL database setup in Kubernetes. It defines Deployments for both the WordPress application and MySQL database configured with respective environments via the ConfigMap and Secrets. Persistent volume claim is used for MySQL data persistence. Services are also defined for both the applications to allow interconnectivity and external access.