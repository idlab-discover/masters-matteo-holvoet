```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: dXNlcl9wYXNzd29yZA==  # base64 of 'user_password'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: root

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
  clusterIP: None # Headless service for smoother DNS resolution within the cluster

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.7
        envFrom:
        - configMapRef:
            name: wordpress-config
        - secretRef:
            name: mysql-secret
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

1. **Initial Setup:**
   - Secret `mysql-secret` is created for storing MySQL root password.
   - ConfigMap `wordpress-config` provides configuration for WordPress to connect with MySQL.

2. **PersistentVolumeClaims:**
   - Two PVCs are configured for data persistence: `mysql-pvc` for MySQL and `wordpress-pvc` for WordPress.

3. **Deployments:**
   - MySQL Deployment specifies a single Pod with a volume mount for persistent storage and environment variable populated from the Secret.
   - WordPress Deployment specifies a container using environment variables from both ConfigMap and Secret and mounts a volume for persistent storage.

4. **Services:**
   - MySQL Headless Service allows the WordPress Pod to connect to MySQL via stable DNS.
   - WordPress Service exposes the application to external traffic using a LoadBalancer type for ease of access.

Each of these YAML sections builds upon the need for security, organizational standards for configuration, and persistent storage, providing a holistic setup for deploying a WordPress site on Kubernetes.