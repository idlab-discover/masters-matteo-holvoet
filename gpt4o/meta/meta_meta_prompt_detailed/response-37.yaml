```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:6.0
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql.default.svc.cluster.local
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: wordpress-secret
              key: db-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-secret
              key: db-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7 
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wpuser
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-configmap
data:
  WORDPRESS_DB_NAME: wordpress
---
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-secret
type: Opaque
data:
  db-user: d3B1c2Vy
  db-password: c2VjdXJlcGFzcw==
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  root-password: cm9vdHBhc3N3b3Jk
  password: c2VjdXJlcGFzcw==
```

# Explanation

1. **WordPress Deployment:**
   - **Image Selection:** Using the stable `wordpress:6.0` image for consistency and reliability.
   - **Environment Variables:** Set to ensure WordPress can communicate with the MySQL database. Passwords and sensitive information are sourced from Kubernetes Secrets to improve security.
   - **Resource Management:** Defined resource requests and limits to optimize cluster resource usage and ensure WordPress runs efficiently.

2. **MySQL Deployment:**
   - **Data Persistence:** Utilizes `PersistentVolumeClaim` to sustain data through pod restarts. Alternative storage like cloud-managed databases could provide more resilience, yet might cost more or reduce control.
   - **Security:** Credentials are handled using Kubernetes Secrets. This minimizes the risk of exposure and adheres to security best practices by avoiding hard-coded secrets.

3. **Services:**
   - **WordPress Service:** Exposed via type `LoadBalancer` for external access. Kubernetes manages load balancing to ensure availability.
   - **MySQL Service:** ClusterIP set to `None` for direct pod-to-pod communication within the cluster, useful in stateful applications.

4. **ConfigMap and Secret Management:**
   - Securely separate configuration and sensitive information. Converts sensitive data into Base64 encoded values to keep them secured.

5. **Considerations:**
   - **Scalability:** This setup supports easy horizontal scaling of WordPress.
   - **Failover and Load Balancing:** WordPress Deployment replicas and load balancer contribute to an enhanced user experience by providing redundancy.
   - **Compliance and Resource Management:** Resources have defined boundaries that consider typical app requirements and potential restraints in production.

This configuration optimally balances between ease of use, performance, and security to ensure the deployment is production-ready and flexible enough to adapt to varied requirements.