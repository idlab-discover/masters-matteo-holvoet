{
  "provider": "openai",
  "errors": null,
  "status": "ProblemDetected",
  "problems": 5,
  "results": [
    {
      "kind": "Ingress",
      "name": "default/wordpress-ingress",
      "error": [
        {
          "Text": "Ingress default/wordpress-ingress does not specify an Ingress class.",
          "KubernetesDoc": "",
          "Sensitive": [
            {
              "Unmasked": "default",
              "Masked": "cF47Xz4oLA=="
            },
            {
              "Unmasked": "wordpress-ingress",
              "Masked": "NzR1Jm5tPWxOfFgpVlowKXk="
            }
          ]
        }
      ],
      "details": "Error: The Ingress resource 'wordpress-ingress' in the 'default' namespace lacks a specified Ingress class, which is needed to determine the controller handling it.\n\nSolution: \n1. Edit the Ingress manifest.\n2. Add `ingressClassName: <your-ingress-class>` under `spec`.\n3. Apply changes with `kubectl apply -f <file-name>.yaml`.",
      "parentObject": ""
    },
    {
      "kind": "Service",
      "name": "default/wordpress",
      "error": [
        {
          "Text": "Service has not ready endpoints, pods: [Pod/wordpress-6cff7d677d-gstkf Pod/wordpress-6cff7d677d-4rm27 Pod/wordpress-6cff7d677d-bhx57], expected 3",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The service lacks ready endpoints; 3 pods are expected but not all are ready.\n\nSolution: \n1. Check pod status with `kubectl get pods`.\n2. Inspect logs using `kubectl logs [pod-name]`.\n3. Verify pod readiness probes.\n4. Ensure network policies allow traffic.\n5. Restart pods if needed.",
      "parentObject": ""
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-6cff7d677d-gstkf",
      "error": [
        {
          "Text": "Readiness probe failed: Get \"http://10.244.2.2:80/wp-admin/install.php\": dial tcp 10.244.2.2:80: connect: connection refused",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application at 10.244.2.2:80 is refusing connections.\n\nSolution: \n1. Verify the application is running on the pod.\n2. Check if the service is correctly exposing port 80.\n3. Ensure network policies allow traffic.\n4. Inspect pod logs for errors.\n5. Restart the pod if needed.",
      "parentObject": "Deployment/wordpress"
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-6cff7d677d-4rm27",
      "error": [
        {
          "Text": "Readiness probe failed: Get \"http://10.244.2.3:80/wp-admin/install.php\": dial tcp 10.244.2.3:80: connect: connection refused",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application at 10.244.2.3:80 is refusing connections.\n\nSolution: \n1. Check if the application is running on the correct port.\n2. Verify network policies/firewall settings.\n3. Ensure the service is correctly configured.\n4. Inspect application logs for errors.",
      "parentObject": "Deployment/wordpress"
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-6cff7d677d-bhx57",
      "error": [
        {
          "Text": "Readiness probe failed: Get \"http://10.244.2.4:80/wp-admin/install.php\": dial tcp 10.244.2.4:80: connect: connection refused",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application couldn't connect to the specified IP and port; the connection was refused.\n\nSolution: \n1. Verify the application is running on the correct IP/port.\n2. Check network policies/firewall settings.\n3. Ensure the service is correctly configured.\n4. Review pod logs for errors.",
      "parentObject": "Deployment/wordpress"
    }
  ]
}