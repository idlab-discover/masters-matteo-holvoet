```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-namespace
data:
  WORDPRESS_DB_HOST: db-mysql
  WORDPRESS_DB_USER: wp_user
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
  namespace: wordpress-namespace
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWxfc2VjcmV0
  MYSQL_DATABASE: d3BfZGF0YWJhc2U=
  MYSQL_USER: d3BfdXNlcg==
  MYSQL_PASSWORD: d3BfcGFzc3dvcmQ=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-app
  namespace: wordpress-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress-app
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_PASSWORD
            - name: WORDPRESS_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_DATABASE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-mysql
  namespace: wordpress-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: db-mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: MYSQL_PASSWORD
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-namespace
spec:
  ports:
    - port: 3306
      targetPort: 3306
  clusterIP: None
  selector:
    app: mysql
```

### Explanation:
- **Namespace**: Creates a separate namespace to logically isolate resources.
- **ConfigMap & Secret**: Separates non-sensitive and sensitive configurations, using base64-encoding for enhanced security practices.
- **PV Claim**: Provides persistent storage for MySQL ensuring data retention across pod restarts.
- **Deployments**: WordPress and MySQL deployments scale independently, addressing high availability and potential database migration support.
- **Services**: Establish connection endpoints and facilitate traffic routing, with load balancing for WordPress and stable IP for MySQL.
- **Operational Efficiency**: Designed with scalability and high-availability in mind, each component supports seamless updates or scaling actions, crucial for CI/CD and cross-region deployments in cloud environments.