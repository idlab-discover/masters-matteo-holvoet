```yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-application
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-application
type: Opaque
data:
  mysql-root-password: <BASE64_ENCODED_PASSWORD>
  mysql-database: <BASE64_ENCODED_DATABASE_NAME>
  mysql-user: <BASE64_ENCODED_USERNAME>
  mysql-password: <BASE64_ENCODED_PASSWORD>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-application
data:
  WORDPRESS_DB_HOST: mysql-service:3306
  WORDPRESS_DB_NAME: <DATABASE_NAME>
  WORDPRESS_DB_USER: <USERNAME>
  WORDPRESS_DB_PASSWORD: <PASSWORD>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-deployment
  namespace: wordpress-application
spec:
  replicas: 2  # For improved availability
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: wordpress-application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-root-password
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-database
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-application
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
  namespace: wordpress-application
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: wordpress-application
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
```

- **Naming Convention:** Naming the containers 'wordpress' and 'mysql' provides clarity and simplicity, easing maintenance and potential future scaling as the application architecture grows. This is critical in large environments where consistent naming conventions prevent confusion.

- **WordPress Deployment:** The WordPress application uses an official image with a `latest` tag. Ensuring the ports match (container and service), we expose port 80. Environment variables are securely managed through ConfigMaps and Secrets, mitigating security risks.

- **MySQL Deployment:** Uses `mysql:5.7`, a known stable version. Persistent storage is employed to safeguard against data loss during restarts. This aids in system reliability by ensuring data consistency and simplifying recovery after crashes.

- **Services:** Both WordPress and MySQL are accessible via Kubernetes Services which maintain stable network interfaces. `LoadBalancer` is chosen for WordPress to allow external traffic, while `ClusterIP` for MySQL keeps it internal, minimizing exposure.

- **ConfigMaps and Secrets:** Separate credentials management into Secrets to enhance security in sensitive operations. ConfigMaps handle non-sensitive, dynamic configurations. Another consideration could be using a third-party vault-like system, though this adds complexity.

- **Scaling and Future Enhancements:** Future scalability involves increasing the replication factor for high availability, employing monitoring tools like Prometheus for real-time insights, and possibly integrating a caching layer (e.g., Redis) for enhanced performance. This design sets the stage for HA setups by supporting scale-out and orchestration flexibility through Kubernetes.