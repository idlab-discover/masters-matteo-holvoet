```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-mysql
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress-mysql
type: Opaque
stringData:
  password: YOUR_SECURE_PASSWORD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
            - name: MYSQL_DATABASE
              value: wordpress
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-mysql
spec:
  replicas: 2
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:php7.4-apache
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 80
          resources:
            limits:
              cpu: "500m"
              memory: "512Mi"
            requests:
              cpu: "250m"
              memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-mysql
spec:
  type: ClusterIP
  ports:
    - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-mysql
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-wordpress-to-mysql
  namespace: wordpress-mysql
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: wordpress
      ports:
        - protocol: TCP
          port: 3306
```

### Explanation:

- **Namespace**: A separate namespace (`wordpress-mysql`) is created to encapsulate resources, aiding management and isolation.
- **Secrets**: Secure MySQL credentials using Kubernetes Secrets to restrict access to sensitive information.
- **Deployments**:
  - **MySQL**: Configured as a single replica to ensure consistency. Uses a `PersistentVolumeClaim` to maintain data even if the pod gets rescheduled.
  - **WordPress**: Configured with 2 replicas for high availability. Resources are specified to optimize performance and availability under varying traffic conditions.
- **Services**:
  - **MySQL**: Exposed internally via `ClusterIP` to allow access from the WordPress application.
  - **WordPress**: Exposed through a `LoadBalancer` to manage external HTTP requests and distribute traffic effectively, enhancing scalability.
- **NetworkPolicy**: Limits ingress traffic to MySQL pods to only come from WordPress pods, enhancing security.
- **Adaptability and Resilience**: The manifest is structured to handle traffic spikes through automated pod scaling and load balancing. In case of partial infrastructure failure, redundancy in replicas ensures service continuity. Data integrity is maintained with `PersistentVolumeClaims`.