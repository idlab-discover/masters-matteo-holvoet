```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-app
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-app
type: Opaque
data:
  mysql-root-password: bXlzcWwtcm9vdC1wYXNzd29yZA==
  mysql-user: d3AtdXNlcg==
  mysql-password: d3AtcGFzc3dvcmQ=
  mysql-database: d3AtZGF0YWJhc2U=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-app
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: wp-database
  WORDPRESS_DB_USER: wp-user
  WORDPRESS_DB_PASSWORD: wp-password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.7
        ports:
        - containerPort: 80
          name: wordpress
        envFrom:
        - configMapRef:
            name: wordpress-config
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-app
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  type: ClusterIP
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Explanation:
- **Scaling and Strategy**: Our setup uses Deployments to allow rolling updates and ensures WordPress has 3 replicas for load balancing and redundancy, while MySQL remains a single instance for consistency and avoids split-brain scenarios.
- **Persistent Storage**: PersistentVolumeClaims are used for both MySQL and WordPress, ensuring data persistence. MySQL uses the `ReadWriteOnce` mode suitable for single-writer scenarios while WordPress uses `ReadWriteMany` for serving replicated pods.
- **Services**: A LoadBalancer service ensures WordPress is accessible externally, while MySQL uses a ClusterIP for internal communications only.
- **ConfigMaps & Secrets**: Securing configurations using Secrets (for database credentials) and ConfigMaps (for environment variables), helping mitigate security vulnerabilities.
- **Handling Traffic Spikes**: The deployment can scale horizontally by increasing WordPress pod replicas and potentially switching to a more distributed database setup like MySQL cluster or a replicated cloud database service.
- **Hybrid Cloud Consideration**: For hybrid deployments, ensure connectivity using VPNs or similar secure interconnections. Use tools like Kubefed for managing multi-cluster setups and adhere to best practices for data synchronization and availability across different environments.