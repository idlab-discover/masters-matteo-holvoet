```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-app
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-app
type: Opaque
data:
  mysql-root-password: dGhpc2lzYXZlcnlzZWN1cmVwYXNzd29yZA== # base64 for 'thisisaverysecurepassword'
  mysql-database: d29yZHByZXNz # base64 for 'wordpress'
  mysql-user: d29yZHVzZXI= # base64 for 'wordpressuser'
  mysql-password: c2VjdXJlcGFzc3dvcmQ= # base64 for 'securepassword'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql.wordpress-app.svc.cluster.local:3306
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: wordpress-app
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: wordpress.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress
            port:
              number: 80
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: wordpress-monitor
  namespace: wordpress-app
  labels:
    release: prometheus-operator
spec:
  selector:
    matchLabels:
      app: wordpress
  endpoints:
  - port: web
    interval: 30s
  namespaceSelector:
    matchNames:
    - wordpress-app
```

### Explanation:
1. **Resource Optimization & Scalability**: The WordPress deployment is set to scale with 3 replicas, ensuring higher availability. Resource requests and limits help optimize usage and prevent resource starvation.
   
2. **Secrets Management**: The `mysql-secret` stores database credentials securely using Kubernetes Secrets, encrypted in base64 for transit and kept secure in the cluster.

3. **High Availability & Load Balancing**: The WordPress service is exposed as a `LoadBalancer` type, offering in-built load balancing. The deployment configuration ensures that multiple replicas can handle increased load and provide redundancy.

4. **Persistent Storage for MySQL**: A `PersistentVolumeClaim` ensures data persistence for MySQL. This prevents data loss in case of pod restarts or relocations.

5. **Security Considerations**: Limiting container privileges and using the latest stable versions of Docker images can mitigate common security risks. Leveraging network policies can further tighten security by restricting traffic paths.

6. **Monitoring & Logging**: Using a `ServiceMonitor`, integration with Prometheus enables resource monitoring, while an Ingress configuration contributes to an organized traffic management system, aiding performance tuning and incident response. Logging can be captured and exported to a centralized system for analysis.

These choices collectively guarantee a sustainable, secure, and efficient setup, capable of handling scaling demands and resisting potential faults.