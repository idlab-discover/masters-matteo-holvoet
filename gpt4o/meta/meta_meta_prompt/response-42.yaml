```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-mysql

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-mysql
type: Opaque
data:
  mysql-root-password: <base64-root-password> # Base64 encoded
  mysql-user: <base64-username> # Base64 encoded
  mysql-password: <base64-password> # Base64 encoded

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: wordpress-mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
              name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-mysql
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-mysql
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-mysql
spec:
  ports:
    - port: 3306
  clusterIP: None
  selector:
    app: mysql

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
  namespace: wordpress-mysql
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
```

### Explanation:

1. **High Availability**:
   - Used `StatefulSet` for MySQL to enable persistent storage and ordered, stable network identities.
   - Embedding replicas and load balancing using services for both WordPress and MySQL.
   
2. **Data Persistence**:
   - Utilized `PersistentVolumeClaim` in conjunction with `StatefulSet` to persist MySQL data.
   
3. **Scalability**:
   - Implemented `HorizontalPodAutoscaler` for WordPress based on CPU usage.
   - Deployment strategy for `wordpress` includes readiness probes for smooth updates.

4. **Security**:
   - Secrets in Kubernetes managed using `Secret` resource to keep MySQL credentials secure.
   - Services designed with non-exposed nodes, limiting MySQL access.

5. **Multi-cloud/Hybrid Cloud Considerations**:
   - Stateless services like WordPress designed to easily span multiple clouds.
   - Stateful services (MySQL) would require syncing state across clouds using cloud-native databases or a managed database with multi-cloud capabilities for data consistency and latency management.   

Adherence to best practices for deploying applications in Kubernetes ensures availability, scalability, and security. Adjust the YAML according to specific cloud provider requirements when deploying across multiple or hybrid cloud environments.