apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
data:
  mysql-root-password: <base64-root-password>
  mysql-user-password: <base64-user-password>
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-app
type: Opaque
---
apiVersion: v1
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wpdb
  WORDPRESS_DB_USER: wpuser
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              key: WORDPRESS_DB_HOST
              name: wordpress-config
        - name: WORDPRESS_DB_USER
          value: wpuser
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-user-password
              name: mysql-secret
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              key: WORDPRESS_DB_NAME
              name: wordpress-config
        image: wordpress:latest
        name: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-storage
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-root-password
              name: mysql-secret
        - name: MYSQL_DATABASE
          value: wpdb
        - name: MYSQL_USER
          value: wpuser
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mysql-user-password
              name: mysql-secret
        image: mysql:5.7
        name: mysql
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  clusterIP: None
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-wordpress-to-mysql
  namespace: wordpress-app
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: wordpress
    ports:
    - port: 3306
      protocol: TCP
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
  - Ingress
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: wordpress-service-monitor
  namespace: wordpress-app
spec:
  endpoints:
  - interval: 30s
    port: web
  namespaceSelector:
    matchNames:
    - wordpress-app
  selector:
    matchLabels:
      app: wordpress
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: mysql-backup
  namespace: wordpress-app
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - args:
            - /backup.sh
            env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-root-password
                  name: mysql-secret
            image: bitnami/mysqlbackup:latest
            name: backup
          restartPolicy: OnFailure
  schedule: 0 2 * * *
