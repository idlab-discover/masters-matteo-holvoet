```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  # These should be base64 encoded. Example: echo -n 'password' | base64
  mysql-root-password: <BASE64_ENCODED_PASSWORD>
  mysql-user-password: <BASE64_ENCODED_PASSWORD>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: wordpress
            - name: MYSQL_USER
              value: wpuser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user-password
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-storage
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql:3306
            - name: WORDPRESS_DB_USER
              value: wpuser
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user-password
          volumeMounts:
            - mountPath: /var/www/html
              name: wordpress-storage
      volumes:
        - name: wordpress-storage
          persistentVolumeClaim:
            claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  clusterIP: None
  ports:
    - port: 3306
  selector:
    app: mysql
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: wordpress-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wordpress
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-wordpress-mysql
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: wordpress
      ports:
        - protocol: TCP
          port: 3306
```

### Discussion:

1. **Security**: Sensitive data such as MySQL passwords are stored in Kubernetes Secrets. A NetworkPolicy is applied to restrict MySQL access only to the WordPress pods, minimizing exposure.

2. **Scalability**: The WordPress deployment uses a Horizontal Pod Autoscaler to scale based on CPU utilization, ensuring the application can handle increased traffic. Starting with 3 replicas ensures redundancy.

3. **Reliability**: Each deployment has a PersistentVolumeClaim to persist data, ensuring no data loss during pod restarts. For fault tolerance, database backups are essential, possibly by implementing a backup cron job.

4. **Cross-functional Integration**: Integration with CDNs can offload static content traffic, improving performance. Monitoring tools such as Prometheus can be deployed to track resource utilization and application performance.

5. **Challenge the Norm**: Alternatives like Docker Swarm, AWS ECS, or Heroku could be used instead of Kubernetes, but these could mean trade-offs in flexibility, control over the cluster, and vendor lock-in. Kubernetes offers a widely adopted, extensible, and feature-rich platform but can add complexity due to its steep learning curve.