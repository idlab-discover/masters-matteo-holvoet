{
  "provider": "openai",
  "errors": null,
  "status": "ProblemDetected",
  "problems": 6,
  "results": [
    {
      "kind": "Ingress",
      "name": "default/wordpress-ingress",
      "error": [
        {
          "Text": "Ingress default/wordpress-ingress does not specify an Ingress class.",
          "KubernetesDoc": "",
          "Sensitive": [
            {
              "Unmasked": "default",
              "Masked": "NWFYVmdFXw=="
            },
            {
              "Unmasked": "wordpress-ingress",
              "Masked": "M3VhRmokcFlzaF85O1cwfHc="
            }
          ]
        },
        {
          "Text": "Ingress uses the secret default/wordpress-tls as a TLS certificate which does not exist.",
          "KubernetesDoc": "",
          "Sensitive": [
            {
              "Unmasked": "default",
              "Masked": "NEl6Yi5jJw=="
            },
            {
              "Unmasked": "wordpress-tls",
              "Masked": "WSo7b3FobXZzVzBUNQ=="
            }
          ]
        }
      ],
      "details": "Error: The Ingress 'wordpress-ingress' lacks an Ingress class and references a non-existent TLS secret 'wordpress-tls'.\n\nSolution: \n1. Define an Ingress class in the Ingress manifest.\n2. Create the TLS secret 'wordpress-tls' in the 'default' namespace.",
      "parentObject": ""
    },
    {
      "kind": "Service",
      "name": "default/wordpress",
      "error": [
        {
          "Text": "Service has not ready endpoints, pods: [Pod/wordpress-58f6d795bf-4b4lk Pod/wordpress-58f6d795bf-sw8mf Pod/wordpress-58f6d795bf-pqn77], expected 3",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The service has no ready endpoints because the expected 3 pods are not ready.\n\nSolution: \n1. Check pod status with `kubectl get pods`.\n2. Inspect pod logs using `kubectl logs [pod-name]`.\n3. Ensure pods are running and healthy.\n4. Verify service and pod configurations.",
      "parentObject": ""
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-58f6d795bf-4b4lk",
      "error": [
        {
          "Text": "Readiness probe failed: HTTP probe failed with statuscode: 500",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application returned a 500 status code, indicating an internal server error.\n\nSolution: \n1. Check application logs for errors.\n2. Ensure all dependencies are running.\n3. Verify configuration settings.\n4. Restart the application.",
      "parentObject": "Deployment/wordpress"
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-58f6d795bf-pqn77",
      "error": [
        {
          "Text": "Readiness probe failed: HTTP probe failed with statuscode: 500",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application returned a 500 status code, indicating an internal server error.\n\nSolution: \n1. Check application logs for errors.\n2. Ensure all dependencies are running.\n3. Verify configuration settings.\n4. Restart the application.",
      "parentObject": "Deployment/wordpress"
    },
    {
      "kind": "Pod",
      "name": "default/wordpress-58f6d795bf-sw8mf",
      "error": [
        {
          "Text": "Readiness probe failed: HTTP probe failed with statuscode: 500",
          "KubernetesDoc": "",
          "Sensitive": []
        }
      ],
      "details": "Error: The readiness probe failed because the application returned a 500 status code, indicating an internal server error.\n\nSolution: \n1. Check application logs for errors.\n2. Ensure all dependencies are running.\n3. Verify configuration settings.\n4. Restart the application.",
      "parentObject": "Deployment/wordpress"
    }
  ]
}