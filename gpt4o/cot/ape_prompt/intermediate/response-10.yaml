Deploying a WordPress website using MySQL as the backend in Kubernetes requires creating multiple resources, including ConfigMaps, PersistentVolumes, PersistentVolumeClaims, Secrets, Services, and Deployments. Hereâ€™s a step-by-step plan to achieve this:

1. **Define a Secret for MySQL Password** - Store the database password securely using a Kubernetes Secret.

2. **Define Persistent Volumes (PV) and Persistent Volume Claims (PVC)** - For persistent storage for both MySQL and WordPress data.

3. **Create a ConfigMap for WordPress** - Store configuration related information, like database name, username, etc.

4. **Deploy the MySQL Database** - Create a Deployment for MySQL using the data from the Secret.

5. **Deploy WordPress** - Create a Deployment for WordPress, linking it to the MySQL database.

6. **Expose the services** - Create Services for WordPress and MySQL.

Here is the complete YAML manifest following these steps:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
data:
  password: c3VwZXJzZWNyZXQ= # base64 encoded "supersecret"

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/wordpress

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_USER: root

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.6
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: password
          ports:
            - containerPort: 80
              name: wordpress
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Explanation:

- **Secret**: Stores the MySQL root password.
- **PersistentVolume & PersistentVolumeClaim**: Allocates storage for MySQL and WordPress to ensure data persistence.
- **ConfigMap**: Provides database name, host, and user configurations for WordPress.
- **Deployment (MySQL)**: Creates a MySQL instance with persistent storage and a specified password.
- **Deployment (WordPress)**: Deploys WordPress, referencing MySQL's database configuration.
- **Service**: Exposes both MySQL and WordPress, with WordPress using a LoadBalancer to make the site accessible externally.

Make sure to adapt the `hostPath` in the `PersistentVolume` definitions if you are running on a local setup, as it's specific to the node's file system. In a production environment, you may want to use cloud-provided storage classes (like AWS EBS for Amazon, or GCE PD for Google Cloud).