To deploy a WordPress website with a MySQL database backend on Kubernetes, we'll need to create a series of YAML manifests for Kubernetes resources such as PersistentVolume, PersistentVolumeClaim, Secret, Deployment, and Service. Below, we'll break down each step required to get this setup.

### Step 1: Create Namespace (Optional)
It is often a good practice to use a separate namespace for deploying applications.
```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### Step 2: Create PersistentVolume and PersistentVolumeClaim
First, define the PersistentVolume and PersistentVolumeClaim for MySQL and WordPress to ensure data persistence.

MySQL PersistentVolume and PersistentVolumeClaim:
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteOnce
```

WordPress PersistentVolume and PersistentVolumeClaim:
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  resources:
    requests:
      storage: 5Gi
  accessModes:
    - ReadWriteOnce
```

### Step 3: Create Secret for MySQL Password
Define a Kubernetes Secret for storing sensitive information like the MySQL root password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cm9vdF9wYXNzd29yZA==  # base64 encoded password (e.g., "root_password")
```
Make sure to replace `cm9vdF9wYXNzd29yZA==` with the base64 encoded version of your actual password.

### Step 4: Create MySQL Deployment
Create a Deployment for the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Create MySQL Service
Create a Service to expose the MySQL database.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 6: Create WordPress Deployment
Create a Deployment for the WordPress site.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

### Step 7: Create WordPress Service
Create a Service to expose the WordPress site.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Putting It All Together
Finally, combine all the resources in one YAML file or separate them into multiple files as needed. Apply them to your Kubernetes cluster using `kubectl apply -f <filename>.yaml`.

Ensure you have properly configured your cluster to handle LoadBalancer type Services, or adjust the configuration accordingly if you are using Minikube or a similar local setup.