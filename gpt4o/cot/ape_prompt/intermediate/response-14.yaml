To deploy a WordPress website using a MySQL database in Kubernetes, we need to create several resources that will be defined in YAML files. The process involves setting up `PersistentVolumes` and `PersistentVolumeClaims`, `Secrets` for sensitive data such as passwords, a `Deployment` for each of WordPress and MySQL, and corresponding `Services` to allow communication between the components. We'll work through these step-by-step.

### Step 1: Create a Secret for MySQL Password

First, we'll need a Secret to store the MySQL root password and the WordPress database user password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
data:
  mysql-root-password: <base64_password_here>
  mysql-user-password: <base64_password_here>
```

You should replace `<base64_password_here>` with the base64-encoded values of your passwords. For example, use `echo -n "yourpassword" | base64` to get the base64 encoded password.

### Step 2: Define PersistentVolumes and PersistentVolumeClaims

We'll need a `PersistentVolume` and a `PersistentVolumeClaim` for both the WordPress and MySQL pods.

#### MySQL PersistentVolume and PersistentVolumeClaim

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
```

#### WordPress PersistentVolume and PersistentVolumeClaim

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/wordpress
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
```

### Step 3: Create MySQL Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: wordpress
            - name: MYSQL_USER
              value: wordpress
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 4: Create WordPress Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:5.7
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              value: wordpress
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user-password
            - name: WORDPRESS_TABLE_PREFIX
              value: wp_
          ports:
            - containerPort: 80
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

These YAML configurations define a basic framework for deploying WordPress with a MySQL backend on a Kubernetes cluster. Make sure your Kubernetes cluster has RBAC enabled to manage permissions appropriately, and you may need to tailor the storage path or Service type for specific environments or hosting solutions.