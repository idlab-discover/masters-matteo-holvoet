To deploy a WordPress website using MySQL as the backend in a Kubernetes cluster, you need to create several manifests including a Deployment, a Service, and potentially a PersistentVolumeClaim for both WordPress and MySQL. Let's work through this in a step-by-step manner:

### Step 1: Create a PersistentVolumeClaim for MySQL
First, we'll need storage for our MySQL database. We will create a `PersistentVolumeClaim` (PVC) for this.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 2: Create a MySQL Deployment
Next, we create a Deployment for MySQL. This will include the MySQL container specifications and reference the PVC for persistent storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        # Use secret in a real setup for the password
        - name: MYSQL_ROOT_PASSWORD
          value: yourpassword
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          value: yourpassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 3: Create a Service for MySQL
This service enables WordPress to communicate with MySQL internally.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Headless service
```

### Step 4: Create a PersistentVolumeClaim for WordPress (Optional)
If persistent storage is needed for WordPress uploads, you can create a similar claim:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 5: Create a WordPress Deployment
Now, let's create a Deployment for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          value: yourpassword
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 6: Create a Service for WordPress
This service exposes WordPress to external traffic.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Final Steps
Apply each of the above manifests using `kubectl apply -f <manifest-file>.yaml`. Make sure to replace `yourpassword` with a secure password and handle secrets more securely in a production setup (e.g., using Kubernetes Secrets).

This setup allows you to deploy WordPress backed by MySQL, with persistent storage for both applications. Adjust resource sizes (`storage` and `resources` requests/limits) according to your requirements.