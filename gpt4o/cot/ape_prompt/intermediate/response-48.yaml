To deploy a WordPress website using a MySQL database on Kubernetes, you'll need to create several Kubernetes resources, including PersistentVolumeClaims, Secrets, Deployments, and Services. Here's a step-by-step breakdown of the YAML manifest needed to accomplish this.

### Step 1: Create a Secret for MySQL

First, you need a Secret to store the MySQL root password, WordPress database name, user, and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # Base64 for "password"
  mysql-database: d29yZHByZXNz      # Base64 for "wordpress"
  mysql-user: d3B1c2Vy              # Base64 for "wpuser"
  mysql-password: d3BwYXNz          # Base64 for "wppass"
```

### Step 2: Define PersistentVolumeClaims

You'll need PersistentVolumeClaims for both MySQL and WordPress to store the data.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Create MySQL Deployment

Create a Deployment for the MySQL container, using the Secret to set the necessary environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 4: Create MySQL Service

Expose MySQL as a service so that WordPress can connect to it.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: Create WordPress Deployment

Create a Deployment for the WordPress container, setting the appropriate environment variables to connect to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

### Step 6: Create WordPress Service

Expose WordPress via a NodePort or LoadBalancer for external access.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30001  # This is a sample port number; adjust according to your needs
  selector:
    app: wordpress
```

### Putting It All Together

Combine the above YAML snippets into a single file (e.g., `wordpress-mysql-deployment.yaml`) and apply it to your Kubernetes cluster using:

```bash
kubectl apply -f wordpress-mysql-deployment.yaml
```

This configuration sets up WordPress with persistent storage and connects it to a MySQL database also with persistent storage, both running as separate pods managed by deployments. Adjust any of the values, such as storage requests or service types, as needed for your environment.