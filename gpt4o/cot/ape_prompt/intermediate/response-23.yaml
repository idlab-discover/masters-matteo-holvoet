Deploying a WordPress website with a MySQL backend in Kubernetes involves creating several resources, such as Deployments, Services, and PersistentVolumeClaims for data persistence. Let's go through it step-by-step:

### Step 1: Create Namespace
First, it's a good practice to create a separate namespace for your application:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### Step 2: Persistent Volume and Persistent Volume Claim for MySQL
To store MySQL data, you need a PersistentVolume and a PersistentVolumeClaim:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: MySQL Deployment
Deploy a MySQL container using the official MySQL image. Define environment variables to set up the database:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "your-root-password"  # Set a strong password
        - name: MYSQL_DATABASE
          value: "wordpress"
        - name: MYSQL_USER
          value: "wordpress"
        - name: MYSQL_PASSWORD
          value: "your-password"  # Set password for wordpress user
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 4: MySQL Service
Expose MySQL to the WordPress pod via a Kubernetes service:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 5: Persistent Volume and Persistent Volume Claim for WordPress
Though not strictly necessary if you don't need persistence for the WordPress files, it's often good to add storage:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 6: WordPress Deployment
Create a Deployment for WordPress and connect it to MySQL:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_NAME
          value: wordpress
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          value: "your-password"  # Must match with MySQL_PASSWORD
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 7: WordPress Service
Finally, expose the WordPress deployment as a service of type LoadBalancer to access it externally:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Deployment
Ensure that you replace `your-root-password` and `your-password` with strong, secure passwords of your choosing. Once you've done that, you can apply these manifests using `kubectl apply -f <filename>` for each section or combine them into a single file and apply it. This will deploy a WordPress site with a MySQL backend in Kubernetes.