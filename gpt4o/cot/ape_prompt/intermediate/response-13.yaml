To deploy a WordPress website using a MySQL database on Kubernetes, you'll need to create a couple of key components using YAML manifests: Persistent Volumes (PVs) and Persistent Volume Claims (PVCs) for storage, a Deployment for both WordPress and MySQL pods, and Services to expose these pods.

Let's break this down step by step:

1. **Persistent Volume and Persistent Volume Claim** for MySQL:

```yaml
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

2. **Deployment for MySQL:**

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "rootpassword" # Replace with a secure password
            - name: MYSQL_DATABASE
              value: "wordpress"
            - name: MYSQL_USER
              value: "wpuser"
            - name: MYSQL_PASSWORD
              value: "wppassword" # Replace with a secure password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

3. **Service for MySQL:**

```yaml
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

4. **Persistent Volume and Persistent Volume Claim** for WordPress:

```yaml
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

5. **Deployment for WordPress:**

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              value: wpuser
            - name: WORDPRESS_DB_PASSWORD
              value: wppassword
            - name: WORDPRESS_DB_NAME
              value: wordpress
          ports:
            - containerPort: 80
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pvc
```

6. **Service for WordPress:**

```yaml
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Explanation:
- **Persistent Volumes and Claims** are used to provide storage for MySQL and WordPress.
- **Deployments** are used to manage the Pods running MySQL and WordPress. Environment variables provide necessary configuration such as database name, user, and password.
- **Services** expose ports for MySQL and WordPress. For simplicity, MySQL is using a headless service within the cluster, while WordPress is exposed externally with a `LoadBalancer` service type (change depending on your cloud provider setup).

Ensure you replace placeholders like passwords with secure, meaningful values before deploying. Also, verify the host paths'/mnt/data/mysql' and '/mnt/data/wordpress' if running locallyâ€”adjust as necessary for your environment, especially when working on different orchestrations or storage backends.