To deploy a WordPress website using a MySQL database as the backend in Kubernetes, we'll need to create several YAML manifests for different resources. Each step will build on the previous one to ensure everything is correctly set up. We'll create:

1. A Namespace (optional, but recommended for organizing resources)
2. MySQL Deployment and Service
3. WordPress Deployment and Service
4. Persistent Volumes and Persistent Volume Claims for MySQL and WordPress
5. Secrets to store MySQL credentials

Let's go through each step:

### Step 1: Namespace

We'll create an optional namespace called `wordpress`.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### Step 2: Secrets for MySQL Credentials

We need a secret to store MySQL credentials securely. We'll create credentials for the `root` user and a WordPress-specific user.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress
type: Opaque
data:
  mysql-root-password: <base64-encoded-password>
  mysql-user: <base64-encoded-username>
  mysql-password: <base64-encoded-password>
```

- Replace `<base64-encoded-password>` and `<base64-encoded-username>` with your base64-encoded username and password.

You can generate a base64 encoded value using:

```sh
echo -n "your-password" | base64
```

### Step 3: Persistent Volumes and Claims

We'll create Persistent Volumes (PV) and Persistent Volume Claims (PVC) for both MySQL and WordPress data.

#### Persistent Volume for MySQL

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  namespace: wordpress
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data/mysql"
```

#### Persistent Volume Claim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

#### Persistent Volume for WordPress

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  namespace: wordpress
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data/wordpress"
```

#### Persistent Volume Claim for WordPress

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: MySQL Deployment and Service

Create a deployment and service for the MySQL container.

#### Deployment for MySQL

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### Service for MySQL

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: WordPress Deployment and Service

Create a deployment and service for the WordPress container.

#### Deployment for WordPress

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /var/www/html
          name: wordpress-storage
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

#### Service for WordPress

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Additional Considerations

- Ensure your Kubernetes cluster provider supports `LoadBalancer` service type, or modify it to `NodePort` or another service type if necessary.
- This configuration assumes the use of `hostPath` for persistent storage which is typically not suited for production environments. In production, use a cloud provider's persistent storage solution (like AWS EBS, GCP PD, or NFS).

By following these steps and applying these YAML manifests, your WordPress site should be deployed and connected to a MySQL database as the backend within a Kubernetes cluster.