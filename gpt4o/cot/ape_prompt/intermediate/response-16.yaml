To deploy a WordPress website using a MySQL database as the backend in Kubernetes, you'll need to create a series of YAML manifests to define a Deployment and Service for the WordPress and MySQL containers. We will go through this step-by-step:

### Step 1: Create a PersistentVolume and PersistentVolumeClaim for MySQL

First, create a PersistentVolume and PersistentVolumeClaim to store MySQL data, ensuring data persistence across pod restarts.

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /mnt/data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 2: Deploy MySQL with a Secret for MySQL Password

Create a Kubernetes Secret for storing the MySQL root password, database name, and WordPress user credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 encoded value for "password"
  mysql-database: d29yZHByZXNz         # base64 encoded value for "wordpress"
  mysql-user: d3B1c2Vy                 # base64 encoded value for "wpuser"
  mysql-password: d3BwYXNzd29yZA==     # base64 encoded value for "wppassword"
```

Deploy the MySQL Deployment and Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 3: Deploy WordPress with Environment Variables for Database Connection

Now, deploy the WordPress Deployment and Service:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Step 4: Summary

- The `PersistentVolume` and `PersistentVolumeClaim` are configured to hold MySQL data.
- A Kubernetes `Secret` is used for sensitive data such as passwords and database names.
- `Deployments` are created for both MySQL and WordPress.
- `Services` expose the deployments, where WordPress uses a `LoadBalancer` service type for external access.

These steps fully setup the WordPress and MySQL applications in your Kubernetes cluster. Apply the YAML files using commands like `kubectl apply -f <file-name>.yaml` in your terminal. Ensure base64 encoded values in Secrets are correctly updated based on your requirements.