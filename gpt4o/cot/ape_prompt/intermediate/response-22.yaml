Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database involves several steps. We will define separate Kubernetes objects such as `PersistentVolume`, `PersistentVolumeClaim`, `Secret`, `Deployment`, and `Service`. Follow this step-by-step guide:

### Step 1: Create a Secret for MySQL credentials

Create a `Secret` manifest to store your MySQL database username and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  labels:
    app: wordpress
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-user: <base64-encoded-user>
  mysql-password: <base64-encoded-password>
```

Replace `<base64-encoded-root-password>`, `<base64-encoded-user>`, and `<base64-encoded-password>` with base64-encoded strings of your credentials.

### Step 2: Create Persistent Volume and Claim for MySQL

Define `PersistentVolume` and `PersistentVolumeClaim` for MySQL data storage.

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  labels:
    type: local
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 3: Create MySQL Deployment and Service

Create a `Deployment` and `Service` to run MySQL.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
```

### Step 4: Create Persistent Volume and Claim for WordPress

Define the `PersistentVolume` and `PersistentVolumeClaim` for WordPress storage.

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  labels:
    type: local
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/wordpress
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 5: Create WordPress Deployment and Service

Create a `Deployment` and `Service` to run WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
    tier: frontend
```

This final service for WordPress is of type `LoadBalancer` to expose it to the outside world. 

### Final Steps

Apply these YAML definitions to your Kubernetes cluster using `kubectl apply -f <file-name>.yaml`. Make sure your cluster setup supports the use of `hostPath` volumes or replace them with other volume types like `PersistentVolume`, especially when deploying on cloud platforms.

Also, decode the database credentials and encode them using base64:

```shell
# Example of encoding
echo -n 'my_password' | base64
```

Replace `my_password` with your actual database credentials when encoding.