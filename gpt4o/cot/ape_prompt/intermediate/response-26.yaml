To deploy a WordPress website with a MySQL backend on Kubernetes, you'll need to create several resources, including Persistent Volumes, Persistent Volume Claims, Deployments, and Services. Hereâ€™s a step-by-step breakdown:

### Step 1: Create Persistent Volumes

First, we define the Persistent Volumes (PVs) for both WordPress and MySQL to store data persistently.

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/wordpress

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql
```

### Step 2: Create Persistent Volume Claims

Next, define the Persistent Volume Claims (PVCs) for WordPress and MySQL, which will use the PVs defined above.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 3: Create MySQL Deployment and Service

Create a deployment for MySQL and expose it with a service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: password123
        - name: MYSQL_DATABASE
          value: wordpress
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 4: Create WordPress Deployment and Service

Deploy WordPress and create a service to expose it.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          value: password123
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
```

### Explanation

- **Persistent Volumes and Claims:** Ensure data persistence beyond the lifespan of individual pods.
- **MySQL Deployment and Service:** Sets up MySQL with environment variables for the root password and database name. The service exposes MySQL to other pods in the cluster.
- **WordPress Deployment and Service:** Deploys WordPress with reference to the MySQL service and environment variables to connect to the database. The service is exposed as a `NodePort`, which allows external access to WordPress through a port on the node IP.

You can apply these YAML configurations to your Kubernetes cluster using `kubectl apply -f <file-name>.yaml`. Make sure to replace paths (`/mnt/data/mysql`, `/mnt/data/wordpress`) with appropriate paths in your cluster or use a storage class if applicable. Also, handle sensitive information such as passwords properly in production environments, potentially using Kubernetes Secrets.