To deploy a WordPress website using a MySQL database as the backend in a Kubernetes cluster, we need to create Kubernetes manifests for a few different resources: a PersistentVolume and PersistentVolumeClaim for each application (WordPress and MySQL), Deployment and Service for each application. Here's a step-by-step guide:

### Step 1: Create PersistentVolumes and PersistentVolumeClaims

Persistent storage is needed for both WordPress and MySQL to ensure data persistence across pod restarts.

#### MySQL PersistentVolume and PersistentVolumeClaim

```yaml
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

#### WordPress PersistentVolume and PersistentVolumeClaim

```yaml
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/wordpress
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 2: Create MySQL Deployment and Service

Deploy the MySQL database and expose it internally to the WordPress pod.

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: yourpassword
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wpuser
        - name: MYSQL_PASSWORD
          value: wppassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 3: Create WordPress Deployment and Service

Deploy the WordPress instance and expose it externally using a LoadBalancer or a NodePort service type.

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wpuser
        - name: WORDPRESS_DB_PASSWORD
          value: wppassword
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Additional Considerations

1. **Security**: Passwords and sensitive data should be managed securely, using Kubernetes Secrets to avoid hardcoding in manifests.
2. **Storage Classes**: Replace `hostPath` with your preferred storage class in cloud environments for better portability and scalability.
3. **Environment-Specific Adjustments**: Modify paths, ports, resource requests, and limits according to your environment's specs and needs.

These manifests provide a basic setup for deploying WordPress and MySQL on Kubernetes. Adjust storage paths, passwords, and service types as necessary for your specific use case and environment.