Certainly! To deploy a WordPress site with a MySQL backend in Kubernetes, you will need multiple YAML manifests for different Kubernetes resources, such as Deployments, Services, ConfigMaps, Secrets, and PersistentVolumeClaims (PVCs). Let's break it down step by step:

### Step 1: Create a Secret for MySQL Password

First, create a Secret to store the MySQL root password and the WordPress database password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  mysql-password: cGFzcw==           # base64 encoded 'pass'
```

### Step 2: Create a ConfigMap for WordPress Configuration

Next, create a ConfigMap to store the WordPress database configuration.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_USER: wordpress
  WORDPRESS_DB_NAME: wordpress
```

### Step 3: Create a PersistentVolumeClaim for MySQL

Define a PVC for MySQL to ensure data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: Create a MySQL Deployment and Service

Now, create a Deployment and Service for MySQL.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 5: Create a WordPress Deployment and Service

Finally, create a Deployment and Service for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:php7.4-apache
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Explanation

- **Secrets**: Used to store sensitive information like passwords, base64 encoded.
- **ConfigMap**: Stores configuration data like DB hostname and user that is not sensitive.
- **PersistentVolumeClaim**: Allocates persistent storage for MySQL to ensure data is retained across pod restarts.
- **Deployments**: Define the pod configuration for both WordPress and MySQL, including container images, ports, and environment variables.
- **Services**: Expose deployments internally and externally. WordPress uses a LoadBalancer type to make it accessible from outside the cluster.

You can apply these manifests to your Kubernetes cluster using `kubectl apply -f <filename.yaml>` for each file, or combine them into one file and apply at once. Make sure to replace any sensitive data with secure values.