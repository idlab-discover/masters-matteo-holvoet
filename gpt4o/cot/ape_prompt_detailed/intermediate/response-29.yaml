Certainly! To accomplish this, we'll break down the process into several steps, ensuring we meet each requirement with Kubernetes YAML manifests. This will involve creating ConfigMaps, Secrets, PersistentVolumeClaims, Deployments, and Services.

### Step 1: Create ConfigMaps and Secrets

First, we'll create a Secret to store sensitive data like MySQL root password, database name, user, and password. Then, we'll create a ConfigMap for non-sensitive data used by WordPress.

```yaml
# A Secret containing the MySQL credentials
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
data:
  mysql-root-password: <base64-encoded-password>
  mysql-database: <base64-encoded-database-name>
  mysql-user: <base64-encoded-user>
  mysql-password: <base64-encoded-password>

---
# A ConfigMap with WordPress configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: <database-name>
```

Note: Replace `<base64-encoded-password>`, `<base64-encoded-database-name>`, and `<base64-encoded-user>` with the base64-encoded values of your MySQL credentials. You can generate these using `echo -n 'value' | base64`.

### Step 2: Create PersistentVolumeClaims

Persistent storage is needed for MySQL to ensure data persistence.

```yaml
# PVC for MySQL database files
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Create MySQL Deployment and Service

We'll create a Deployment for the MySQL database, and a Service to expose it within the cluster.

```yaml
# Deployment for MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-storage
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
# Service to expose MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 4: Create WordPress Deployment and Service

We'll define a Deployment for WordPress configured to connect to the MySQL service, and a Service to expose WordPress to the external network.

```yaml
# Deployment for WordPress
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 80

---
# Service to expose WordPress
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Summary

1. **Secrets**: Store sensitive database credentials.
2. **ConfigMaps**: Store default WordPress configuration.
3. **PersistentVolumeClaims**: Ensure persistence for MySQL data.
4. **Deployments**: Manage the lifecycle of the WordPress and MySQL applications.
5. **Services**: Enable internal and external connectivity.

Once you've replaced the placeholders in the manifests with your actual data, you can apply them using `kubectl apply -f <filename>.yaml`. This will deploy the WordPress site with MySQL as its backend on your Kubernetes cluster.