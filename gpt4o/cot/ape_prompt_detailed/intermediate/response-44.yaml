To deploy a WordPress site with a MySQL backend on Kubernetes, we need a sequence of objects including ConfigMaps, Secrets, Deployments, PersistentVolumeClaims, and Services. We will create YAML manifests for each component step-by-step.

1. **Create a Secret for MySQL Password**

   This secret will store the MySQL root password and WordPress database password.

   ```yaml
   apiVersion: v1
   kind: Secret
   metadata:
     name: mysql-secret
   type: Opaque
   data:
     # This should be base64 encoded. For example, "rootpassword" -> "cm9vdHBhc3N3b3Jk"
     mysql-root-password: cm9vdHBhc3N3b3Jk
     mysql-wordpress-password: cm9vdHBhc3N3b3Jk
   ```

2. **Create a ConfigMap for WordPress**

   This ConfigMap will configure the database name, user, and host for WordPress.

   ```yaml
   apiVersion: v1
   kind: ConfigMap
   metadata:
     name: wordpress-config
   data:
     WORDPRESS_DB_NAME: wordpress
     WORDPRESS_DB_USER: wordpress
     WORDPRESS_DB_HOST: mysql
   ```

3. **Create the PersistentVolumeClaim for MySQL**

   This PVC will ensure data persistence for the MySQL database.

   ```yaml
   apiVersion: v1
   kind: PersistentVolumeClaim
   metadata:
     name: mysql-pvc
   spec:
     accessModes:
       - ReadWriteOnce
     resources:
       requests:
         storage: 5Gi
   ```

4. **Deploy the MySQL Database**

   A Deployment for MySQL which uses the secret and PVC.

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: mysql
   spec:
     replicas: 1
     selector:
       matchLabels:
         app: mysql
     template:
       metadata:
         labels:
           app: mysql
       spec:
         containers:
           - name: mysql
             image: mysql:5.7
             env:
               - name: MYSQL_ROOT_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-secret
                     key: mysql-root-password
               - name: MYSQL_DATABASE
                 value: "wordpress"
               - name: MYSQL_USER
                 value: "wordpress"
               - name: MYSQL_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-secret
                     key: mysql-wordpress-password
             ports:
               - containerPort: 3306
             volumeMounts:
               - name: mysql-storage
                 mountPath: /var/lib/mysql
         volumes:
           - name: mysql-storage
             persistentVolumeClaim:
               claimName: mysql-pvc
   ```

5. **Service for MySQL**

   A Service to allow connections to the MySQL Deployment.

   ```yaml
   apiVersion: v1
   kind: Service
   metadata:
     name: mysql
   spec:
     ports:
       - port: 3306
     selector:
       app: mysql
   ```

6. **Deploy WordPress**

   Deployment for the WordPress application, referencing the ConfigMap and Secret for configuration.

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: wordpress
   spec:
     replicas: 1
     selector:
       matchLabels:
         app: wordpress
     template:
       metadata:
         labels:
           app: wordpress
       spec:
         containers:
           - name: wordpress
             image: wordpress:latest
             envFrom:
               - configMapRef:
                   name: wordpress-config
             env:
               - name: WORDPRESS_DB_PASSWORD
                 valueFrom:
                   secretKeyRef:
                     name: mysql-secret
                     key: mysql-wordpress-password
             ports:
               - containerPort: 80
   ```

7. **Service for WordPress**

   A Service to expose WordPress, typically over HTTP on port 80.

   ```yaml
   apiVersion: v1
   kind: Service
   metadata:
     name: wordpress
   spec:
     type: LoadBalancer
     ports:
       - port: 80
     selector:
       app: wordpress
   ```

This setup creates a simple yet effective deployment of a WordPress website with a MySQL database on Kubernetes. Each component provides specific functionality, and it leverages Kubernetes features such as Secrets, ConfigMaps, and PV/PVC for effective configuration and data management.