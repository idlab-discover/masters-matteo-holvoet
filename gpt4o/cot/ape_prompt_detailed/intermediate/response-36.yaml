Creating a Kubernetes YAML manifest for deploying WordPress with a MySQL database involves several key components. We'll step through each required element to ensure all pieces work together effectively:

### Step 1: Create Secrets and ConfigMaps

First, let's define the Kubernetes Secret for sensitive data and a ConfigMap for non-sensitive configuration.

**Secret for MySQL root password:**

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 for 'password'
```

**ConfigMap for database name and user:**

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  mysql-database: wordpress
  mysql-user: wordpress
  mysql-password: wordpress-password
```

(Note: You can also use a Secret for the MySQL user and password if you wish to secure more of the configuration.)

### Step 2: Create PersistentVolume and PersistentVolumeClaim for MySQL

We need persistent storage to ensure the database data isn't lost when containers restart.

**PersistentVolumeClaim for MySQL data:**

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

*(Note: In a real-world scenario, ensure your cluster has corresponding PersistentVolumes or a proper StorageClass configuration.)*

### Step 3: Deploy MySQL

We'll define the Deployment and Service for MySQL.

**MySQL Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

**MySQL Service:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 4: Deploy WordPress

Next, let's define the Deployment and Service for WordPress.

**WordPress Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapName:
              name: wordpress-config
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
```

**WordPress Service:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Conclusion

This set of YAML manifests configures a WordPress instance with a MySQL backend, ensuring data persistence and security management via Secrets and ConfigMaps. You'll need to apply these configurations to your Kubernetes cluster using `kubectl apply -f <file-name>`. Remember to replace the dummy base64 passwords and configurations with your own before deploying in a production environment.