To create a Kubernetes YAML manifest for deploying a WordPress website with MySQL as the backend, we should structure the configuration into various components: ConfigMaps, Secrets, PersistentVolumeClaims, Deployments, and Services. Let's go through each part step-by-step.

### 1. Secure Sensitive Data with Secrets
First, we'll create a Secret to store sensitive data such as the MySQL root password, WordPress database name, and user credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-database: <base64-encoded-database-name>
  mysql-user: <base64-encoded-user>
  mysql-password: <base64-encoded-password>
```
Note: Use `echo -n 'value' | base64` to encode your values.

### 2. Configurations with ConfigMap
Next, we'll create a ConfigMap for the WordPress configuration connecting it to the MySQL database.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
```

### 3. Persistent Volume Claim for MySQL
A PersistentVolumeClaim is needed to ensure data persistence for the MySQL database.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 4. MySQL Deployment
Now, create the Deployment for MySQL, utilizing the Secret for environment variables and the PVC for storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

### 5. WordPress Deployment
Create the WordPress Deployment, connecting it to MySQL using the ConfigMap and environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 80
              name: wordpress
```

### 6. Services for Connectivity
Finally, create Services to expose both WordPress and MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None # Ensures StatefulSet compatibility

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Summary

Make sure to properly encode your secret data using base64 encoding. Additionally, you may want to customize resource requests, limits, and storage sizes according to your application's specific needs and environment.

This configuration provides the basic framework for deploying WordPress with a MySQL backend on Kubernetes, ensuring data persistence, secure management of sensitive information, and proper service exposure for communication.