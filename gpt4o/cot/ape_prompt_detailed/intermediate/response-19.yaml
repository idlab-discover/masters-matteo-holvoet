Creating a Kubernetes YAML manifest for deploying a WordPress application with a MySQL backend involves a few steps. We'll break this down into several components:

### 1. **Prerequisites**

Before we start, ensure you have the following:

- Kubernetes cluster access
- `kubectl` command-line tool installed and configured

### 2. **Create Secrets and ConfigMaps**

**a. MySQL Secret**: Store sensitive data like MySQL root password, database name, user, and user password. 

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-database: <base64-encoded-database-name>
  mysql-user: <base64-encoded-username>
  mysql-password: <base64-encoded-password>
```

Use `echo -n 'your-value' | base64` to encode your values.

**b. WordPress ConfigMap**: Store non-sensitive configuration options.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: <database-name>
```

### 3. **Create Persistent Volumes and Claims**

**a. PersistentVolumeClaim for MySQL**

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### 4. **Create MySQL Deployment and Service**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### 5. **Create WordPress Deployment and Service**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 80
              name: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Final Steps

1. Replace `<base64-encoded-value>` with the actual base64 encoded strings for your MySQL secrets.
2. Replace `<database-name>` in the ConfigMap with the actual database name.
3. Apply this YAML file using `kubectl`:

```sh
kubectl apply -f your-yaml-file.yaml
```

This YAML file will deploy a WordPress website with a MySQL database using persistent storage. The `wordpress` service type `LoadBalancer` will expose the WordPress application, which might require an external load balancer depending on your Kubernetes setup. Adjust storage and resource configurations as needed based on your environment.