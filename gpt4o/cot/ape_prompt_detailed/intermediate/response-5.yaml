Creating a Kubernetes manifest for deploying a WordPress website with a MySQL database involves several steps. We need to configure Deployments for both WordPress and MySQL, ensure persistent data storage via PersistentVolumeClaims, and set up Services for connectivity. We'll also leverage ConfigMaps and Secrets for handling configuration and sensitive data, respectively.

### Step 1: Secret and ConfigMap for MySQL
First, we need to create a Secret to store MySQL credentials and a ConfigMap for any configuration settings.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-database: <base64-encoded-database-name>
  mysql-user: <base64-encoded-username>
  mysql-password: <base64-encoded-password>
```

Example (with encoded values):
```yaml
data:
  mysql-root-password: dXNlcm5hbWU=
  mysql-database: d29yZHByZXNz
  mysql-user: dXNlcm5hbWU=
  mysql-password: cGFzc3dvcmQ=
```

Next, the ConfigMap for WordPress:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
```

### Step 2: PersistentVolume and PersistentVolumeClaim for MySQL
Define storage for MySQL data:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 3: Deployment for MySQL
Create a MySQL Deployment using the secret and PVC:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 4: Service for MySQL
Service to expose MySQL to other pods:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 5: Deployment for WordPress
Define the WordPress deployment using the ConfigMap and the MySQL Secret:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:php7.4-apache
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
```

### Step 6: Service for WordPress
Expose WordPress application:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

Combining all these configurations, you now have a full manifest for deploying a WordPress site with a MySQL backend on Kubernetes, ensuring data persistence and proper configuration management through Secrets and ConfigMaps. Make sure to replace the placeholders with actual, base64-encoded values.