Let's break down the creation of a Kubernetes YAML manifest to deploy WordPress with a MySQL database. We'll proceed through the following steps:

1. **Setup ConfigMaps and Secrets:**
   - Use a ConfigMap to store non-sensitive configuration information.
   - Use a Secret for sensitive data such as `MYSQL_ROOT_PASSWORD`.

2. **Persistent Storage:**
   - Define PersistentVolumeClaims (PVCs) for MySQL to ensure data persistence.

3. **Deployment for MySQL:**
   - Setup a Deployment object for the MySQL container that uses the defined PVC and Secret.

4. **Deployment for WordPress:**
   - Setup a Deployment object for the WordPress container that uses the configuration from the ConfigMap and Secret for database access.

5. **Service Configuration:**
   - Define Services to expose both MySQL and WordPress internally within the cluster for cross-pod communication.

Let's create the YAML manifest step-by-step:

### 1. ConfigMap and Secret

```yaml
# ConfigMap for WordPress Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress

---
# Secret for MySQL Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWxfcGFzc3dvcmQ= # This is "mysql_password" encoded in base64
  MYSQL_DATABASE: d29yZHByZXNz # This is 'wordpress' encoded in base64
  MYSQL_USER: d3AtdXNlcg== # This is 'wp-user' encoded in base64
  MYSQL_PASSWORD: d3AtcGFzcw== # This is 'wp-pass' encoded in base64
```

### 2. PersistentVolumeClaims

```yaml
# Persistent Volume Claim for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 3. MySQL Deployment

```yaml
# Deployment for MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

### 4. WordPress Deployment

```yaml
# Deployment for WordPress
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:php7.4-apache
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
```

### 5. Service Configuration

```yaml
# Service for MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Use a headless service for stateful connections

---
# Service for WordPress
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This configuration sets up WordPress with a MySQL backend across multiple resources in a Kubernetes cluster. ConfigMaps and Secrets manage configuration and sensitive information, while PVCs ensure persistent storage for data. The Services provided allow the containers to communicate within the cluster while exposing WordPress externally. Adjust the LoadBalancer configuration as required based on your Kubernetes environment.