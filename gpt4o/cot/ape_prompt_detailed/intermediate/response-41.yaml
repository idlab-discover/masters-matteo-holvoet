Sure! Let's break down the process into smaller steps.

### Step 1: Secrets and ConfigMaps

#### 1.1 Create a Secret for MySQL

Secrets are used to store sensitive data like passwords. We'll create a secret to store the MySQL root password and WordPress database password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-mysql-secret
type: Opaque
data:
  mysql-root-password: <base64_encoded_root_password>
  mysql-password: <base64_encoded_wordpress_db_password>
```

Replace `<base64_encoded_root_password>` and `<base64_encoded_wordpress_db_password>` with base64-encoded values of your desired passwords.

#### 1.2 Create a ConfigMap for WordPress

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wordpress
```

### Step 2: PersistentVolumeClaim for MySQL

To ensure data persistence, create a PersistentVolumeClaim for MySQL.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: MySQL Deployment

Now, define the MySQL deployment using the secret and PersistentVolumeClaim.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 4: WordPress Deployment

Create a deployment for the WordPress application, using the ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secret
              key: mysql-password
```

### Step 5: Services for MySQL and WordPress

To expose MySQL and WordPress, create service definitions for each.

#### 5.1 Service for MySQL

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

#### 5.2 Service for WordPress

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
```

### Deploying the Application

Put all these YAML configurations into a single file or separate files, then apply them using `kubectl`.

```bash
kubectl apply -f <filename>.yaml
```

Replace `<filename>.yaml` with the path to your file.

Ensure you've base64 encoded your passwords properly and replace those placeholders accordingly. This configuration will set up a WordPress site with a MySQL backend, each with their own persistent storage and accessible services.