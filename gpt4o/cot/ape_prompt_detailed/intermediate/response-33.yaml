To construct a Kubernetes YAML manifest for deploying a WordPress website using a MySQL database as the backend, you'll need to follow these steps:

1. **Create the Namespace (Optional)**:
    - It’s a best practice to isolate resources using a namespace. I'll include it here.

2. **Create Secrets for MySQL Credentials**:
    - Store sensitive data such as MySQL root password, database username, and password in Kubernetes secrets.

3. **Create a ConfigMap for WordPress Configuration**:
    - Store non-sensitive data that WordPress needs to connect to MySQL.

4. **Create the Persistent Volume Claims**:
    - Provision storage for WordPress and MySQL to ensure data persistence.

5. **Define MySQL Deployment**:
    - Set up MySQL with the necessary PersistentVolumeClaim.

6. **Define WordPress Deployment**:
    - Configure WordPress to interact with MySQL and handle web traffic.

7. **Define Services**:
    - Expose both WordPress and MySQL via Kubernetes Services for internal and external communication.

Here’s a step-by-step YAML manifest for all these resources:

```yaml
# Step 1: Namespace (Optional)
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-example

---

# Step 2: MySQL Secret for credentials
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-example
type: Opaque
data:
  mysql-root-password: VGhpczNQYXNzd29yZA== # Base64 encoded value for "This3Password"
  mysql-user: d29yZHByZXNz # Base64 encoded value for "wordpress"
  mysql-password: U2VjdXJlUGFzc3dvcmQ= # Base64 encoded value for "SecurePassword"

---

# Step 3: WordPress ConfigMap for DB information
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-example
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: wordpress

---

# Step 4: PersistentVolumeClaim for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-example
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

# Step 4: PersistentVolumeClaim for WordPress (Optional - for uploads)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-example
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

# Step 5: MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-example
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: "wordpress"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---

# Step 6: WordPress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-example
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc

---

# Step 7: MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-example
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None # Headless service for easier discovery

---

# Step 7: WordPress Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-example
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Explanation:
- **Namespace**: Optional but recommended to segregate resources.
- **Secrets**: Used for storing sensitive data. In this manifest, base64 encoded data for secrecy.
- **ConfigMap**: Used for non-sensitive configuration. Simplifies updates without restarting pods.
- **PVCs**: Utilized for persistent storage, ensuring data retention through pod lifecycle.
- **Deployments**: Manages the replica set, defines the desired state, and handles updates of the application.
- **Services**: Facilitates networking within the cluster, allowing components to communicate with each other.
  
Remember to adjust storage sizes, image versions, and other configurations according to your specific requirements. The `LoadBalancer` service type also depends on the cloud provider being used.