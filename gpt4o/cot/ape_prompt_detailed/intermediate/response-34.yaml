Sure! Let's break this down into a step-by-step process to create a comprehensive Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend. We'll proceed with individual configurations starting with the Secrets, ConfigMaps, PersistentVolumes, Deployments, and Services.

### Step 1: Create Secrets for MySQL

Secrets are used to store sensitive information such as database credentials securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=   # Base64 encoded password: password
  mysql-database: d29yZHByZXNz       # Base64 encoded database name: wordpress
  mysql-user: d3B1c2Vy               # Base64 encoded username: wpuser
  mysql-password: d3BwYXNzd29yZA==   # Base64 encoded password: wppassword
```

### Step 2: Create ConfigMap for WordPress

ConfigMaps are useful for holding non-sensitive configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: wordpress
```

### Step 3: Create a PersistentVolumeClaim for MySQL

This step ensures data persistence for the MySQL database.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi  # Adjust storage as needed
```

### Step 4: Create Deployments

Now, we deploy both WordPress and MySQL.

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
```

### Step 5: Create Services for WordPress and MySQL

These services will enable connectivity between the WordPress and MySQL pods and external access to WordPress.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

- We created a `Secret` for sensitive MySQL credentials, and a `ConfigMap` for WordPress configuration.
- A `PersistentVolumeClaim` ensures MySQL data persistence.
- Two `Deployments` were created, one each for WordPress and MySQL.
- Lastly, `Services` for both WordPress and MySQL facilitate internal communication and external access.

You can save each of these YAML configurations in a single `.yaml` file or separate files and apply them to your Kubernetes cluster using `kubectl apply -f <filename>.yaml`.