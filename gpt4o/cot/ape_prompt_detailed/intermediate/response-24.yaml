Sure! Let's break it down step-by-step:

### Step 1: Create the PersistentVolume and PersistentVolumeClaim for MySQL

To ensure MySQL data persists, we need a PersistentVolume (PV) and a PersistentVolumeClaim (PVC).

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 2: Create Secrets for Sensitive Data

We need to store the MySQL root password and other sensitive data in a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64_encoded_root_password>
  mysql-user: <base64_encoded_user>
  mysql-password: <base64_encoded_user_password>
  mysql-database: <base64_encoded_database_name>
```

Use `echo -n 'your_value' | base64` to encode values.

### Step 3: Create a ConfigMap for WordPress

This stores WordPress configuration that doesn't need to be sensitive.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: your_database_name
  WORDPRESS_DB_USER: your_database_user
```

### Step 4: Create MySQL Deployment

MySQL Deployment uses the Secret for the environment variable values, and the PVC for storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Create WordPress Deployment

The WordPress Deployment connects to MySQL using the service name and environment variables from the ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
```

### Step 6: Create Services for MySQL and WordPress

The services expose the MySQL and WordPress deployments.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Summary

- **PersistentVolume** and **PersistentVolumeClaim** for MySQL data storage.
- **Secret** for MySQL passwords.
- **ConfigMap** for non-sensitive WordPress configuration.
- **MySQL Deployment** uses PVC and Secret.
- **WordPress Deployment** connects to MySQL via ConfigMap and Secret.
- **Services** for both MySQL and WordPress.

Ensure all base64 encoded values are replaced with actual encoded data. Deploy these YAML manifests to a Kubernetes cluster for a functional WordPress site with MySQL as the backend.