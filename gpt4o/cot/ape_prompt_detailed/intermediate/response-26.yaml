To deploy a WordPress site with a MySQL backend on Kubernetes, we need to create a series of YAML manifests that include ConfigMaps, Secrets, PersistentVolumeClaims, Deployments, and Services. We'll break this down step by step:

### 1. Secrets for MySQL Database Credentials

First, we need a Secret to store the MySQL root password and the WordPress database credentials securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ= # base64 encoded 'password'
  mysql-user: d3B1c2Vy            # base64 encoded 'wpuser'
  mysql-password: d3BwYXNzd29yZA== # base64 encoded 'wppassword'
```

### 2. ConfigMap for WordPress Configuration

Create a ConfigMap for WordPress to store non-sensitive configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress
```

### 3. PersistentVolume and PersistentVolumeClaim for MySQL

Define a PersistentVolumeClaim for the MySQL database.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### 4. Deployment for MySQL

Create a Deployment for MySQL with the necessary configuration.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

### 5. Service for MySQL

Provide a Service to allow other pods to communicate with MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### 6. Deployment for WordPress

Create a Deployment for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 80
              name: wordpress
```

### 7. Service for WordPress

Create a Service to expose WordPress externally.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Summary

This setup includes:
- A Secret for MySQL credentials.
- A ConfigMap for WordPress configuration.
- A PersistentVolumeClaim for MySQL data persistence.
- Deployments for both MySQL and WordPress.
- Services to expose MySQL and WordPress.

Make sure to apply these YAML files in your Kubernetes cluster to deploy the application. Adjust storage size, passwords, database users, and other configurations as needed.