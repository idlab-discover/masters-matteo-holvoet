Let's create a Kubernetes configuration to deploy WordPress with a MySQL database backend. We'll break this into sections: ConfigMaps and Secrets for configuration, PersistentVolumeClaims for data persistence, Deployments for WordPress and MySQL, and Services to expose the applications.

### 1. Create a Secret for MySQL

We'll create a Secret to store the MySQL root password, database name, and user credentials. This protects sensitive data.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: Um9vdFBhc3N3b3JkMTIz  # Base64 for 'RootPassword123'
  mysql-user-password: VXNlclBhc3N3b3JkMTIz  # Base64 for 'UserPassword123'
  mysql-database: d29yZHByZXNz    # Base64 for 'wordpress'
  mysql-user: dXNlcm5hbWU=        # Base64 for 'username'
```

### 2. Create a ConfigMap for WordPress configuration

A ConfigMap can be used for the WordPress configuration if needed. We'll assume you have special configurations you might want to set.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_TABLE_PREFIX: "wp_"
```

### 3. Create PersistentVolumeClaims

We'll create a PersistentVolumeClaim for MySQL for data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 4. Create Deployments

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
```

### 5. Create Services

Create Services for MySQL and WordPress to allow them to be accessed by other pods and possibly external traffic.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Headless service to enable direct Pod communication
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer  # Use a LoadBalancer for external access or ClusterIP for internal access
  ports:
    - port: 80
  selector:
    app: wordpress
```

This setup provides you with a WordPress application running on Kubernetes with a MySQL backend. Be sure to customize passwords and other specifics as needed for your environment.