To deploy a WordPress website with a MySQL database on a Kubernetes cluster, we'll break it down into several components, ensuring each part is configured correctly. We're going to create and configure the following resources:

1. **Namespace (optional):** A dedicated namespace for isolation.
2. **Secrets:** To store MySQL root password and WordPress database password.
3. **ConfigMap:** For WordPress configuration.
4. **PersistentVolumeClaim (PVC):** To store MySQL data.
5. **Deployments:** For both WordPress and MySQL.
6. **Services:** To expose both WordPress and MySQL internally.

### Step 1: Create a Namespace (Optional)

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### Step 2: Create Secrets

We'll store sensitive information (like database passwords) in a Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress
type: Opaque
data:
  mysql-root-password: <base64_encoded_root_password>       # e.g., echo -n 'my-root-password' | base64
  mysql-database-password: <base64_encoded_database_password> # e.g., echo -n 'my-db-password' | base64
```

### Step 3: Create a ConfigMap

To store general configuration values for WordPress.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: wordpress
```

### Step 4: Create PersistentVolumeClaims

For MySQL data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 5: Create Deployments

**MySQL Deployment**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

**WordPress Deployment**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database-password
```

### Step 6: Create Services

**MySQL Service**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
```

**WordPress Service**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
    - port: 80
      targetPort: 80
```

### Summary

This Kubernetes YAML manifest defines all necessary resources to deploy WordPress with a MySQL backend. Make sure to replace `<base64_encoded_root_password>` and `<base64_encoded_database_password>` with your base64 encoded credentials. The WordPress service is of `LoadBalancer` type, which may require a cloud provider that supports this service type (e.g., AWS, GCP). Depending on your Kubernetes setup, you may opt to use other service types or further customize resources.