To deploy a WordPress website with a MySQL database backend on Kubernetes, we need to create several resources. These include Deployments, Services, PersistentVolumeClaims, ConfigMaps, and Secrets. We'll break down the YAML manifest into sections to address each requirement step by step.

### 1. Create a Secret for MySQL credentials
We need to ensure that database credentials are kept secure by using a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 encoded 'password'
  mysql-database: d29yZHByZXNz     # base64 encoded 'wordpress'
  mysql-user: dXNlcm5hbWU=         # base64 encoded 'username'
  mysql-password: cGFzc3dvcmQ=     # base64 encoded 'password'
```

### 2. Create a ConfigMap for WordPress configurations
This ConfigMap will hold WordPress-specific configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
```

### 3. Create a PersistentVolumeClaim for MySQL
This PVC will ensure that the MySQL data is persisted.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 4. Create a MySQL Deployment
The MySQL Deployment will use a PVC for data persistence and Secret for credentials.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### 5. Create a WordPress Deployment
The WordPress Deployment will reference the ConfigMap and Secret for database connection settings.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
```

### 6. Create a MySQL Service
This Service exposes MySQL to other pods in the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Headless service for direct pod access
```

### 7. Create a WordPress Service
This Service exposes WordPress to external traffic.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Conclusion
The above YAML manifests should be saved into individual files or combined into a single file and applied to your Kubernetes cluster using `kubectl apply -f <filename>`. This will deploy a WordPress site with MySQL as the backend, using best practices such as separating configuration and sensitive data using ConfigMaps and Secrets, and ensuring data persistence with PersistentVolumeClaims.