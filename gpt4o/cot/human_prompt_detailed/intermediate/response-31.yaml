Deploying a WordPress website with a MySQL database on a Kubernetes cluster involves several interconnected components. We'll create a Kubernetes manifest that includes ConfigMaps for configuration, Secrets for sensitive data, PersistentVolumeClaims for data persistence, Deployments to manage the application pods, and Services to expose the applications for communication.

Here's a step-by-step breakdown for creating the YAML manifest:

### Step 1: Create ConfigMaps
ConfigMaps are used for environment variables that are not sensitive. In this case, we'll use ConfigMaps for any non-sensitive configurations that WordPress might need.

```yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: "mysql"
```

### Step 2: Create Secrets
Secrets are used to store sensitive data such as database credentials. For the WordPress and MySQL connection, we need to store the MySQL root password, WordPress database name, username, and password.

```yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: "your_root_password"
  MYSQL_DATABASE: "wordpress"
  MYSQL_USER: "wpuser"
  MYSQL_PASSWORD: "wpuserpass"
```

### Step 3: PersistentVolumeClaims for MySQL
To ensure MySQL data is persistent, we'll use PersistentVolumeClaims.

```yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: MySQL Deployment
The MySQL Deployment will leverage the Secret for sensitive data and PVC for persistence.

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 5: WordPress Deployment
WordPress needs to connect to MySQL using the details stored in Secret and ConfigMap.

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 80
          name: wordpress
```

### Step 6: Services for MySQL and WordPress
Services will expose each deployment so they can communicate and be accessed from outside the cluster.

```yaml
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

This YAML manifest includes everything necessary to run WordPress with a MySQL backend in Kubernetes, with separation of sensitive information using ConfigMaps and Secrets, data persistence via PVCs, and service exposure. Adjust the values, particularly the credentials and resource requests, to fit your needs and environment.