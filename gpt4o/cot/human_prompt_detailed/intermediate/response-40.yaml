To create a Kubernetes YAML manifest that deploys a WordPress website with a MySQL database backend, you'll need several components: ConfigMaps, Secrets, Deployments for both WordPress and MySQL, PersistentVolumeClaims for data persistence, and Services to enable connectivity. Let's walk through the steps necessary to create each part:

### Step 1: Create a Secret for MySQL Credentials
Secrets are used to store sensitive information like MySQL passwords.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ= # Base64 encoded value of 'password'
  mysql-user: dXNlcg==              # Base64 encoded value of 'user'
  mysql-password: dXNlclBhc3M=      # Base64 encoded value of 'userPass'
```

### Step 2: Create a ConfigMap for WordPress Configuration
ConfigMaps hold non-sensitive data like MySQL DB name.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  wordpress-db-name: wordpressdb
```

### Step 3: Set up a PersistentVolumeClaim for MySQL
This is required for data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Create a MySQL Deployment
Deploy the MySQL database with environment variables sourced from the Secret and ConfigMap.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-name
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 5: Create a WordPress Deployment
Deploy WordPress and configure it to connect to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-name
        ports:
        - containerPort: 80
```

### Step 6: Create Services for WordPress and MySQL
Services enable connectivity between WordPress and MySQL as well as external access to WordPress.

#### MySQL Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

#### WordPress Service
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

By following these steps, you create a comprehensive Kubernetes YAML manifest to deploy WordPress with a MySQL backend. This setup ensures secure storage of sensitive information with Secrets, data persistence with PersistentVolumeClaims, and configurations are cleanly separated using ConfigMaps.