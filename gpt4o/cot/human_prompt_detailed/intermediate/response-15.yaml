Creating a Kubernetes YAML manifest for deploying a WordPress site with a MySQL backend is an excellent way to learn about managing applications with Kubernetes. We'll break down this process into several components:

### Step 1: Set Up Namespace (Optional but recommended)
Create a specific namespace for isolation.
```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
```

### Step 2: Create Secrets for Sensitive Data
Create a Secret to store sensitive information like database passwords.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-namespace
type: Opaque
data:
  mysql-root-password: bXlzcWxfcGFzc3dvcmQ=  # Base64 encoded value for "mysql_password"
  mysql-database: d29yZHByZXNz               # Base64 for "wordpress"
  mysql-user: d3B1c2Vy                       # Base64 for "wpuser"
  mysql-password: d3Bwd2Q=                   # Base64 for "wppwd"
```

### Step 3: Create ConfigMap for Configuration
Create a ConfigMap if you have any non-sensitive configuration parameters.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: wordpress-namespace
data:
  WORDPRESS_DB_NAME: "wordpress"
```

### Step 4: Create Persistent Volume Claims for MySQL
Set up PVC to ensure MySQL data is persisted.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 5: Create the MySQL Deployment
Deploy MySQL with the specified PVC and configurations.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 6: Create the WordPress Deployment
Write the deployment for WordPress connecting to the MySQL service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
```

### Step 7: Create Services to Expose WordPress and MySQL
Set up services to allow communication between WordPress and MySQL, and exposing WordPress to the internet.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Creating a headless service

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

These YAML files provide a comprehensive setup for deploying WordPress with a MySQL backend on Kubernetes. Adjust namespace and resource specifications as needed. After creating these files, apply them using `kubectl apply -f filename.yaml`. Ensure your Kubernetes environment (like Minikube, GKE, etc.) supports LoadBalancer type services if you're deploying it for production use, or consider using NodePort or Ingress Controller if not available.