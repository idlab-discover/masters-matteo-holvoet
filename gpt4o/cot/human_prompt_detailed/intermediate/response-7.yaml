To create a Kubernetes YAML manifest to deploy a WordPress site with a MySQL database, we'll need to go through a few steps:

1. **Create Secrets for Sensitive Data**: We'll store the MySQL root password, WordPress database user, and WordPress database password in a Kubernetes Secret.

2. **Create a ConfigMap for WordPress Configuration**: Store non-sensitive WordPress configuration settings in a ConfigMap.

3. **Create PersistentVolumeClaims**: This will ensure data persistence for the MySQL database.

4. **Create Deployments for MySQL and WordPress**: Deploy MySQL with the PersistentVolumeClaims for data storage, and WordPress with the necessary configurations.

5. **Create Services**: Expose both MySQL and WordPress with separate services for internal connectivity.

Below you will find the YAML manifests structured according to these steps:

```yaml
# Step 1: Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-mysql-secrets
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-user: <base64-encoded-mysql-user>
  mysql-password: <base64-encoded-user-password>

---
# Step 2: ConfigMap for WordPress
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress

---
# Step 3: PersistentVolumeClaims for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Step 4: MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secrets
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secrets
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
# Step 4: WordPress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secrets
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress-mysql-secrets
              key: mysql-password
        ports:
        - containerPort: 80

---
# Step 5: MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
  clusterIP: None # For headless service

---
# Step 5: WordPress Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
```

### Explanation
- **Secrets and ConfigMap**: Secrets store encoded sensitive data, whereas the ConfigMap holds the WordPress database name.
- **PVC**: Ensures persistent storage for MySQL data.
- **Deployments**: Define the number of replicas, container specifications, environment variables for database configuration, and volume mounts.
- **Services**: Allow network access to/from MySQL and WordPress containers. The WordPress service uses a LoadBalancer to be accessible externally.

Ensure to replace `<base64-encoded-root-password>`, `<base64-encoded-mysql-user>`, and `<base64-encoded-user-password>` with actual base64 encoded values of your credentials. You can encode them using the command `echo -n 'your-value' | base64`.