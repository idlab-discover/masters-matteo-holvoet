Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL backend involves several components. Here's a breakdown of what we need to do:

1. **ConfigMaps and Secrets**: 
   - We'll use a Secret to store sensitive data like the MySQL root password, WordPress database user, and password.
   - We'll use a ConfigMap for non-sensitive configuration details if needed.

2. **Persistent Volumes and Persistent Volume Claims**:
   - Define a PersistentVolumeClaim for the MySQL database to store data beyond the lifecycle of the Pod.

3. **Deployments**:
   - A Deployment for WordPress with container image, ports, and environment variables configured to connect to MySQL.
   - A Deployment for MySQL with container image, environment variables, and the PersistentVolumeClaim for data persistence.

4. **Services**:
   - A Service for WordPress to expose it and allow incoming traffic.
   - A Service for MySQL to allow WordPress to connect to the database.

Now, let's create the YAML manifest:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: dG9wU2VjcmV0 # Base64 encoded root password
  mysql-user: d2Vic2l0ZQ==         # Base64 encoded MySQL user
  mysql-password: d2Vicy1zdDawZGF0YXNl     # Base64 encoded MySQL password

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-persistent-storage
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  clusterIP: None # Headless service if necessary

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer # Use LoadBalancer to expose externally if needed
```

### Step-by-Step Explanation:

1. **Secret and ConfigMap**: 
   - Secrets are created for the MySQL sensitive information. Remember to encode the values in base64 before placing them in the YAML.

2. **Persistent Volume Claim**: 
   - A PersistentVolumeClaim ensures MySQL data is stored persistently.

3. **Deployments**:
   - The MySQL deployment is configured with environment variables populated from the secret and links to the PVC for data storage.
   - The WordPress deployment uses environment variables to connect to the MySQL database service.

4. **Services**:
   - A ClusterIP service for MySQL allows other pods to access it via the 'mysql' hostname.
   - A LoadBalancer service for WordPress exposes it to the internet assuming you are on a cloud environment that supports LoadBalancers.

Note that the WordPress Service type LoadBalancer is useful if you are on a cloud provider. If not, you might need to use a NodePort or ingress configuration for external access.