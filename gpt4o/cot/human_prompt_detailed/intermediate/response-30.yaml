To create a complete Kubernetes setup for a WordPress website backed by a MySQL database, we'll follow these steps:

1. **Create a Secret for MySQL credentials**: This will store sensitive information like the MySQL root password and the WordPress database user password.

2. **Create a ConfigMap for WordPress configuration**: This will store non-sensitive environment variables required for WordPress.

3. **Define PersistentVolumeClaims**: For MySQL data persistence, we'll create a PVC.

4. **Create Deployments for MySQL and WordPress**: This will define the pods and how they should be run.

5. **Create Services to expose MySQL and WordPress**: These will enable network connectivity.

Here's a step-by-step breakdown of the YAML manifest:

### Step 1: Secret for MySQL

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-user-password: <base64-encoded-user-password>
```

**Note**: Use `echo -n 'your-password' | base64` to encode your passwords.

### Step 2: ConfigMap for WordPress

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_HOST: mysql
```

### Step 3: PersistentVolumeClaim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: Deployment for MySQL

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: MYSQL_USER
          value: wordpress_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Deployment for WordPress

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_USER
          value: wordpress_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        ports:
        - containerPort: 80
          name: wordpress
```

### Step 6: Service for MySQL

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 7: Service for WordPress

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This manifest describes a full setup for deploying a WordPress site with a MySQL backend, using Kubernetes objects to manage configurations, credentials, and persistence. Adjust the storage size and other parameters as per your requirements.