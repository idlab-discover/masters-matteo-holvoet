Creating a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database involves several key components, such as Deployments for both WordPress and MySQL, PersistentVolumeClaims for MySQL data persistence, ConfigMaps, Secrets, and Services for enabling connectivity. Let's go through it step-by-step.

### Step 1: Create a ConfigMap and a Secret
First, define a ConfigMap for general configuration and a Secret for storing sensitive data such as database passwords.

```yaml
# ConfigMap for WordPress settings
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
```

```yaml
# Secret for MySQL credentials
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cm9vdF9wYXNzd29yZA== # Base64 encoded 'root_password'
  MYSQL_DATABASE: d29yZHByZXNz # Base64 encoded 'wordpress'
  MYSQL_USER: d3BfdXNlcg== # Base64 encoded 'wp_user'
  MYSQL_PASSWORD: d3BfcGFzc3dvcmQ= # Base64 encoded 'wp_password'
```

### Step 2: Create PersistentVolumeClaims
Define PVCs to ensure MySQL data persists across pod restarts.

```yaml
# PersistentVolumeClaim for MySQL data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Create Deployments
Define Deployments for WordPress and MySQL.

```yaml
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

```yaml
# WordPress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
```

### Step 4: Create Services
Define Services to enable connectivity to both WordPress and MySQL.

```yaml
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
```

```yaml
# WordPress Service
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
  - port: 80
    targetPort: 80
```

### Summary

1. **ConfigMap:** Used to store configuration data for WordPress.
2. **Secret:** Secures sensitive MySQL information.
3. **PersistentVolumeClaim:** Ensures MySQL data persists across pod restarts.
4. **Deployments:** Manage lifecycle of WordPress and MySQL pods.
5. **Services:** Allow connectivity between WordPress and MySQL containers.

Deploy this entire setup in your Kubernetes cluster by applying these YAML configurations. Ensure Kubernetes and a storage provisioner (e.g., default, nfs) are correctly set up and persistent storage is configured to handle PVCs.