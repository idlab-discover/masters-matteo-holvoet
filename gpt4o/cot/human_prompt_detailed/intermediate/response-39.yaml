To create a Kubernetes YAML manifest for deploying a WordPress site with a MySQL backend, we'll break it down into various components, such as ConfigMaps, Secrets, PersistentVolumes, PersistentVolumeClaims, Deployments, and Services. Here's a step-by-step approach:

### Step 1: Create a Secret for MySQL

We need to store the MySQL credentials securely. This includes the MySQL root password and the WordPress database password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: bXlzcXwtc2VjcmV0 # Base64 encoded value for 'mysql-root-secret'
  mysql-wordpress-password: d29yZHByZXNzLXNlY3JldA== # Base64 encoded value for 'wordpress-secret'
```

### Step 2: Create a ConfigMap for WordPress Configuration

We will create a ConfigMap to store WordPress configuration data such as the database name and user.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DATABASE_NAME: wordpress
  WORDPRESS_DATABASE_USER: wordpress
```

### Step 3: Create PersistentVolumeClaims

Persistent storage is necessary for both WordPress and MySQL. Here, we create PersistentVolumeClaims.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 4: Create the MySQL Deployment and Service

We define the MySQL Deployment and expose it via a Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DATABASE_NAME
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DATABASE_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-wordpress-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 5: Create the WordPress Deployment and Service

Next, we define the WordPress Deployment and expose it via a Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql:3306
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DATABASE_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DATABASE_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-wordpress-password
          ports:
            - containerPort: 80
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Summary

This manifest provides a complete setup for deploying WordPress with a MySQL backend on Kubernetes, including secure handling of sensitive data and persistent storage for both applications. Adjust storage, image versions, and network types as necessary for your specific environment and needs.