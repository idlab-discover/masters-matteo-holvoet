To create a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database, we'll break it down into several key components: PersistentVolumeClaims (PVCs) for MySQL data persistence, Secrets for sensitive data, ConfigMaps for configuration, Deployments for both WordPress and MySQL, and Services for connectivity. Let's outline each step:

1. **PersistentVolumeClaims (PVCs):** We'll need a PVC for MySQL data persistence.

2. **Secrets:** We'll store sensitive information like the MySQL root password and the WordPress database password in a Secret.

3. **ConfigMaps:** Used to store configuration settings that aren't sensitive, like database name and user.

4. **Deployments:** Define the Deployments for the MySQL and WordPress containers.

5. **Services:** Create Services to expose the MySQL and WordPress applications to other parts of the cluster, and externally if needed.

Here is the complete YAML manifest:

```yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: c2VjdXJlcGFzc3dvcmQ= # "securepassword" base64 encoded.
  mysql-password: YmFzZXBhc3M= # "basepass" base64 encoded.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wordpressuser

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:5.7
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Explanation:

- **PersistentVolumeClaim:** The `mysql-pvc` is created to store MySQL data so it persists beyond the lifecycle of the container.

- **Secret:** The `mysql-secret` stores the MySQL root password and database password securely using base64 encoding.

- **ConfigMap:** The `wordpress-config` holds non-sensitive configuration data for the database.

- **Deployment for MySQL:** 
  - Uses the MySQL 5.7 image.
  - Configures MySQL to use the secrets and config map for database credentials and settings.
  - Connects the PVC for persistent storage.

- **Deployment for WordPress:**
  - Uses the WordPress 5.7 image.
  - Configured to connect to the MySQL database using the environment variables set from the secret and the config map.

- **Services:**
  - The `mysql` Service exposes the database within the cluster at port 3306.
  - The `wordpress` Service exposes the WordPress application to external traffic via a LoadBalancer at port 80 (Depending on your Kubernetes environment, you might need to adjust this type for your specific setup).

This setup ensures separation of sensitive information (using Secrets), configuration modifiability (using ConfigMaps), and data persistence (using PVCs). Make sure your Kubernetes cluster supports LoadBalancer type services, or you may need to use NodePort and manage external access differently.