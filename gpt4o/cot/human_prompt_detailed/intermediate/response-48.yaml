To deploy a WordPress website with a MySQL database as the backend in Kubernetes, you'll need to create a comprehensive YAML manifest that covers Deployments, Services, PersistentVolumeClaims (PVCs), ConfigMaps, and Secrets. Here's a step-by-step breakdown.

### Step 1: Create a Secret for MySQL Password

Store the MySQL root and WordPress database password securely using a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  root-password: cGFzc3dvcmQ=    # base64 encoded value of 'password'
  wordpress-password: cGFzc3dvcmQ=  # base64 encoded value of 'password'
```

### Step 2: Create a ConfigMap for MySQL Initialization Configuration

ConfigMaps can be used to store non-sensitive configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  database-name: wordpress
```

### Step 3: PersistentVolumeClaim for MySQL

Request storage for MySQL to persist data.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: MySQL Deployment

Configure the MySQL deployment with the PVC, Secret, and ConfigMap.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database-name
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: wordpress-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: MySQL Service

Expose the MySQL deployment internally with a ClusterIP service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
```

### Step 6: WordPress Deployment

Deploy the WordPress application, configuring it to connect to MySQL using environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: wordpress-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: database-name
        ports:
        - containerPort: 80
```

### Step 7: WordPress Service

Expose the WordPress deployment to external access using a NodePort or LoadBalancer service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort  # or LoadBalancer if your environment supports it
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30000  # adjust as necessary
  selector:
    app: wordpress
```

### Additional Steps

1. **Base64 Encoding**: Ensure that the base64 encoding of any sensitive data (for Secrets) is correctly formatted (`echo -n 'password' | base64`).
2. **Testing**: Deploy the above YAML on your Kubernetes cluster and check the pods, services, and PVCs for successful deployment.
3. **Security and Resource Consideration**: Further refine resource requests/limits and security context based on your deployment environment for production readiness.

Deploy all these configurations using `kubectl apply -f <filename>.yaml`, ensuring each section is in a separate file or combined as needed. Adjust any paths or parameters necessary for your specific environment or use case.

### Conclusion

By following these steps, you have effectively created a scalable and secure deployment for WordPress and MySQL in Kubernetes, leveraging important resources like Secrets, ConfigMaps, and PersistentVolumeClaims for robust configuration management and data persistence.