Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database involves several steps. This includes creating ConfigMaps for configuration, Secrets for sensitive data, Deployments for application management, PersistentVolumeClaims for data persistence, and Services for networking.

Here's a step-by-step outline of how we can achieve this:

1. **Secrets**: Store the MySQL password securely.
2. **ConfigMap**: Store the configuration details for the WordPress site, such as the database name, username, and host.
3. **PersistentVolumeClaims**: Create persistent storage for the MySQL database.
4. **Deployments**: Define application deployments for both WordPress and MySQL.
5. **Services**: Create services for WordPress and MySQL to allow network access.

Below is a comprehensive YAML manifest that covers all these elements:

```yaml
---
# Step 1: Secret for MySQL password
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  # Store your base64 encoded password (echo -n "yourpassword" | base64)
  mysql-root-password: dXNlcg== # e.g., "user"

---
# Step 2: ConfigMap for WordPress configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: root
  WORDPRESS_DB_HOST: mysql

---
# Step 3: PersistentVolumeClaim for MySQL data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Step 4: Deployment for MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
# Step 5: Deployment for WordPress
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password

---
# Step 6: Service for MySQL
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None # Headless service for stable DNS

---
# Step 7: Service for WordPress
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Explanation:
- **Secrets**: `mysql-root-password` is base64 encoded to be stored securely.
- **ConfigMap**: Used for storing non-sensitive configuration information.
- **PersistentVolumeClaim**: Ensures data durability for the MySQL database.
- **Deployments**: Define how the WordPress and MySQL applications are created and scaled.
- **Services**: Provide persistent networking access to the WordPress and MySQL Pods.

This complete setup ensures a functional WordPress site backed by a durable MySQL database. Make sure to replace any placeholder values like passwords or adjust resource requests as per your system configuration and requirements.