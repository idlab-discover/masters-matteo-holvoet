To deploy a WordPress website with a MySQL backend on Kubernetes, you need to cover several aspects: container configurations, persistent storage, services, configuration management, and secret management. I'll walk you through creating the necessary YAML manifests step by step.

### Step 1: Create a Secret for MySQL

First, let's store sensitive data, such as the MySQL password, in a Kubernetes Secret. 

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: default
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # This is "password" base64 encoded. Change this!
```

### Step 2: Create a ConfigMap for WordPress and MySQL

ConfigMaps are used to store non-sensitive configuration data. In this scenario, we can store database names and user details.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: default
data:
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wordpress
```

### Step 3: Persistent Volume Claims for MySQL

To ensure data persistence for MySQL, we need PersistentVolumeClaims.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Deploy MySQL

Now, we create a MySQL Deployment that uses the PersistentVolumeClaim for data storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: default
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: MYSQL_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

### Step 5: Service for MySQL

To enable connectivity for MySQL, we expose it with a Service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: default
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 6: Deploy WordPress

Next, we create the WordPress Deployment referencing the MySQL Service and storage.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: default
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql:3306
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
          ports:
            - containerPort: 80
              name: wordpress
```

### Step 7: Service for WordPress

Finally, we expose WordPress using a Service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: default
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

This YAML manifest covers the essentials of deploying WordPress with a MySQL backend on Kubernetes, complete with persistent storage and proper service exposure. You can apply these manifests to your Kubernetes cluster using `kubectl apply -f <filename>`. Adjust the configurations to match your specific requirements, such as namespace, resource sizes, and image versions.