To create a comprehensive Kubernetes YAML manifest for deploying a WordPress site with a MySQL database backend, follow these key steps:

### Step 1: Define ConfigMap and Secret

We'll use a ConfigMap for non-sensitive configurations and a Secret for database credentials.

#### ConfigMap for WordPress
- Contains configurations like the WordPress table prefix.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_TABLE_PREFIX: wp_
```

#### Secret for MySQL
- Stores sensitive information like MySQL root password, WordPress database name, user, and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: <base64_encoded_mysql_root_password>
  MYSQL_DATABASE: <base64_encoded_database_name>
  MYSQL_USER: <base64_encoded_user_name>
  MYSQL_PASSWORD: <base64_encoded_password>
```

*Note: Use base64 encoding for the actual values.*

### Step 2: Persistent Volume and Persistent Volume Claim for MySQL

Define storage persistence for MySQL to ensure data is retained across pod restarts.

#### PersistentVolumeClaim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 3: Deployment Resources

Define Deployments for WordPress and MySQL:

#### MySQL Deployment

Utilizes the PVC and Secret you created.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### WordPress Deployment

Links to the MySQL service using environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_TABLE_PREFIX
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_TABLE_PREFIX
```

### Step 4: Define Services

Expose MySQL and WordPress applications.

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Final Notes
- Ensure you replace `<base64_encoded_*>` placeholders with actual base64-encoded values.
- Consider adding resource requests and limits for production environments.
- The LoadBalancer type for the WordPress Service might require a cloud provider that supports load balancers.

By following these steps, you create a manifest capable of deploying a WordPress website with a MySQL backend, with persistent storage and appropriate use of configuration management tools.