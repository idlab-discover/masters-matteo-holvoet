To create a Kubernetes manifest for deploying a WordPress website with a MySQL database backend, you need several components: ConfigMaps for non-sensitive configuration data, Secrets for sensitive data (like passwords), Deployments for both WordPress and MySQL, PersistentVolumeClaims for MySQL data persistence, and Services to expose the applications. Here's how you can organize these components step by step:

### Step 1: Create a Secret for MySQL Password
First, create a Secret for storing the MySQL root password and WordPress database user credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
type: Opaque
data:
  mysql-root-password: <Base64-encoded-root-password>
  mysql-user: <Base64-encoded-db-user>
  mysql-password: <Base64-encoded-db-password>
```

Use a tool like `echo -n 'my-password' | base64` to encode your passwords.

### Step 2: Create a ConfigMap for WordPress Configuration
Next, create a ConfigMap to store non-sensitive information such as database name.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  database-name: wordpress_db
```

### Step 3: Create PersistentVolumeClaims for MySQL
Set up data persistence for MySQL using PersistentVolumeClaims.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

### Step 4: Create MySQL Deployment
Configure the MySQL Deployment to use the previously created PVC and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.7
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: database-name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

### Step 5: Create MySQL Service
Expose MySQL via a ClusterIP Service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 6: Create WordPress Deployment
Set up the WordPress Deployment using the ConfigMap and Secret for configuration.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - image: wordpress:latest
          name: wordpress
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: database-name
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-password
          ports:
            - containerPort: 80
              name: wordpress
```

### Step 7: Create WordPress Service
Expose WordPress via a NodePort or LoadBalancer Service.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress
```

This is a basic setup to deploy WordPress with a MySQL database on Kubernetes. It's crucial to manage your Secrets carefully and ensure the security of your Kubernetes cluster. Additionally, consider integrating this setup into a Continuous Deployment pipeline for production use.