Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database involves several components. We'll need Deployments for both WordPress and MySQL, PersistentVolumeClaims for MySQL data persistence, Services for connectivity, and ConfigMaps and Secrets for configuration management. Let's outline the steps:

### Step 1: Create a Secret for MySQL
We'll use a Kubernetes Secret to store sensitive data such as the MySQL root password, database name, and WordPress user credentials.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ= # 'password' encoded in base64
  mysql-database: d29yZHByZXNz # 'wordpress' encoded in base64
  mysql-user: d3B1c2Vy # 'wpuser' encoded in base64
  mysql-password: cGFzc3dvcmQ= # 'password' encoded in base64
```

### Step 2: Create a PersistentVolumeClaim for MySQL
A PVC is essential for ensuring that our MySQL data persists.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Create a Deployment for MySQL
This deployment will use the MySQL Docker image and link the PVC for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 4: Create a Service for MySQL
This service exposes MySQL to the WordPress Deployment.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 5: Create a Deployment for WordPress
Now we'll set up the WordPress Deployment, with WordPress accessing the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        ports:
        - containerPort: 80
```

### Step 6: Create a Service for WordPress
This service exposes the WordPress application to the wider internet.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
```

As you set up each component, ensure you have the right configurations in terms of environment variables, port settings, and references to Secrets and PersistentVolumeClaims. You can adjust storage sizes, image versions, and other specific settings based on your exact requirements and Kubernetes environment.