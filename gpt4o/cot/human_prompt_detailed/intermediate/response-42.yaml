To deploy a WordPress website with a MySQL database using Kubernetes, you need to create a comprehensive YAML manifest that includes all necessary Kubernetes objects. Here's how to structure the manifest logically step-by-step:

### Step 1: Create a Secret for MySQL

MySQL credentials (such as `MYSQL_ROOT_PASSWORD`, `MYSQL_USER`, `MYSQL_PASSWORD`, `MYSQL_DATABASE`) are considered sensitive information and should be stored in a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-user: <base64-encoded-user>
  mysql-password: <base64-encoded-password>
  mysql-database: <base64-encoded-database>
```

Replace `<base64-encoded-xxx>` with the base64 encoded values of your actual credentials.

### Step 2: Create a ConfigMap for WordPress

The WordPress container needs database connection details. You'll use a ConfigMap to store these configurations.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_NAME: <your-database-name>
  WORDPRESS_DB_USER: <your-database-user>
```

### Step 3: Define Persistent Volume Claims for MySQL

MySQL requires persistent storage, so we need to create a PersistentVolumeClaim.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: Create MySQL Deployment

Deploy MySQL with the appropriate configuration, using the Secret and PersistentVolumeClaim for persistence and configuration.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Create WordPress Deployment

Configure WordPress deployment to connect to MySQL, using the ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
```

### Step 6: Create Services for MySQL and WordPress

Create two services to expose MySQL and WordPress deployments.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  clusterIP: None  # ClusterIP None ensures the service can be accessed within the cluster only

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```

### Summary:
- **Secret:** Store sensitive MySQL credentials.
- **ConfigMap:** Store WordPress database configs.
- **PVC:** Provide persistence to MySQL data.
- **Deployments:** Define replicas, images and environment config for containers.
- **Services:** Expose the pods for networking.

This comprehensive manifest prepares a scalable WordPress application connected to a MySQL backend, leveraged with ConfigMap, Secret, persistent storage, and services in Kubernetes. Be sure to replace placeholders and encoded values with the actual configuration to deploy successfully.