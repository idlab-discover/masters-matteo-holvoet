To create a complete Kubernetes YAML manifest to deploy a WordPress website with a MySQL database, we'll break down the task into several steps:

1. **Define the Secret for MySQL Password**: First, create a Kubernetes Secret to store the MySQL root password and the WordPress database user's password.

2. **Create ConfigMap for WordPress**: Use a ConfigMap for WordPress configuration.

3. **Setup Persistent Volumes and Persistent Volume Claims**: Define Persistent Volumes and Persistent Volume Claims for MySQL data persistence.

4. **Create MySQL Deployment and Service**: Define the MySQL deployment and service.

5. **Create WordPress Deployment and Service**: Define the WordPress deployment and service.

Now, let's go through each of these steps and construct the YAML files:

### 1. Secret for MySQL Password

We'll store sensitive information using a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-root-password>
  mysql-user-password: <base64-user-password>
```

Replace `<base64-root-password>` and `<base64-user-password>` with your encoded passwords. Use the `echo -n 'yourpassword' | base64` command to encode them.

### 2. ConfigMap for WordPress

Create a ConfigMap for WordPress that includes optional configurations.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  wp-config.php: |
    define('WP_MEMORY_LIMIT', '256M');
    define('WP_DEBUG', false);
```

### 3. Persistent Volumes and Persistent Volume Claims

Introduce the Persistent Volume and Persistent Volume Claim for MySQL.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 4. MySQL Deployment and Service

Define the MySQL Deployment and Service to allow WordPress to connect to it.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### 5. WordPress Deployment and Service

Create the WordPress Deployment and corresponding Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
          name: wordpress
      volumes:
      - name: wordpress-config-volume
        configMap:
          name: wordpress-config

---

apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Final Notes

- The WordPress Deployment uses a Service of type LoadBalancer. Change this to NodePort or ClusterIP if you're running on a local Kubernetes setup without a cloud provider.
- Adjust storage, the number of replicas, or other configuration details to fit your requirements and cluster capabilities.

This YAML manifest can be applied using the `kubectl apply -f <filename.yaml>` command to create all components in your Kubernetes cluster. Remember to replace placeholders and customize as necessary for your security and performance needs.