To deploy a WordPress website with a MySQL database backend on Kubernetes, we'll need to create several components using YAML manifests. Let's proceed step-by-step, keeping in mind that we need to use Deployments, Services, PersistentVolumeClaims, ConfigMaps, and Secrets to properly configure and deploy the applications.

### Step 1: Create a Secret for MySQL

First, store sensitive data such as MySQL root password and WordPress database password in Kubernetes Secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=  # base64 for "password"
  mysql-password: cGFzc3dvcmQ=        # base64 for "password"
```

### Step 2: Create a ConfigMap for WordPress

Configuration data such as database name and user can be stored in a ConfigMap.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  wordpress-db-name: wordpress
  wordpress-db-user: user
```

### Step 3: Create a PersistentVolumeClaim for MySQL

MySQL requires persistent storage for its data.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Create MySQL Deployment

The MySQL Deployment will make use of the Secret for passwords and the PersistentVolumeClaim for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-name
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 5: Create MySQL Service

To expose MySQL internally to the WordPress application.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 6: Create WordPress Deployment

The WordPress Deployment will use environment variables to connect to MySQL.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-name
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: wordpress-db-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
          name: wordpress
```

### Step 7: Create WordPress Service

Expose WordPress to the outside world to allow users to access the site.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Conclusion

With these steps, you've created a complete Kubernetes setup for deploying a WordPress site with a MySQL backend. This setup includes deployments, services, and persistent storage configurations, using best practices such as separating configuration and secrets from the application code.