Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database involves multiple steps. Let's break it down into different components:

1. **Create Secrets for Sensitive Data:** You need to store sensitive information like MySQL root password and WordPress database password in Kubernetes Secrets.

2. **Create a ConfigMap for Configuration:** WordPress specific configurations can be put in a ConfigMap.

3. **Create PersistentVolumeClaims (PVC):** Define PVCs to store MySQL data persistently.

4. **Deploy MySQL:** Create a Deployment for the MySQL container using the PVC and Secrets for configuration.

5. **Deploy WordPress:** Create a Deployment for the WordPress container using the appropriate environment variables and ConfigMap.

6. **Create Services:** Define Services to allow WordPress to connect to MySQL and expose WordPress to end users.

Now, let's write the YAML files for each of these components.

### Step 1: Create Secrets for Sensitive Data

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-user: <base64-encoded-username>
  mysql-password: <base64-encoded-password>
  mysql-database: <base64-encoded-database>
```

To get the base64 encoded values, you can use the following command in a terminal:
```bash
echo -n 'your-value' | base64
```

### Step 2: Create ConfigMap for WordPress Configuration

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_NAME: <your-database-name>
```

### Step 3: Create PersistentVolumeClaims

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### Step 5: WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        envFrom:
        - configMapRef:
            name: wordpress-config
        env:
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
```

### Step 6: Create Services

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Compilation of all YAMLs

```
The above YAML sections need to be copied into separate files or compiled into a single YAML file divided by `---` to ensure that Kubernetes can process them correctly. Each section defines a different component for the deployment process.
```

### Final Notes

- Make sure to replace placeholders like `<base64-encoded-root-password>`, `<your-database-name>`, etc., with actual values for your environment.
- This example uses simple storage options and configurations. In production, you should consider stronger persistence solutions and further scaling options.