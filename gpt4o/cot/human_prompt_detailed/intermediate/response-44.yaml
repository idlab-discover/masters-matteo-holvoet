Creating a Kubernetes YAML manifest to deploy a WordPress website with a MySQL database requires several components. We'll need Deployments for both WordPress and MySQL, PersistentVolumeClaims for MySQL data persistence, and Services to enable connectivity. Additionally, we'll leverage ConfigMaps for configuration and Secrets for sensitive data such as passwords.

### Step-by-Step Breakdown:

1. **Secrets and ConfigMaps**:
    - Create a Secret for storing sensitive data like database passwords.
    - Create a ConfigMap for storing configuration data that doesn't need to be encrypted.

2. **PersistentVolumeClaims**:
    - Define a PersistentVolumeClaim for the MySQL database to ensure data persistence.

3. **Deployments**:
    - Define a Deployment for the MySQL database.
    - Define a Deployment for WordPress.

4. **Services**:
    - Create a Service for WordPress to expose it.
    - Create a Service for MySQL to ensure WordPress can connect to it.

Here's the complete YAML manifest:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: YmFkYWRtaW4K  # base64-encoded 'badadmin'
  mysql-user-password: dXNlcnBhc3MK  # base64-encoded 'userpass'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_USER: wordpress  # The username for WordPress database
  WORDPRESS_DB_NAME: wordpressdb

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: "/var/lib/mysql"
          name: mysql-persistent-storage
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.7
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

- **Secrets** are used for storing sensitive database passwords.
- **ConfigMaps** manage non-sensitive data like database names and usernames.
- **PersistentVolumeClaims** ensure data persistence for the MySQL database.
- **Deployments** manage the pods for MySQL and WordPress.
- **Services** enable connectivity between the WordPress and MySQL applications. The WordPress service is set to LoadBalancer type to expose the application externally.