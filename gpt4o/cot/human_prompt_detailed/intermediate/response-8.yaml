To deploy a WordPress website with a MySQL database backend on Kubernetes, we'll need to create a complete YAML manifest that covers all components:

1. **Namespace (optional)**: It's recommended to isolate resources in a namespace for a WordPress application.
2. **Secrets**: To store sensitive information like MySQL root password, WordPress database user, and password.
3. **ConfigMaps**: To store non-sensitive configuration data.
4. **Persistent Volume Claims**: For MySQL data persistence.
5. **Deployments**: For managing the pods for WordPress and MySQL.
6. **Services**: To expose both WordPress and MySQL so they can communicate and so WordPress can be accessed outside the cluster.

Let's organize each component:

### 1. Namespace

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### 2. Secrets

Create a secret with MySQL root password, WordPress database name, user, and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress
type: Opaque
data:
  mysql-root-password: <base64-root-password>
  mysql-user: <base64-wordpress-user>
  mysql-password: <base64-wordpress-pass>
  mysql-database: <base64-wordpress-db-name>
```

Encode your sensitive values with base64.

### 3. ConfigMap

Create a ConfigMap if needed for any specific configuration. For this basic setup, we'll assume the defaults are fine, so we'll skip this step.

### 4. Persistent Volume Claims

Create Persistent Volume Claims for the MySQL database to ensure data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### 5. Deployments

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-database
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: mysql-password
```

### 6. Services

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Use headless service for MySQL
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

These configurations provide a basic setup. Adjust resource requests and limits, storage claims, and other specifics according to your requirements and cluster configurations. Don't forget to replace the `<base64-...>` placeholders in the Secrets section with actual base64 encoded values, using a command such as `echo -n "your_value" | base64`.