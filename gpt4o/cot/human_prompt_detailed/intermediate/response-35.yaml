To create a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend, you need to define several components including Deployments, Services, PersistentVolumeClaims, ConfigMaps, and Secrets. Let's walk through the setup step by step:

### Step 1: Create a Secret for MySQL Password
A Secret is a secure way to store sensitive data like passwords. We'll create a Secret for the MySQL root password and the WordPress database user password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQxMjM=  # this is 'password123' base64 encoded
  mysql-user-password: cGFzc3dvcmQxMjM=  # this is 'password123' base64 encoded
```

### Step 2: Create a ConfigMap for WordPress Configuration
ConfigMaps can store non-sensitive configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql
  WORDPRESS_DB_USER: wordpress
  WORDPRESS_DB_NAME: wordpress
```

### Step 3: Create PersistentVolumeClaims (PVCs) for Data Persistence
We need two PVCs: one for MySQL data and another one for WordPress uploads.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Create a Deployment for MySQL
The MySQL Deployment uses the Secret for the root password and a PVC for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Create a Service for MySQL
This Service exposes the MySQL database internally within the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Headless service for StatefulSet
```

### Step 6: Create a Deployment for WordPress
The WordPress Deployment uses a ConfigMap and Secret for configuration.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        envFrom:
        - configMapRef:
            name: wordpress-config
        env:
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user-password
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

### Step 7: Create a Service for WordPress
This Service exposes WordPress to external clients.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer  # Or NodePort if you don't have a LoadBalancer available
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Final Manifest
You can combine all these components into a single YAML file or separate them based on your deployment strategy. Make sure each component is appropriately separated by '---' if included in a single file.

This setup provides all necessary configurations to deploy a WordPress application backed by a MySQL database on Kubernetes. Adjust storage sizes, replica counts, and configurations based on your specific requirements for development or production environments.