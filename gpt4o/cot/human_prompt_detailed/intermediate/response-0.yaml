To create a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database as the backend, we'll need to define several components:

1. **Secrets** to store sensitive information such as database passwords.
2. **ConfigMaps** for non-sensitive configuration items.
3. **PersistentVolumeClaims** for data persistence in MySQL.
4. **Deployments** for both the WordPress and MySQL applications.
5. **Services** to expose the WordPress and MySQL deployments.

Let's go through each component step-by-step.

### Step 1: Secrets
We'll create a Secret to store the MySQL root password, database name, user, and password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: c3VwZXJzZWNyZXQ=  # base64 for "supersecret"
  mysql-database: d29yZHByZXNz           # base64 for "wordpress"
  mysql-user: d3B1c2Vy                   # base64 for "wpuser"
  mysql-password: d3BwYXNz               # base64 for "wppass"
```

### Step 2: ConfigMap
We'll create a ConfigMap to store the WordPress configuration.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wpuser
```

### Step 3: PersistentVolumeClaims
We need PersistentVolumeClaims for MySQL data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: MySQL Deployment
Now we create the Deployment for MySQL, using the Secret and PVC defined above.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

### Step 5: MySQL Service
Define a Service to expose MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### Step 6: WordPress Deployment
Create the Deployment for WordPress, referring to configuration from the ConfigMap and Secret.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_HOST
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_USER
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          ports:
            - containerPort: 80
```

### Step 7: WordPress Service
Lastly, define the Service to expose WordPress externally.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

This YAML setup should result in a fully functional WordPress with a MySQL backend, using Kubernetes best practices for separating configuration data and sensitive information. Remember that you'll need base64-encoded values for your Secret's data fields.