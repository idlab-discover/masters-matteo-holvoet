Creating a Kubernetes configuration for deploying a WordPress website with a MySQL backend involves several components. We need to design a setup with Deployments for both WordPress and MySQL, Services for connectivity, PersistentVolumeClaims for data persistence, and ConfigMaps and Secrets for configuration and sensitive data respectively. Below is a detailed step-by-step guide including YAML manifests for each component:

### Step-by-Step Guide

#### 1. Create a Secret for MySQL
We will store sensitive data such as MySQL's root and WordPress database passwords in a Kubernetes Secret.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: BASE64_ENCODED_ROOT_PASSWORD
  mysql-password: BASE64_ENCODED_WORDPRESS_PASSWORD
```

Replace `BASE64_ENCODED_ROOT_PASSWORD` and `BASE64_ENCODED_WORDPRESS_PASSWORD` with the base64-encoded forms of your desired passwords.

#### 2. Create a PersistentVolumeClaim for MySQL
To ensure data persistence, we will use a PersistentVolumeClaim (PVC).

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

#### 3. Deploy MySQL
Here is the Deployment manifest for the MySQL container.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### 4. Service for MySQL
Create a Service resource to expose MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None # Use clusterIP: None for a headless service
```

#### 5. ConfigMap for WordPress
We'll use a ConfigMap to store non-sensitive configuration data for WordPress.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wordpress
```

#### 6. Deploy WordPress
Next, create a Deployment manifest for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 80
```

#### 7. Service for WordPress
Finally, create a Service to expose WordPress.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Explanation

1. **Secrets**: Store sensitive data such as passwords using Secrets.
2. **PersistentVolumeClaim**: Keep MySQL data persistent across pod restarts.
3. **MySQL Deployment**: Deploy the MySQL database configured to use the Secret for sensitive data and the PVC for storage.
4. **MySQL Service**: Provide internal communication for WordPress to connect with MySQL.
5. **ConfigMaps**: Store non-sensitive configuration data.
6. **WordPress Deployment**: Configuration uses the MySQL database.
7. **WordPress Service**: Expose WordPress for external access through a LoadBalancer.

This setup ensures that sensitive information is protected, data is persisted, and both applications are correctly configured and exposed.