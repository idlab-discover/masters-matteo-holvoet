To deploy a WordPress website with a MySQL database using Kubernetes, we will create a multi-part YAML manifest. This will include Deployments, Services, PersistentVolumeClaims, ConfigMaps, and Secrets to manage configuration and sensitive data. Let's break it down step by step:

### Step 1: Create Secrets for MySQL

First, we need to store sensitive information such as database passwords using Secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-password: <base64-encoded-user-password>
```

> Replace `<base64-encoded-root-password>` and `<base64-encoded-user-password>` with the base64 encoded values of your chosen passwords.

### Step 2: Create a ConfigMap for WordPress configuration

It will store non-sensitive environment configurations like database name and host.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: "wordpress"
  WORDPRESS_DB_HOST: "mysql"
```

### Step 3: Create a PersistentVolumeClaim for MySQL

This ensures that the MySQL data persists across pod restarts.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### Step 4: Create MySQL Deployment

Deploy the MySQL container with a PersistentVolumeClaim for data persistence.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: MYSQL_USER
          value: "wordpress"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

### Step 5: Create a Service for MySQL

This Service enables other pods to access MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### Step 6: Create WordPress Deployment

Deploy the WordPress container configured to communicate with MySQL.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_NAME
        - name: WORDPRESS_DB_USER
          value: "wordpress"
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
```

### Step 7: Create a Service for WordPress

This Service allows external access to the WordPress site.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Complete Manifest

Combine all these pieces into a single YAML file, applying them to your Kubernetes cluster using `kubectl apply -f <your-file.yaml>`.

This comprehensive setup ensures a robust and resilient deployment of WordPress with a MySQL backend on Kubernetes, utilizing Kubernetes best practices like separating sensitive data, using persistent storage, and decoupling configuration from the application code.