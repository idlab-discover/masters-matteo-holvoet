Sure, let's break down the task step-by-step and construct a Kubernetes YAML manifest to deploy a WordPress site with a MySQL database.

### Step 1: Create a Secret for MySQL

First, let's create a Secret to hold the MySQL root password and WordPress database credentials securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secrets
type: Opaque
data:
  mysql-root-password: cGFzc3dvcmQ=          # base64 encoded 'password'
  mysql-database: d29yZHByZXNz            # base64 encoded 'wordpress'
  mysql-user: d3AtdXNlcg==                # base64 encoded 'wp-user'
  mysql-password: d3AtcGFzc3dvcmQ=        # base64 encoded 'wp-password'
```

### Step 2: Create a ConfigMap for WordPress

We'll use a ConfigMap to define non-sensitive information for WordPress configuration.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_NAME: "wordpress"
```

### Step 3: Create PersistentVolumeClaims for MySQL

Next, create PersistentVolumeClaims for data persistence.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 4: MySQL Deployment

Deploy MySQL using a Deployment.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

### Step 5: WordPress Deployment

Deploy the WordPress application with its own Deployment.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql:3306
            - name: WORDPRESS_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: wordpress-config
                  key: WORDPRESS_DB_NAME
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: mysql-password
          ports:
            - containerPort: 80
              name: wordpress
```

### Step 6: Services for WordPress and MySQL

Finally, create Services to expose WordPress and MySQL.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: wordpress

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

This completes the Kubernetes YAML manifest that includes Deployments, PersistentVolumeClaims, ConfigMap, Secret, and Services for deploying a WordPress site backed by a MySQL database. Make sure to apply these manifests with `kubectl apply -f <filename>` in the Kubernetes cluster. Adjust the storage class name and secrets as needed for your specific environment.