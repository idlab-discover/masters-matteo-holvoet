Certainly! Here's a single YAML file that includes all the necessary components to deploy a WordPress site with a MySQL database backend on Kubernetes. The file is properly formatted and wrapped within `yaml` blocks for easy readability:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  WORDPRESS_DB_HOST: mysql-service

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cm9vdF9wYXNzd29yZA== # Base64 encoded 'root_password'
  MYSQL_DATABASE: d29yZHByZXNz # Base64 encoded 'wordpress'
  MYSQL_USER: d3BfdXNlcg== # Base64 encoded 'wp_user'
  MYSQL_PASSWORD: d3BfcGFzc3dvcmQ= # Base64 encoded 'wp_password'

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        ports:
        - containerPort: 80
        env:
        - name: WORDPRESS_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: wordpress-config
              key: WORDPRESS_DB_HOST
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  type: LoadBalancer
  selector:
    app: wordpress
  ports:
  - port: 80
    targetPort: 80
```

### Explanation:

- **ConfigMap** and **Secret**: These are separated by `---` to signify distinct configurations within a single YAML file.
- **PersistentVolumeClaim**: Ensures that MySQL data can be persisted beyond the pod lifecycle.
- **Deployments**: Separate specifications for MySQL and WordPress with appropriate environment variable setups sourced from the ConfigMap and Secret.
- **Services**: Enable connectivity and provide a stable endpoint for the WordPress frontend and MySQL backend. The WordPress Service uses `LoadBalancer` to expose it outside the cluster.

You can deploy this setup to your Kubernetes cluster by saving it to a file (e.g., `wordpress-mysql-deployment.yaml`) and applying it with:

```bash
kubectl apply -f wordpress-mysql-deployment.yaml
```

Ensure your Kubernetes environment has the necessary capabilities to handle `LoadBalancer` services and persistent storage.