To create a Kubernetes YAML manifest for deploying a WordPress website with a MySQL database backend, we'll need to create several Kubernetes resources. These resources include PersistentVolumes (PVs), PersistentVolumeClaims (PVCs), Deployments, and Services for both WordPress and MySQL. We'll also need to ensure that the MySQL credentials are safely stored using Kubernetes Secrets.

### Step-by-Step Outline

1. **Create a Secret for MySQL Credentials**: Store the database password securely using Kubernetes Secrets.
   
2. **Define PersistentVolumes and PersistentVolumeClaims**: Persist data for MySQL and WordPress using PVs and PVCs.

3. **Create MySQL Deployment and Service**: Deploy MySQL using a Deployment and expose it using a Service.

4. **Create WordPress Deployment and Service**: Deploy WordPress and expose it similarly.

Let's create the YAML manifest step by step:

### Step 1: MySQL Secret

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <BASE64_ENCODED_ROOT_PASSWORD>   # Base64 encoded root password
  mysql-database: d29yZHByZXNz                             # Base64 encoded "wordpress"
  mysql-user: d29yZHByZXNz                                 # Base64 encoded "wordpress"
  mysql-password: <BASE64_ENCODED_WORDPRESS_PASSWORD>      # Base64 encoded WordPress password
```

### Step 2: PersistentVolumes and PersistentVolumeClaims

```yaml
---
# PersistentVolume and PersistentVolumeClaim for MySQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce

---
# PersistentVolume and PersistentVolumeClaim for WordPress
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/wordpress
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
```

### Step 3: MySQL Deployment and Service

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 4: WordPress Deployment and Service

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:4.8-apache
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-database
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: wordpress
```

### Summary
This setup includes Secrets for storing sensitive information, PVCs to ensure persistence, and Deployments/Services for launching and exposing both MySQL and WordPress containers. You need to replace `<BASE64_ENCODED_ROOT_PASSWORD>` and `<BASE64_ENCODED_WORDPRESS_PASSWORD>` with the actual base64 encoded values for your database credentials. Adjust the storage capacity and host path according to your needs and environment.