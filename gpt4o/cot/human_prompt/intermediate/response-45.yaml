To deploy a WordPress website using MySQL as the backend in a Kubernetes cluster, you'll need to create a few different Kubernetes resources: PersistentVolumeClaims for storage, Secrets for sensitive information, and Deployments and Services for WordPress and MySQL. Below, I'll guide you through the step-by-step creation of the necessary YAML files.

### Step 1: Create a Secret for MySQL Password

First, create a Kubernetes Secret to store the MySQL root password and the WordPress database password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: bXlwYXNzd29yZA== # Base64 encoded password "mypassword"
```

### Step 2: Create PersistentVolumeClaims

Create PersistentVolumeClaims to provide persistent storage for both MySQL and WordPress.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Deploy MySQL

Deploy a MySQL Deployment and expose it via a Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 4: Deploy WordPress

Deploy WordPress and expose it via a Service.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql:3306
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
  - port: 80
  selector:
    app: wordpress
  type: LoadBalancer
```

### Explanation
- **Secret**: Stores MySQL passwords securely as a base64 encoded string.
- **PersistentVolumeClaim (PVC)**: Requests storage for MySQL and WordPress data.
- **MySQL Deployment**: Requests one MySQL pod with username `wordpress`, database `wordpress`, and a root password sourced from the Secret.
- **WordPress Deployment**: Requests WordPress pods, configured to connect to the MySQL service.
- **Services**: Expose MySQL internally and the WordPress site externally.

With these manifests, you have a functional WordPress website in a Kubernetes cluster connected to a MySQL back end. Ensure the cluster supports PersistentVolumes and LoadBalancer types appropriately.