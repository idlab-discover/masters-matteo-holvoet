Deploying a WordPress website with a MySQL database on Kubernetes involves creating several resources, such as PersistentVolumeClaims for data storage, Secrets for sensitive information, ConfigMaps for configuration, and the Deployments and Services required for both the WordPress and MySQL applications.

Here's a step-by-step Kubernetes YAML manifest that breaks down each component needed:

### 1. MySQL Database

#### a. Secret for MySQL Password
Create a secret to store the MySQL root password and the WordPress database user password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  mysql-root-password: <base64-encoded-root-password>
  mysql-password: <base64-encoded-database-password>
```
- Replace `<base64-encoded-root-password>` and `<base64-encoded-database-password>` with your base64 encoded values.

#### b. PersistentVolumeClaim for MySQL
Define a PersistentVolumeClaim to store MySQL data.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

#### c. MySQL Deployment
Configure the MySQL Deployment to use the secret, PVC, and necessary environment variables.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: wordpress
            - name: MYSQL_USER
              value: wpuser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

#### d. MySQL Service
Expose the MySQL Deployment internally in the cluster.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### 2. WordPress Application

#### a. PersistentVolumeClaim for WordPress
Define a PersistentVolumeClaim to store WordPress data.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

#### b. WordPress Deployment
Configure the WordPress Deployment to connect to the MySQL database.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_USER
              value: wpuser
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
            - name: WORDPRESS_DB_NAME
              value: wordpress
          volumeMounts:
            - name: wordpress-persistent-storage
              mountPath: /var/www/html
      volumes:
        - name: wordpress-persistent-storage
          persistentVolumeClaim:
            claimName: wordpress-pvc
```

#### c. WordPress Service
Expose the WordPress Deployment externally.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer  # Use ClusterIP if not using a load-balancer service
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Notes

- Ensure your Kubernetes cluster supports the service type `LoadBalancer` or adjust accordingly (e.g., use `NodePort` if needed).
- Remember to apply the YAML manifest files using `kubectl apply -f <filename>`.
- Monitor the deployments and services using `kubectl get pods,svc` to ensure everything is running properly.