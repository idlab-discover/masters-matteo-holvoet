Deploying a WordPress website using a MySQL database in Kubernetes requires setting up several components, including persistent storage, Kubernetes Secrets for storing sensitive data, and the actual deployments and services for both WordPress and MySQL. Below is a step-by-step guide to creating the necessary YAML manifests for this setup.

### Step 1: Namespace Creation (Optional)
Create a separate namespace for better resource management and isolation.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress
```

### Step 2: Create Persistent Volumes and Persistent Volume Claims
Define persistent storage for both MySQL and WordPress.

**MySQL Persistent Volume Claim (PVC):**

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

**WordPress Persistent Volume Claim (PVC):**

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
  namespace: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

### Step 3: Create Kubernetes Secrets
Store sensitive data such as the MySQL root password.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
  namespace: wordpress
type: Opaque
data:
  password: cGFzc3dvcmQ=  # base64 encoded 'password'
```

### Step 4: Deploy MySQL Database
Create a deployment and service for the MySQL database.

**MySQL Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

**MySQL Service:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 5: Deploy WordPress
Create a deployment and service for the WordPress application.

**WordPress Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

**WordPress Service:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary
This setup includes:

- Persistent storage for both MySQL and WordPress.
- Kubernetes Secrets for sensitive information.
- Deployments and Services for MySQL and WordPress.
- A `LoadBalancer` type service for WordPress to make it accessible from outside the cluster.

Apply these manifests to your Kubernetes cluster using `kubectl apply -f <filename>.yaml` for each YAML manifest created. Adjust storage sizes, image versions, and any other specifications as needed for your particular use case.