To deploy a WordPress website using a MySQL database on Kubernetes, we'll need to create several resources:

1. **PersistentVolume** and **PersistentVolumeClaim** for both WordPress and MySQL to ensure data persistence.
2. **Secret** to store MySQL credentials securely.
3. **Deployment** for WordPress and MySQL containers.
4. **Service** to expose WordPress and MySQL internally within the cluster.

Let's break this down step by step:

### Step 1: PersistentVolumes and PersistentVolumeClaims
These resources are necessary to provide persistent storage to both the MySQL database and the WordPress site.

```yaml
# PersistentVolume for MySQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/mysql"  # change accordingly for your environment

---

# PersistentVolumeClaim for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce

---

# PersistentVolume for WordPress
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data/wordpress"  # change accordingly for your environment

---

# PersistentVolumeClaim for WordPress
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
```

### Step 2: Secret for MySQL credentials
To store sensitive data like the MySQL root password securely.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=  # base64 encoded 'password'
  MYSQL_DATABASE: ZXhhbXBsZQ==      # base64 encoded 'example'
  MYSQL_USER: dXNlcg==              # base64 encoded 'user'
  MYSQL_PASSWORD: dXNlcl9wYXNz      # base64 encoded 'user_pass'
```

### Step 3: Deployments for MySQL and WordPress

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_USER
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_PASSWORD
        - name: WORDPRESS_DB_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_DATABASE
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### Step 4: Services

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None  # Headless service for stable DNS
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer  # Use NodePort if LoadBalancer is not available
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Final Notes

- Make sure the `hostPath` used in PersistentVolumes (`/mnt/data/mysql` and `/mnt/data/wordpress`) is correct and writable in your Kubernetes environment.
- Adjust the `type` of the WordPress service according to your Kubernetes setup (ClusterIP, NodePort, or LoadBalancer).
- You may need to install a network load balancer or ingress controller based on your cloud provider and Kubernetes setup.
- Ensure that your Kubernetes cluster has sufficient resources and permissions to handle these deployments.