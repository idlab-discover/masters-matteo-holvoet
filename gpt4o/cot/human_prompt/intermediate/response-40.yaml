To deploy a WordPress website using Kubernetes, we'll need to create several YAML manifests for different components. This includes creating a Deployment for the WordPress application, a Deployment for the MySQL database, and Services to expose them. It also includes ConfigMaps and Secrets to manage configuration details securely.

Here's a step-by-step breakdown of what we need:

1. **Secrets**: We need a Secret to hold the MySQL root password and the WordPress database user password.

2. **PersistentVolumes and PersistentVolumeClaims**: For both WordPress and MySQL, PersistentVolumes (PV) and PersistentVolumeClaims (PVC) might be necessary to ensure data persistence.

3. **MySQL Deployment**: Define the MySQL Deployment which will use the created Secret for passwords.

4. **MySQL Service**: Expose the MySQL instance within the cluster using a Service.

5. **WordPress Deployment**: Define the WordPress Deployment, referring to the MySQL service for database connection.

6. **WordPress Service**: Expose the WordPress service externally so that users can access the website.

Let's go through the YAML manifests:

### 1. Secret

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  mysql-root-password: <base64_encoded_root_password>
  mysql-user-password: <base64_encoded_user_password>
```

Base64 encode your root and user passwords before putting them in the secret. You can use a tool like `base64` to do this.

### 2. PersistentVolumeClaims

For simplification, let's just define the PVCs without specifying static PersistentVolumes; these will bind dynamic storage from your cloud provider or local storage provisioner.

**MySQL PVC**
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
```

**WordPress PVC**
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### 3. MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress_user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: mysql-user-password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
```

### 4. MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
```

### 5. WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress_user
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: mysql-user-password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pv-claim
```

### 6. WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Explanation:

- **Secret**: We use Kubernetes Secrets to store sensitive information like passwords. Make sure you replace the placeholders with actual base64-encoded strings.
- **PersistentVolumeClaims**: These are used to request storage resources.
- **MySQL Deployment**: This deployment sets up a single MySQL pod with its password and databases loaded from the secret.
- **MySQL Service**: Exposes the MySQL database to be accessed by WordPress within the cluster.
- **WordPress Deployment**: Sets up WordPress and connects it to the MySQL database.
- **WordPress Service**: This exposes WordPress to the outside world using a Kubernetes LoadBalancer service; depending on your setup, this might be an external IP or DNS entry.

Deploy these configurations using `kubectl apply -f <filename>.yaml` and replace the contents accordingly. This setup will create a simple WordPress and MySQL deployment in a Kubernetes cluster. Adjust the configurations as needed based on your specific environment and requirements.