Deploying a WordPress website with a MySQL backend in Kubernetes involves creating several Kubernetes resources such as Deployments, Services, and PersistentVolumes to ensure data persistence. Below is a step-by-step guide to create a basic YAML manifest for this setup:

### Step 1: Create PersistentVolume and PersistentVolumeClaim
Persistent storage is needed for both WordPress and MySQL.

1. **PersistentVolume**: This is used to provide storage resources.
2. **PersistentVolumeClaim**: Requests storage resources from the PersistentVolume.

Here is a basic example:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
```

These PVCs will automatically use dynamically provisioned PersistentVolumes if your cluster supports it. Adjust according to your persistent storage class settings.

### Step 2: Create MySQL Deployment and Service
This provides the MySQL database for WordPress.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpassword
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wpuser
        - name: MYSQL_PASSWORD
          value: wppassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 3: Create WordPress Deployment and Service
This sets up the WordPress application.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - image: wordpress:latest
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wpuser
        - name: WORDPRESS_DB_PASSWORD
          value: wppassword
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary

- **PersistentVolumeClaims** are created for MySQL and WordPress.
- **MySQL Deployment** and **Service** are created to listen on port `3306`.
- **WordPress Deployment** and **Service** are created and exposed via a `LoadBalancer` on port `80`.

Make sure to replace placeholder environment variables (`rootpassword`, `wppassword`) with secure values or manage them using Kubernetes `Secrets`. Also, this manifest assumes that your Kubernetes environment supports LoadBalancer services and dynamic PVC provisioning. Adjust your setup according to your specific Kubernetes provider and network configuration.