Certainly! Deploying WordPress with a MySQL backend in Kubernetes involves several components: MySQL Deployment and Service, WordPress Deployment and Service, and Persistent Volumes to store data. Let's break it down step-by-step.

### 1. Create a Namespace

It's good practice to create a separate namespace for your application to keep resources organized.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-app
```

### 2. Create Persistent Volumes

You'll need Persistent Volumes (PV) and Persistent Volume Claims (PVC) to store MySQL data and WordPress files.

#### Persistent Volume and Claim for MySQL

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
  namespace: wordpress-app
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

#### Persistent Volume and Claim for WordPress

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: wordpress-pv
  namespace: wordpress-app
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/wordpress
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

### 3. Deploy MySQL

You'll need a Deployment for MySQL along with an associated Service to expose it internally.

#### MySQL Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: your-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          value: wordpress-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
```

#### MySQL Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-app
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
```

### 4. Deploy WordPress

Similarly, create a Deployment and Service for WordPress.

#### WordPress Deployment

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:latest
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          value: wordpress-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
```

#### WordPress Service

```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-app
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: wordpress
```

### Conclusion

Make sure that all these YAML definitions are applied to your Kubernetes cluster:

- Save each part as separate YAML files, for example, `namespace.yaml`, `pv-pvc.yaml`, `mysql-deployment.yaml`, `mysql-service.yaml`, `wordpress-deployment.yaml`, `wordpress-service.yaml`.
- Apply them using `kubectl apply -f <filename>.yaml`.

Note: Update the password values in these configurations to ensure security. Also, paths will need to be adjusted for cloud environments.