Deploying a WordPress website with a MySQL database backend in Kubernetes requires creating multiple YAML manifest files, including Deployments, Services, and PersistentVolumeClaims for both WordPress and MySQL. Let's break it down step-by-step:

### Step 1: Create a Namespace
It's a common practice to deploy the application in a separate namespace.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: wordpress-namespace
```

### Step 2: Create PersistentVolumes (Optional)
PersistentVolumes are created outside the namespace scope. Depending on the cloud provider, you might not need to manually create these; the PersistentVolumeClaims might be automatically provisioned.

For example, using dynamic provisioning might be supported, so the following steps are in terms of PersistentVolumeClaims which are namespace-scoped.

### Step 3: Create PersistentVolumeClaims

#### For MySQL
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

#### For WordPress
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  namespace: wordpress-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
```

### Step 4: Create a Secret for MySQL

It's a good practice to store sensitive information like MySQL passwords in Kubernetes Secrets.

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: wordpress-namespace
type: Opaque
data:
  mysql-root-password: <base64-encoded-mysql-root-password>
  mysql-password: <base64-encoded-mysql-user-password>
```
Encode your MySQL root password and user password using base64 (`echo -n 'yourpassword' | base64`).

### Step 5: MySQL Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: wordpress-namespace
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
```

### Step 6: WordPress Deployment and Service

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  selector:
    matchLabels:
      app: wordpress
  replicas: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
      - name: wordpress
        image: wordpress:5.8-apache
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - containerPort: 80
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wordpress-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: wordpress-namespace
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: wordpress
```

### Summary
- **Namespace**: Provides isolation.
- **PersistentVolumeClaims**: Requests storage for MySQL and WordPress.
- **Secret**: Stores sensitive data.
- **Deployment/Service for MySQL**: Sets up MySQL database.
- **Deployment/Service for WordPress**: Deploys the WordPress application and exposes it via a LoadBalancer service.

Make sure to replace any placeholder text such as `<base64-encoded-mysql-root-password>` with actual base64-encoded credentials.