Step 1: Create a ConfigMap for MySQL configuration (mysql-config.yaml)
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_ROOT_PASSWORD: your_root_password_here
  MYSQL_USER: your_mysql_user_here
  MYSQL_PASSWORD: your_mysql_password_here
  MYSQL_DATABASE: your_mysql_database_here
```

Step 2: Create a Secret for WordPress database configuration (wordpress-secret.yaml)
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-secret
data:
  DB_NAME: base64_encoded_db_name_here
  DB_USER: base64_encoded_db_user_here
  DB_PASSWORD: base64_encoded_db_password_here
```

Step 3: Create a PersistentVolume (pv.yaml) and PersistentVolumeClaim (pvc.yaml) for MySQL data persistence.
```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/mysql

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

Step 4: Create a Deployment for MySQL (mysql-deployment.yaml)
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          envFrom:
            - configMapRef:
                name: mysql-config
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

Step 5: Create a Deployment for WordPress (wordpress-deployment.yaml)
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          envFrom:
            - secretRef:
                name: wordpress-secret
          ports:
            - containerPort: 80
```

Step 6: Create Services for MySQL and WordPress (services.yaml)
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```

Apply the ConfigMaps, Secrets, PersistentVolume, PersistentVolumeClaim, Deployments, and Services using `kubectl apply -f <filename>.yaml` for each file to deploy the WordPress website with a MySQL database as the backend on Kubernetes.