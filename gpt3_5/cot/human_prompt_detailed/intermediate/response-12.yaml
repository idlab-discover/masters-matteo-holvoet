
1. ConfigMaps and Secrets:
Create ConfigMaps and Secrets for configuration and sensitive data such as database username, password, and database name.

wordpress-configmap.yaml:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
data:
  DB_NAME: wordpress
  DB_USER: admin
  DB_PASSWORD: password
```

mysql-secret.yaml:
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=
  MYSQL_DATABASE: bXlzcWw=
```

2. PersistentVolume:
Create a PersistentVolume for MySQL data persistence.

mysql-pvc.yaml:
```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

3. Deployments:
Create Deployments for WordPress and MySQL.

wordpress-deployment.yaml:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: wordpress-config
```

mysql-deployment.yaml:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3306
          envFrom:
            - secretRef:
                name: mysql-secret
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
```

4. Services:
Create Services for WordPress and MySQL.

wordpress-service.yaml:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-service
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort
```

mysql-service.yaml:
```yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
```

By applying these YAML manifests in your Kubernetes environment, you will deploy a WordPress website with a MySQL database backend.