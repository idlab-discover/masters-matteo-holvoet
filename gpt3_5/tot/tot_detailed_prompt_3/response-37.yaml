Expert 1:
Step 1: Create a PersistentVolumeClaim to be used by the MySQL deployment for data persistence. I will use the following YAML snippet for the PersistentVolumeClaim:

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
```

Step 2: Deploy the MySQL backend with the following Deployment manifest. I will configure the necessary environment variables for MySQL configuration:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
```

Expert 2: (Review and provide analysis)
Step 1: Reviewing the PersistentVolumeClaim YAML provided by the first expert; I would rate their response as a 5. It correctly creates the PersistentVolumeClaim for MySQL data persistence.

Step 2: Reviewing the MySQL Deployment YAML provided by the first expert; I would rate their response as a 4. It correctly deploys MySQL with the necessary configurations, but could be improved by including the labels for selector and template.

Expert 3:
Step 1: Create ConfigMap and Secret for MySQL configuration and sensitive data management.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  my.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  password: <base64-encoded-password>
```

Step 2: Deploy the WordPress container with a Deployment manifest that includes appropriate container images, ports, and environment variables for database configuration. Also, create a Service for WordPress to enable connectivity.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:latest
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql
            - name: WORDPRESS_DB_NAME
              value: wordpress
            - name: WORDPRESS_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
spec:
  selector:
    app: wordpress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```

Expert 1: (Review and provide analysis)
Step 1: Reviewing the ConfigMap and Secret YAML provided by the third expert; I would rate their response as a 5. It correctly creates the ConfigMap and Secret for MySQL configuration and sensitive data management.

Step 2: Reviewing the WordPress Deployment and Service YAML provided by the third expert; I would rate their response as a 5. It correctly deploys WordPress with appropriate configurations and creates the Service for connectivity.

Now, let's analyze all three experts' solutions and provide the consensus solution.